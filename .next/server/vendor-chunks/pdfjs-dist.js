/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pdfjs-dist";
exports.ids = ["vendor-chunks/pdfjs-dist"];
exports.modules = {

/***/ "(ssr)/./node_modules/pdfjs-dist/build/pdf.js":
/*!**********************************************!*\
  !*** ./node_modules/pdfjs-dist/build/pdf.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * @licstart The following is the entire license notice for the\n * JavaScript code in this page\n *\n * Copyright 2023 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * JavaScript code in this page\n */ (function webpackUniversalModuleDefinition1(root1, factory1) {\n    if (true) module.exports = root1.pdfjsLib = factory1();\n    else {}\n})(globalThis, ()=>{\n    return /******/ (()=>{\n        /******/ \"use strict\";\n        /******/ var __webpack_modules__ = [\n            ,\n            /* 1 */ /***/ (__unused_webpack_module1, exports1)=>{\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                exports1.VerbosityLevel = exports1.Util = exports1.UnknownErrorException = exports1.UnexpectedResponseException = exports1.TextRenderingMode = exports1.RenderingIntentFlag = exports1.PromiseCapability = exports1.PermissionFlag = exports1.PasswordResponses = exports1.PasswordException = exports1.PageActionEventType = exports1.OPS = exports1.MissingPDFException = exports1.MAX_IMAGE_SIZE_TO_CACHE = exports1.LINE_FACTOR = exports1.LINE_DESCENT_FACTOR = exports1.InvalidPDFException = exports1.ImageKind = exports1.IDENTITY_MATRIX = exports1.FormatError = exports1.FeatureTest = exports1.FONT_IDENTITY_MATRIX = exports1.DocumentActionEventType = exports1.CMapCompressionType = exports1.BaseException = exports1.BASELINE_FACTOR = exports1.AnnotationType = exports1.AnnotationReplyType = exports1.AnnotationPrefix = exports1.AnnotationMode = exports1.AnnotationFlag = exports1.AnnotationFieldFlag = exports1.AnnotationEditorType = exports1.AnnotationEditorPrefix = exports1.AnnotationEditorParamsType = exports1.AnnotationBorderStyleType = exports1.AnnotationActionEventType = exports1.AbortException = void 0;\n                exports1.assert = assert1;\n                exports1.bytesToString = bytesToString1;\n                exports1.createValidAbsoluteUrl = createValidAbsoluteUrl1;\n                exports1.getModificationDate = getModificationDate1;\n                exports1.getUuid = getUuid1;\n                exports1.getVerbosityLevel = getVerbosityLevel1;\n                exports1.info = info1;\n                exports1.isArrayBuffer = isArrayBuffer1;\n                exports1.isArrayEqual = isArrayEqual1;\n                exports1.isNodeJS = void 0;\n                exports1.normalizeUnicode = normalizeUnicode1;\n                exports1.objectFromMap = objectFromMap1;\n                exports1.objectSize = objectSize1;\n                exports1.setVerbosityLevel = setVerbosityLevel1;\n                exports1.shadow = shadow1;\n                exports1.string32 = string321;\n                exports1.stringToBytes = stringToBytes1;\n                exports1.stringToPDFString = stringToPDFString1;\n                exports1.stringToUTF8String = stringToUTF8String1;\n                exports1.unreachable = unreachable1;\n                exports1.utf8StringToString = utf8StringToString1;\n                exports1.warn = warn1;\n                const isNodeJS1 = typeof process === \"object\" && process + \"\" === \"[object process]\" && !process.versions.nw && !(process.versions.electron && process.type && process.type !== \"browser\");\n                exports1.isNodeJS = isNodeJS1;\n                const IDENTITY_MATRIX1 = [\n                    1,\n                    0,\n                    0,\n                    1,\n                    0,\n                    0\n                ];\n                exports1.IDENTITY_MATRIX = IDENTITY_MATRIX1;\n                const FONT_IDENTITY_MATRIX1 = [\n                    0.001,\n                    0,\n                    0,\n                    0.001,\n                    0,\n                    0\n                ];\n                exports1.FONT_IDENTITY_MATRIX = FONT_IDENTITY_MATRIX1;\n                const MAX_IMAGE_SIZE_TO_CACHE1 = 10e6;\n                exports1.MAX_IMAGE_SIZE_TO_CACHE = MAX_IMAGE_SIZE_TO_CACHE1;\n                const LINE_FACTOR1 = 1.35;\n                exports1.LINE_FACTOR = LINE_FACTOR1;\n                const LINE_DESCENT_FACTOR1 = 0.35;\n                exports1.LINE_DESCENT_FACTOR = LINE_DESCENT_FACTOR1;\n                const BASELINE_FACTOR1 = LINE_DESCENT_FACTOR1 / LINE_FACTOR1;\n                exports1.BASELINE_FACTOR = BASELINE_FACTOR1;\n                const RenderingIntentFlag1 = {\n                    ANY: 0x01,\n                    DISPLAY: 0x02,\n                    PRINT: 0x04,\n                    SAVE: 0x08,\n                    ANNOTATIONS_FORMS: 0x10,\n                    ANNOTATIONS_STORAGE: 0x20,\n                    ANNOTATIONS_DISABLE: 0x40,\n                    OPLIST: 0x100\n                };\n                exports1.RenderingIntentFlag = RenderingIntentFlag1;\n                const AnnotationMode1 = {\n                    DISABLE: 0,\n                    ENABLE: 1,\n                    ENABLE_FORMS: 2,\n                    ENABLE_STORAGE: 3\n                };\n                exports1.AnnotationMode = AnnotationMode1;\n                const AnnotationEditorPrefix1 = \"pdfjs_internal_editor_\";\n                exports1.AnnotationEditorPrefix = AnnotationEditorPrefix1;\n                const AnnotationEditorType1 = {\n                    DISABLE: -1,\n                    NONE: 0,\n                    FREETEXT: 3,\n                    STAMP: 13,\n                    INK: 15\n                };\n                exports1.AnnotationEditorType = AnnotationEditorType1;\n                const AnnotationEditorParamsType1 = {\n                    RESIZE: 1,\n                    CREATE: 2,\n                    FREETEXT_SIZE: 11,\n                    FREETEXT_COLOR: 12,\n                    FREETEXT_OPACITY: 13,\n                    INK_COLOR: 21,\n                    INK_THICKNESS: 22,\n                    INK_OPACITY: 23\n                };\n                exports1.AnnotationEditorParamsType = AnnotationEditorParamsType1;\n                const PermissionFlag1 = {\n                    PRINT: 0x04,\n                    MODIFY_CONTENTS: 0x08,\n                    COPY: 0x10,\n                    MODIFY_ANNOTATIONS: 0x20,\n                    FILL_INTERACTIVE_FORMS: 0x100,\n                    COPY_FOR_ACCESSIBILITY: 0x200,\n                    ASSEMBLE: 0x400,\n                    PRINT_HIGH_QUALITY: 0x800\n                };\n                exports1.PermissionFlag = PermissionFlag1;\n                const TextRenderingMode1 = {\n                    FILL: 0,\n                    STROKE: 1,\n                    FILL_STROKE: 2,\n                    INVISIBLE: 3,\n                    FILL_ADD_TO_PATH: 4,\n                    STROKE_ADD_TO_PATH: 5,\n                    FILL_STROKE_ADD_TO_PATH: 6,\n                    ADD_TO_PATH: 7,\n                    FILL_STROKE_MASK: 3,\n                    ADD_TO_PATH_FLAG: 4\n                };\n                exports1.TextRenderingMode = TextRenderingMode1;\n                const ImageKind1 = {\n                    GRAYSCALE_1BPP: 1,\n                    RGB_24BPP: 2,\n                    RGBA_32BPP: 3\n                };\n                exports1.ImageKind = ImageKind1;\n                const AnnotationType1 = {\n                    TEXT: 1,\n                    LINK: 2,\n                    FREETEXT: 3,\n                    LINE: 4,\n                    SQUARE: 5,\n                    CIRCLE: 6,\n                    POLYGON: 7,\n                    POLYLINE: 8,\n                    HIGHLIGHT: 9,\n                    UNDERLINE: 10,\n                    SQUIGGLY: 11,\n                    STRIKEOUT: 12,\n                    STAMP: 13,\n                    CARET: 14,\n                    INK: 15,\n                    POPUP: 16,\n                    FILEATTACHMENT: 17,\n                    SOUND: 18,\n                    MOVIE: 19,\n                    WIDGET: 20,\n                    SCREEN: 21,\n                    PRINTERMARK: 22,\n                    TRAPNET: 23,\n                    WATERMARK: 24,\n                    THREED: 25,\n                    REDACT: 26\n                };\n                exports1.AnnotationType = AnnotationType1;\n                const AnnotationReplyType1 = {\n                    GROUP: \"Group\",\n                    REPLY: \"R\"\n                };\n                exports1.AnnotationReplyType = AnnotationReplyType1;\n                const AnnotationFlag1 = {\n                    INVISIBLE: 0x01,\n                    HIDDEN: 0x02,\n                    PRINT: 0x04,\n                    NOZOOM: 0x08,\n                    NOROTATE: 0x10,\n                    NOVIEW: 0x20,\n                    READONLY: 0x40,\n                    LOCKED: 0x80,\n                    TOGGLENOVIEW: 0x100,\n                    LOCKEDCONTENTS: 0x200\n                };\n                exports1.AnnotationFlag = AnnotationFlag1;\n                const AnnotationFieldFlag1 = {\n                    READONLY: 0x0000001,\n                    REQUIRED: 0x0000002,\n                    NOEXPORT: 0x0000004,\n                    MULTILINE: 0x0001000,\n                    PASSWORD: 0x0002000,\n                    NOTOGGLETOOFF: 0x0004000,\n                    RADIO: 0x0008000,\n                    PUSHBUTTON: 0x0010000,\n                    COMBO: 0x0020000,\n                    EDIT: 0x0040000,\n                    SORT: 0x0080000,\n                    FILESELECT: 0x0100000,\n                    MULTISELECT: 0x0200000,\n                    DONOTSPELLCHECK: 0x0400000,\n                    DONOTSCROLL: 0x0800000,\n                    COMB: 0x1000000,\n                    RICHTEXT: 0x2000000,\n                    RADIOSINUNISON: 0x2000000,\n                    COMMITONSELCHANGE: 0x4000000\n                };\n                exports1.AnnotationFieldFlag = AnnotationFieldFlag1;\n                const AnnotationBorderStyleType1 = {\n                    SOLID: 1,\n                    DASHED: 2,\n                    BEVELED: 3,\n                    INSET: 4,\n                    UNDERLINE: 5\n                };\n                exports1.AnnotationBorderStyleType = AnnotationBorderStyleType1;\n                const AnnotationActionEventType1 = {\n                    E: \"Mouse Enter\",\n                    X: \"Mouse Exit\",\n                    D: \"Mouse Down\",\n                    U: \"Mouse Up\",\n                    Fo: \"Focus\",\n                    Bl: \"Blur\",\n                    PO: \"PageOpen\",\n                    PC: \"PageClose\",\n                    PV: \"PageVisible\",\n                    PI: \"PageInvisible\",\n                    K: \"Keystroke\",\n                    F: \"Format\",\n                    V: \"Validate\",\n                    C: \"Calculate\"\n                };\n                exports1.AnnotationActionEventType = AnnotationActionEventType1;\n                const DocumentActionEventType1 = {\n                    WC: \"WillClose\",\n                    WS: \"WillSave\",\n                    DS: \"DidSave\",\n                    WP: \"WillPrint\",\n                    DP: \"DidPrint\"\n                };\n                exports1.DocumentActionEventType = DocumentActionEventType1;\n                const PageActionEventType1 = {\n                    O: \"PageOpen\",\n                    C: \"PageClose\"\n                };\n                exports1.PageActionEventType = PageActionEventType1;\n                const VerbosityLevel1 = {\n                    ERRORS: 0,\n                    WARNINGS: 1,\n                    INFOS: 5\n                };\n                exports1.VerbosityLevel = VerbosityLevel1;\n                const CMapCompressionType1 = {\n                    NONE: 0,\n                    BINARY: 1\n                };\n                exports1.CMapCompressionType = CMapCompressionType1;\n                const OPS1 = {\n                    dependency: 1,\n                    setLineWidth: 2,\n                    setLineCap: 3,\n                    setLineJoin: 4,\n                    setMiterLimit: 5,\n                    setDash: 6,\n                    setRenderingIntent: 7,\n                    setFlatness: 8,\n                    setGState: 9,\n                    save: 10,\n                    restore: 11,\n                    transform: 12,\n                    moveTo: 13,\n                    lineTo: 14,\n                    curveTo: 15,\n                    curveTo2: 16,\n                    curveTo3: 17,\n                    closePath: 18,\n                    rectangle: 19,\n                    stroke: 20,\n                    closeStroke: 21,\n                    fill: 22,\n                    eoFill: 23,\n                    fillStroke: 24,\n                    eoFillStroke: 25,\n                    closeFillStroke: 26,\n                    closeEOFillStroke: 27,\n                    endPath: 28,\n                    clip: 29,\n                    eoClip: 30,\n                    beginText: 31,\n                    endText: 32,\n                    setCharSpacing: 33,\n                    setWordSpacing: 34,\n                    setHScale: 35,\n                    setLeading: 36,\n                    setFont: 37,\n                    setTextRenderingMode: 38,\n                    setTextRise: 39,\n                    moveText: 40,\n                    setLeadingMoveText: 41,\n                    setTextMatrix: 42,\n                    nextLine: 43,\n                    showText: 44,\n                    showSpacedText: 45,\n                    nextLineShowText: 46,\n                    nextLineSetSpacingShowText: 47,\n                    setCharWidth: 48,\n                    setCharWidthAndBounds: 49,\n                    setStrokeColorSpace: 50,\n                    setFillColorSpace: 51,\n                    setStrokeColor: 52,\n                    setStrokeColorN: 53,\n                    setFillColor: 54,\n                    setFillColorN: 55,\n                    setStrokeGray: 56,\n                    setFillGray: 57,\n                    setStrokeRGBColor: 58,\n                    setFillRGBColor: 59,\n                    setStrokeCMYKColor: 60,\n                    setFillCMYKColor: 61,\n                    shadingFill: 62,\n                    beginInlineImage: 63,\n                    beginImageData: 64,\n                    endInlineImage: 65,\n                    paintXObject: 66,\n                    markPoint: 67,\n                    markPointProps: 68,\n                    beginMarkedContent: 69,\n                    beginMarkedContentProps: 70,\n                    endMarkedContent: 71,\n                    beginCompat: 72,\n                    endCompat: 73,\n                    paintFormXObjectBegin: 74,\n                    paintFormXObjectEnd: 75,\n                    beginGroup: 76,\n                    endGroup: 77,\n                    beginAnnotation: 80,\n                    endAnnotation: 81,\n                    paintImageMaskXObject: 83,\n                    paintImageMaskXObjectGroup: 84,\n                    paintImageXObject: 85,\n                    paintInlineImageXObject: 86,\n                    paintInlineImageXObjectGroup: 87,\n                    paintImageXObjectRepeat: 88,\n                    paintImageMaskXObjectRepeat: 89,\n                    paintSolidColorImageMask: 90,\n                    constructPath: 91\n                };\n                exports1.OPS = OPS1;\n                const PasswordResponses1 = {\n                    NEED_PASSWORD: 1,\n                    INCORRECT_PASSWORD: 2\n                };\n                exports1.PasswordResponses = PasswordResponses1;\n                let verbosity1 = VerbosityLevel1.WARNINGS;\n                function setVerbosityLevel1(level1) {\n                    if (Number.isInteger(level1)) {\n                        verbosity1 = level1;\n                    }\n                }\n                function getVerbosityLevel1() {\n                    return verbosity1;\n                }\n                function info1(msg1) {\n                    if (verbosity1 >= VerbosityLevel1.INFOS) {\n                        console.log(`Info: ${msg1}`);\n                    }\n                }\n                function warn1(msg1) {\n                    if (verbosity1 >= VerbosityLevel1.WARNINGS) {\n                        console.log(`Warning: ${msg1}`);\n                    }\n                }\n                function unreachable1(msg1) {\n                    throw new Error(msg1);\n                }\n                function assert1(cond1, msg1) {\n                    if (!cond1) {\n                        unreachable1(msg1);\n                    }\n                }\n                function _isValidProtocol1(url1) {\n                    switch(url1?.protocol){\n                        case \"http:\":\n                        case \"https:\":\n                        case \"ftp:\":\n                        case \"mailto:\":\n                        case \"tel:\":\n                            return true;\n                        default:\n                            return false;\n                    }\n                }\n                function createValidAbsoluteUrl1(url1, baseUrl1 = null, options1 = null) {\n                    if (!url1) {\n                        return null;\n                    }\n                    try {\n                        if (options1 && typeof url1 === \"string\") {\n                            if (options1.addDefaultProtocol && url1.startsWith(\"www.\")) {\n                                const dots1 = url1.match(/\\./g);\n                                if (dots1?.length >= 2) {\n                                    url1 = `http://${url1}`;\n                                }\n                            }\n                            if (options1.tryConvertEncoding) {\n                                try {\n                                    url1 = stringToUTF8String1(url1);\n                                } catch  {}\n                            }\n                        }\n                        const absoluteUrl1 = baseUrl1 ? new URL(url1, baseUrl1) : new URL(url1);\n                        if (_isValidProtocol1(absoluteUrl1)) {\n                            return absoluteUrl1;\n                        }\n                    } catch  {}\n                    return null;\n                }\n                function shadow1(obj1, prop1, value1, nonSerializable1 = false) {\n                    Object.defineProperty(obj1, prop1, {\n                        value: value1,\n                        enumerable: !nonSerializable1,\n                        configurable: true,\n                        writable: false\n                    });\n                    return value1;\n                }\n                const BaseException1 = function BaseExceptionClosure1() {\n                    function BaseException1(message1, name1) {\n                        if (this.constructor === BaseException1) {\n                            unreachable1(\"Cannot initialize BaseException.\");\n                        }\n                        this.message = message1;\n                        this.name = name1;\n                    }\n                    BaseException1.prototype = new Error();\n                    BaseException1.constructor = BaseException1;\n                    return BaseException1;\n                }();\n                exports1.BaseException = BaseException1;\n                class PasswordException1 extends BaseException1 {\n                    constructor(msg1, code1){\n                        super(msg1, \"PasswordException\");\n                        this.code = code1;\n                    }\n                }\n                exports1.PasswordException = PasswordException1;\n                class UnknownErrorException1 extends BaseException1 {\n                    constructor(msg1, details1){\n                        super(msg1, \"UnknownErrorException\");\n                        this.details = details1;\n                    }\n                }\n                exports1.UnknownErrorException = UnknownErrorException1;\n                class InvalidPDFException1 extends BaseException1 {\n                    constructor(msg1){\n                        super(msg1, \"InvalidPDFException\");\n                    }\n                }\n                exports1.InvalidPDFException = InvalidPDFException1;\n                class MissingPDFException1 extends BaseException1 {\n                    constructor(msg1){\n                        super(msg1, \"MissingPDFException\");\n                    }\n                }\n                exports1.MissingPDFException = MissingPDFException1;\n                class UnexpectedResponseException1 extends BaseException1 {\n                    constructor(msg1, status1){\n                        super(msg1, \"UnexpectedResponseException\");\n                        this.status = status1;\n                    }\n                }\n                exports1.UnexpectedResponseException = UnexpectedResponseException1;\n                class FormatError1 extends BaseException1 {\n                    constructor(msg1){\n                        super(msg1, \"FormatError\");\n                    }\n                }\n                exports1.FormatError = FormatError1;\n                class AbortException1 extends BaseException1 {\n                    constructor(msg1){\n                        super(msg1, \"AbortException\");\n                    }\n                }\n                exports1.AbortException = AbortException1;\n                function bytesToString1(bytes1) {\n                    if (typeof bytes1 !== \"object\" || bytes1?.length === undefined) {\n                        unreachable1(\"Invalid argument for bytesToString\");\n                    }\n                    const length1 = bytes1.length;\n                    const MAX_ARGUMENT_COUNT1 = 8192;\n                    if (length1 < MAX_ARGUMENT_COUNT1) {\n                        return String.fromCharCode.apply(null, bytes1);\n                    }\n                    const strBuf1 = [];\n                    for(let i1 = 0; i1 < length1; i1 += MAX_ARGUMENT_COUNT1){\n                        const chunkEnd1 = Math.min(i1 + MAX_ARGUMENT_COUNT1, length1);\n                        const chunk3 = bytes1.subarray(i1, chunkEnd1);\n                        strBuf1.push(String.fromCharCode.apply(null, chunk3));\n                    }\n                    return strBuf1.join(\"\");\n                }\n                function stringToBytes1(str1) {\n                    if (typeof str1 !== \"string\") {\n                        unreachable1(\"Invalid argument for stringToBytes\");\n                    }\n                    const length1 = str1.length;\n                    const bytes1 = new Uint8Array(length1);\n                    for(let i1 = 0; i1 < length1; ++i1){\n                        bytes1[i1] = str1.charCodeAt(i1) & 0xff;\n                    }\n                    return bytes1;\n                }\n                function string321(value1) {\n                    return String.fromCharCode(value1 >> 24 & 0xff, value1 >> 16 & 0xff, value1 >> 8 & 0xff, value1 & 0xff);\n                }\n                function objectSize1(obj1) {\n                    return Object.keys(obj1).length;\n                }\n                function objectFromMap1(map1) {\n                    const obj1 = Object.create(null);\n                    for (const [key1, value1] of map1){\n                        obj1[key1] = value1;\n                    }\n                    return obj1;\n                }\n                function isLittleEndian1() {\n                    const buffer81 = new Uint8Array(4);\n                    buffer81[0] = 1;\n                    const view321 = new Uint32Array(buffer81.buffer, 0, 1);\n                    return view321[0] === 1;\n                }\n                function isEvalSupported1() {\n                    try {\n                        new Function(\"\");\n                        return true;\n                    } catch  {\n                        return false;\n                    }\n                }\n                class FeatureTest1 {\n                    static get isLittleEndian() {\n                        return shadow1(this, \"isLittleEndian\", isLittleEndian1());\n                    }\n                    static get isEvalSupported() {\n                        return shadow1(this, \"isEvalSupported\", isEvalSupported1());\n                    }\n                    static get isOffscreenCanvasSupported() {\n                        return shadow1(this, \"isOffscreenCanvasSupported\", typeof OffscreenCanvas !== \"undefined\");\n                    }\n                    static get platform() {\n                        if (typeof navigator === \"undefined\") {\n                            return shadow1(this, \"platform\", {\n                                isWin: false,\n                                isMac: false\n                            });\n                        }\n                        return shadow1(this, \"platform\", {\n                            isWin: navigator.platform.includes(\"Win\"),\n                            isMac: navigator.platform.includes(\"Mac\")\n                        });\n                    }\n                    static get isCSSRoundSupported() {\n                        return shadow1(this, \"isCSSRoundSupported\", globalThis.CSS?.supports?.(\"width: round(1.5px, 1px)\"));\n                    }\n                }\n                exports1.FeatureTest = FeatureTest1;\n                const hexNumbers1 = [\n                    ...Array(256).keys()\n                ].map((n1)=>n1.toString(16).padStart(2, \"0\"));\n                class Util1 {\n                    static makeHexColor(r1, g1, b4) {\n                        return `#${hexNumbers1[r1]}${hexNumbers1[g1]}${hexNumbers1[b4]}`;\n                    }\n                    static scaleMinMax(transform1, minMax1) {\n                        let temp1;\n                        if (transform1[0]) {\n                            if (transform1[0] < 0) {\n                                temp1 = minMax1[0];\n                                minMax1[0] = minMax1[1];\n                                minMax1[1] = temp1;\n                            }\n                            minMax1[0] *= transform1[0];\n                            minMax1[1] *= transform1[0];\n                            if (transform1[3] < 0) {\n                                temp1 = minMax1[2];\n                                minMax1[2] = minMax1[3];\n                                minMax1[3] = temp1;\n                            }\n                            minMax1[2] *= transform1[3];\n                            minMax1[3] *= transform1[3];\n                        } else {\n                            temp1 = minMax1[0];\n                            minMax1[0] = minMax1[2];\n                            minMax1[2] = temp1;\n                            temp1 = minMax1[1];\n                            minMax1[1] = minMax1[3];\n                            minMax1[3] = temp1;\n                            if (transform1[1] < 0) {\n                                temp1 = minMax1[2];\n                                minMax1[2] = minMax1[3];\n                                minMax1[3] = temp1;\n                            }\n                            minMax1[2] *= transform1[1];\n                            minMax1[3] *= transform1[1];\n                            if (transform1[2] < 0) {\n                                temp1 = minMax1[0];\n                                minMax1[0] = minMax1[1];\n                                minMax1[1] = temp1;\n                            }\n                            minMax1[0] *= transform1[2];\n                            minMax1[1] *= transform1[2];\n                        }\n                        minMax1[0] += transform1[4];\n                        minMax1[1] += transform1[4];\n                        minMax1[2] += transform1[5];\n                        minMax1[3] += transform1[5];\n                    }\n                    static transform(m11, m21) {\n                        return [\n                            m11[0] * m21[0] + m11[2] * m21[1],\n                            m11[1] * m21[0] + m11[3] * m21[1],\n                            m11[0] * m21[2] + m11[2] * m21[3],\n                            m11[1] * m21[2] + m11[3] * m21[3],\n                            m11[0] * m21[4] + m11[2] * m21[5] + m11[4],\n                            m11[1] * m21[4] + m11[3] * m21[5] + m11[5]\n                        ];\n                    }\n                    static applyTransform(p5, m3) {\n                        const xt1 = p5[0] * m3[0] + p5[1] * m3[2] + m3[4];\n                        const yt1 = p5[0] * m3[1] + p5[1] * m3[3] + m3[5];\n                        return [\n                            xt1,\n                            yt1\n                        ];\n                    }\n                    static applyInverseTransform(p5, m3) {\n                        const d5 = m3[0] * m3[3] - m3[1] * m3[2];\n                        const xt1 = (p5[0] * m3[3] - p5[1] * m3[2] + m3[2] * m3[5] - m3[4] * m3[3]) / d5;\n                        const yt1 = (-p5[0] * m3[1] + p5[1] * m3[0] + m3[4] * m3[1] - m3[5] * m3[0]) / d5;\n                        return [\n                            xt1,\n                            yt1\n                        ];\n                    }\n                    static getAxialAlignedBoundingBox(r1, m3) {\n                        const p12 = this.applyTransform(r1, m3);\n                        const p22 = this.applyTransform(r1.slice(2, 4), m3);\n                        const p32 = this.applyTransform([\n                            r1[0],\n                            r1[3]\n                        ], m3);\n                        const p42 = this.applyTransform([\n                            r1[2],\n                            r1[1]\n                        ], m3);\n                        return [\n                            Math.min(p12[0], p22[0], p32[0], p42[0]),\n                            Math.min(p12[1], p22[1], p32[1], p42[1]),\n                            Math.max(p12[0], p22[0], p32[0], p42[0]),\n                            Math.max(p12[1], p22[1], p32[1], p42[1])\n                        ];\n                    }\n                    static inverseTransform(m3) {\n                        const d5 = m3[0] * m3[3] - m3[1] * m3[2];\n                        return [\n                            m3[3] / d5,\n                            -m3[1] / d5,\n                            -m3[2] / d5,\n                            m3[0] / d5,\n                            (m3[2] * m3[5] - m3[4] * m3[3]) / d5,\n                            (m3[4] * m3[1] - m3[5] * m3[0]) / d5\n                        ];\n                    }\n                    static singularValueDecompose2dScale(m3) {\n                        const transpose1 = [\n                            m3[0],\n                            m3[2],\n                            m3[1],\n                            m3[3]\n                        ];\n                        const a1 = m3[0] * transpose1[0] + m3[1] * transpose1[2];\n                        const b4 = m3[0] * transpose1[1] + m3[1] * transpose1[3];\n                        const c4 = m3[2] * transpose1[0] + m3[3] * transpose1[2];\n                        const d5 = m3[2] * transpose1[1] + m3[3] * transpose1[3];\n                        const first1 = (a1 + d5) / 2;\n                        const second1 = Math.sqrt((a1 + d5) ** 2 - 4 * (a1 * d5 - c4 * b4)) / 2;\n                        const sx1 = first1 + second1 || 1;\n                        const sy1 = first1 - second1 || 1;\n                        return [\n                            Math.sqrt(sx1),\n                            Math.sqrt(sy1)\n                        ];\n                    }\n                    static normalizeRect(rect3) {\n                        const r1 = rect3.slice(0);\n                        if (rect3[0] > rect3[2]) {\n                            r1[0] = rect3[2];\n                            r1[2] = rect3[0];\n                        }\n                        if (rect3[1] > rect3[3]) {\n                            r1[1] = rect3[3];\n                            r1[3] = rect3[1];\n                        }\n                        return r1;\n                    }\n                    static intersect(rect11, rect21) {\n                        const xLow1 = Math.max(Math.min(rect11[0], rect11[2]), Math.min(rect21[0], rect21[2]));\n                        const xHigh1 = Math.min(Math.max(rect11[0], rect11[2]), Math.max(rect21[0], rect21[2]));\n                        if (xLow1 > xHigh1) {\n                            return null;\n                        }\n                        const yLow1 = Math.max(Math.min(rect11[1], rect11[3]), Math.min(rect21[1], rect21[3]));\n                        const yHigh1 = Math.min(Math.max(rect11[1], rect11[3]), Math.max(rect21[1], rect21[3]));\n                        if (yLow1 > yHigh1) {\n                            return null;\n                        }\n                        return [\n                            xLow1,\n                            yLow1,\n                            xHigh1,\n                            yHigh1\n                        ];\n                    }\n                    static bezierBoundingBox(x01, y01, x11, y11, x21, y21, x31, y31) {\n                        const tvalues1 = [], bounds1 = [\n                            [],\n                            []\n                        ];\n                        let a1, b4, c4, t3, t11, t21, b2ac1, sqrtb2ac1;\n                        for(let i1 = 0; i1 < 2; ++i1){\n                            if (i1 === 0) {\n                                b4 = 6 * x01 - 12 * x11 + 6 * x21;\n                                a1 = -3 * x01 + 9 * x11 - 9 * x21 + 3 * x31;\n                                c4 = 3 * x11 - 3 * x01;\n                            } else {\n                                b4 = 6 * y01 - 12 * y11 + 6 * y21;\n                                a1 = -3 * y01 + 9 * y11 - 9 * y21 + 3 * y31;\n                                c4 = 3 * y11 - 3 * y01;\n                            }\n                            if (Math.abs(a1) < 1e-12) {\n                                if (Math.abs(b4) < 1e-12) {\n                                    continue;\n                                }\n                                t3 = -c4 / b4;\n                                if (0 < t3 && t3 < 1) {\n                                    tvalues1.push(t3);\n                                }\n                                continue;\n                            }\n                            b2ac1 = b4 * b4 - 4 * c4 * a1;\n                            sqrtb2ac1 = Math.sqrt(b2ac1);\n                            if (b2ac1 < 0) {\n                                continue;\n                            }\n                            t11 = (-b4 + sqrtb2ac1) / (2 * a1);\n                            if (0 < t11 && t11 < 1) {\n                                tvalues1.push(t11);\n                            }\n                            t21 = (-b4 - sqrtb2ac1) / (2 * a1);\n                            if (0 < t21 && t21 < 1) {\n                                tvalues1.push(t21);\n                            }\n                        }\n                        let j1 = tvalues1.length, mt1;\n                        const jlen1 = j1;\n                        while(j1--){\n                            t3 = tvalues1[j1];\n                            mt1 = 1 - t3;\n                            bounds1[0][j1] = mt1 * mt1 * mt1 * x01 + 3 * mt1 * mt1 * t3 * x11 + 3 * mt1 * t3 * t3 * x21 + t3 * t3 * t3 * x31;\n                            bounds1[1][j1] = mt1 * mt1 * mt1 * y01 + 3 * mt1 * mt1 * t3 * y11 + 3 * mt1 * t3 * t3 * y21 + t3 * t3 * t3 * y31;\n                        }\n                        bounds1[0][jlen1] = x01;\n                        bounds1[1][jlen1] = y01;\n                        bounds1[0][jlen1 + 1] = x31;\n                        bounds1[1][jlen1 + 1] = y31;\n                        bounds1[0].length = bounds1[1].length = jlen1 + 2;\n                        return [\n                            Math.min(...bounds1[0]),\n                            Math.min(...bounds1[1]),\n                            Math.max(...bounds1[0]),\n                            Math.max(...bounds1[1])\n                        ];\n                    }\n                }\n                exports1.Util = Util1;\n                const PDFStringTranslateTable1 = [\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0x2d8,\n                    0x2c7,\n                    0x2c6,\n                    0x2d9,\n                    0x2dd,\n                    0x2db,\n                    0x2da,\n                    0x2dc,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0,\n                    0x2022,\n                    0x2020,\n                    0x2021,\n                    0x2026,\n                    0x2014,\n                    0x2013,\n                    0x192,\n                    0x2044,\n                    0x2039,\n                    0x203a,\n                    0x2212,\n                    0x2030,\n                    0x201e,\n                    0x201c,\n                    0x201d,\n                    0x2018,\n                    0x2019,\n                    0x201a,\n                    0x2122,\n                    0xfb01,\n                    0xfb02,\n                    0x141,\n                    0x152,\n                    0x160,\n                    0x178,\n                    0x17d,\n                    0x131,\n                    0x142,\n                    0x153,\n                    0x161,\n                    0x17e,\n                    0,\n                    0x20ac\n                ];\n                function stringToPDFString1(str1) {\n                    if (str1[0] >= \"\\xef\") {\n                        let encoding1;\n                        if (str1[0] === \"\\xfe\" && str1[1] === \"\\xff\") {\n                            encoding1 = \"utf-16be\";\n                        } else if (str1[0] === \"\\xff\" && str1[1] === \"\\xfe\") {\n                            encoding1 = \"utf-16le\";\n                        } else if (str1[0] === \"\\xef\" && str1[1] === \"\\xbb\" && str1[2] === \"\\xbf\") {\n                            encoding1 = \"utf-8\";\n                        }\n                        if (encoding1) {\n                            try {\n                                const decoder1 = new TextDecoder(encoding1, {\n                                    fatal: true\n                                });\n                                const buffer1 = stringToBytes1(str1);\n                                return decoder1.decode(buffer1);\n                            } catch (ex1) {\n                                warn1(`stringToPDFString: \"${ex1}\".`);\n                            }\n                        }\n                    }\n                    const strBuf1 = [];\n                    for(let i1 = 0, ii1 = str1.length; i1 < ii1; i1++){\n                        const code1 = PDFStringTranslateTable1[str1.charCodeAt(i1)];\n                        strBuf1.push(code1 ? String.fromCharCode(code1) : str1.charAt(i1));\n                    }\n                    return strBuf1.join(\"\");\n                }\n                function stringToUTF8String1(str1) {\n                    return decodeURIComponent(escape(str1));\n                }\n                function utf8StringToString1(str1) {\n                    return unescape(encodeURIComponent(str1));\n                }\n                function isArrayBuffer1(v1) {\n                    return typeof v1 === \"object\" && v1?.byteLength !== undefined;\n                }\n                function isArrayEqual1(arr11, arr21) {\n                    if (arr11.length !== arr21.length) {\n                        return false;\n                    }\n                    for(let i1 = 0, ii1 = arr11.length; i1 < ii1; i1++){\n                        if (arr11[i1] !== arr21[i1]) {\n                            return false;\n                        }\n                    }\n                    return true;\n                }\n                function getModificationDate1(date1 = new Date()) {\n                    const buffer1 = [\n                        date1.getUTCFullYear().toString(),\n                        (date1.getUTCMonth() + 1).toString().padStart(2, \"0\"),\n                        date1.getUTCDate().toString().padStart(2, \"0\"),\n                        date1.getUTCHours().toString().padStart(2, \"0\"),\n                        date1.getUTCMinutes().toString().padStart(2, \"0\"),\n                        date1.getUTCSeconds().toString().padStart(2, \"0\")\n                    ];\n                    return buffer1.join(\"\");\n                }\n                class PromiseCapability1 {\n                    #settled;\n                    constructor(){\n                        this.#settled = false;\n                        this.promise = new Promise((resolve1, reject1)=>{\n                            this.resolve = (data1)=>{\n                                this.#settled = true;\n                                resolve1(data1);\n                            };\n                            this.reject = (reason1)=>{\n                                this.#settled = true;\n                                reject1(reason1);\n                            };\n                        });\n                    }\n                    get settled() {\n                        return this.#settled;\n                    }\n                }\n                exports1.PromiseCapability = PromiseCapability1;\n                let NormalizeRegex1 = null;\n                let NormalizationMap1 = null;\n                function normalizeUnicode1(str1) {\n                    if (!NormalizeRegex1) {\n                        NormalizeRegex1 = /([\\u00a0\\u00b5\\u037e\\u0eb3\\u2000-\\u200a\\u202f\\u2126\\ufb00-\\ufb04\\ufb06\\ufb20-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40-\\ufb41\\ufb43-\\ufb44\\ufb46-\\ufba1\\ufba4-\\ufba9\\ufbae-\\ufbb1\\ufbd3-\\ufbdc\\ufbde-\\ufbe7\\ufbea-\\ufbf8\\ufbfc-\\ufbfd\\ufc00-\\ufc5d\\ufc64-\\ufcf1\\ufcf5-\\ufd3d\\ufd88\\ufdf4\\ufdfa-\\ufdfb\\ufe71\\ufe77\\ufe79\\ufe7b\\ufe7d]+)|(\\ufb05+)/gu;\n                        NormalizationMap1 = new Map([\n                            [\n                                \"ﬅ\",\n                                \"ſt\"\n                            ]\n                        ]);\n                    }\n                    return str1.replaceAll(NormalizeRegex1, (_1, p12, p22)=>{\n                        return p12 ? p12.normalize(\"NFKC\") : NormalizationMap1.get(p22);\n                    });\n                }\n                function getUuid1() {\n                    if (typeof crypto !== \"undefined\" && typeof crypto?.randomUUID === \"function\") {\n                        return crypto.randomUUID();\n                    }\n                    const buf1 = new Uint8Array(32);\n                    if (typeof crypto !== \"undefined\" && typeof crypto?.getRandomValues === \"function\") {\n                        crypto.getRandomValues(buf1);\n                    } else {\n                        for(let i1 = 0; i1 < 32; i1++){\n                            buf1[i1] = Math.floor(Math.random() * 255);\n                        }\n                    }\n                    return bytesToString1(buf1);\n                }\n                const AnnotationPrefix1 = \"pdfjs_internal_id_\";\n                exports1.AnnotationPrefix = AnnotationPrefix1;\n            /***/ },\n            /* 2 */ /***/ (__unused_webpack_module, exports, __w_pdfjs_require__)=>{\n                Object.defineProperty(exports, \"__esModule\", {\n                    value: true\n                });\n                exports.RenderTask = exports.PDFWorkerUtil = exports.PDFWorker = exports.PDFPageProxy = exports.PDFDocumentProxy = exports.PDFDocumentLoadingTask = exports.PDFDataRangeTransport = exports.LoopbackPort = exports.DefaultStandardFontDataFactory = exports.DefaultFilterFactory = exports.DefaultCanvasFactory = exports.DefaultCMapReaderFactory = void 0;\n                Object.defineProperty(exports, \"SVGGraphics\", {\n                    enumerable: true,\n                    get: function() {\n                        return _displaySvg.SVGGraphics;\n                    }\n                });\n                exports.build = void 0;\n                exports.getDocument = getDocument;\n                exports.version = void 0;\n                var _util = __w_pdfjs_require__(1);\n                var _annotation_storage = __w_pdfjs_require__(3);\n                var _display_utils = __w_pdfjs_require__(6);\n                var _font_loader = __w_pdfjs_require__(9);\n                var _displayNode_utils = __w_pdfjs_require__(10);\n                var _canvas = __w_pdfjs_require__(11);\n                var _worker_options = __w_pdfjs_require__(14);\n                var _message_handler = __w_pdfjs_require__(15);\n                var _metadata = __w_pdfjs_require__(16);\n                var _optional_content_config = __w_pdfjs_require__(17);\n                var _transport_stream = __w_pdfjs_require__(18);\n                var _displayFetch_stream = __w_pdfjs_require__(19);\n                var _displayNetwork = __w_pdfjs_require__(22);\n                var _displayNode_stream = __w_pdfjs_require__(23);\n                var _displaySvg = __w_pdfjs_require__(24);\n                var _xfa_text = __w_pdfjs_require__(25);\n                const DEFAULT_RANGE_CHUNK_SIZE = 65536;\n                const RENDERING_CANCELLED_TIMEOUT = 100;\n                const DELAYED_CLEANUP_TIMEOUT = 5000;\n                const DefaultCanvasFactory = _util.isNodeJS ? _displayNode_utils.NodeCanvasFactory : _display_utils.DOMCanvasFactory;\n                exports.DefaultCanvasFactory = DefaultCanvasFactory;\n                const DefaultCMapReaderFactory = _util.isNodeJS ? _displayNode_utils.NodeCMapReaderFactory : _display_utils.DOMCMapReaderFactory;\n                exports.DefaultCMapReaderFactory = DefaultCMapReaderFactory;\n                const DefaultFilterFactory = _util.isNodeJS ? _displayNode_utils.NodeFilterFactory : _display_utils.DOMFilterFactory;\n                exports.DefaultFilterFactory = DefaultFilterFactory;\n                const DefaultStandardFontDataFactory = _util.isNodeJS ? _displayNode_utils.NodeStandardFontDataFactory : _display_utils.DOMStandardFontDataFactory;\n                exports.DefaultStandardFontDataFactory = DefaultStandardFontDataFactory;\n                function getDocument(src1) {\n                    if (typeof src1 === \"string\" || src1 instanceof URL) {\n                        src1 = {\n                            url: src1\n                        };\n                    } else if ((0, _util.isArrayBuffer)(src1)) {\n                        src1 = {\n                            data: src1\n                        };\n                    }\n                    if (typeof src1 !== \"object\") {\n                        throw new Error(\"Invalid parameter in getDocument, need parameter object.\");\n                    }\n                    if (!src1.url && !src1.data && !src1.range) {\n                        throw new Error(\"Invalid parameter object: need either .data, .range or .url\");\n                    }\n                    const task1 = new PDFDocumentLoadingTask();\n                    const { docId: docId1 } = task1;\n                    const url1 = src1.url ? getUrlProp(src1.url) : null;\n                    const data1 = src1.data ? getDataProp(src1.data) : null;\n                    const httpHeaders1 = src1.httpHeaders || null;\n                    const withCredentials1 = src1.withCredentials === true;\n                    const password1 = src1.password ?? null;\n                    const rangeTransport1 = src1.range instanceof PDFDataRangeTransport ? src1.range : null;\n                    const rangeChunkSize1 = Number.isInteger(src1.rangeChunkSize) && src1.rangeChunkSize > 0 ? src1.rangeChunkSize : DEFAULT_RANGE_CHUNK_SIZE;\n                    let worker1 = src1.worker instanceof PDFWorker ? src1.worker : null;\n                    const verbosity1 = src1.verbosity;\n                    const docBaseUrl1 = typeof src1.docBaseUrl === \"string\" && !(0, _display_utils.isDataScheme)(src1.docBaseUrl) ? src1.docBaseUrl : null;\n                    const cMapUrl1 = typeof src1.cMapUrl === \"string\" ? src1.cMapUrl : null;\n                    const cMapPacked1 = src1.cMapPacked !== false;\n                    const CMapReaderFactory1 = src1.CMapReaderFactory || DefaultCMapReaderFactory;\n                    const standardFontDataUrl1 = typeof src1.standardFontDataUrl === \"string\" ? src1.standardFontDataUrl : null;\n                    const StandardFontDataFactory1 = src1.StandardFontDataFactory || DefaultStandardFontDataFactory;\n                    const ignoreErrors1 = src1.stopAtErrors !== true;\n                    const maxImageSize1 = Number.isInteger(src1.maxImageSize) && src1.maxImageSize > -1 ? src1.maxImageSize : -1;\n                    const isEvalSupported1 = src1.isEvalSupported !== false;\n                    const isOffscreenCanvasSupported1 = typeof src1.isOffscreenCanvasSupported === \"boolean\" ? src1.isOffscreenCanvasSupported : !_util.isNodeJS;\n                    const canvasMaxAreaInBytes1 = Number.isInteger(src1.canvasMaxAreaInBytes) ? src1.canvasMaxAreaInBytes : -1;\n                    const disableFontFace1 = typeof src1.disableFontFace === \"boolean\" ? src1.disableFontFace : _util.isNodeJS;\n                    const fontExtraProperties1 = src1.fontExtraProperties === true;\n                    const enableXfa1 = src1.enableXfa === true;\n                    const ownerDocument1 = src1.ownerDocument || globalThis.document;\n                    const disableRange1 = src1.disableRange === true;\n                    const disableStream1 = src1.disableStream === true;\n                    const disableAutoFetch1 = src1.disableAutoFetch === true;\n                    const pdfBug1 = src1.pdfBug === true;\n                    const length1 = rangeTransport1 ? rangeTransport1.length : src1.length ?? NaN;\n                    const useSystemFonts1 = typeof src1.useSystemFonts === \"boolean\" ? src1.useSystemFonts : !_util.isNodeJS && !disableFontFace1;\n                    const useWorkerFetch1 = typeof src1.useWorkerFetch === \"boolean\" ? src1.useWorkerFetch : CMapReaderFactory1 === _display_utils.DOMCMapReaderFactory && StandardFontDataFactory1 === _display_utils.DOMStandardFontDataFactory && cMapUrl1 && standardFontDataUrl1 && (0, _display_utils.isValidFetchUrl)(cMapUrl1, document.baseURI) && (0, _display_utils.isValidFetchUrl)(standardFontDataUrl1, document.baseURI);\n                    const canvasFactory1 = src1.canvasFactory || new DefaultCanvasFactory({\n                        ownerDocument: ownerDocument1\n                    });\n                    const filterFactory1 = src1.filterFactory || new DefaultFilterFactory({\n                        docId: docId1,\n                        ownerDocument: ownerDocument1\n                    });\n                    const styleElement1 = null;\n                    (0, _util.setVerbosityLevel)(verbosity1);\n                    const transportFactory1 = {\n                        canvasFactory: canvasFactory1,\n                        filterFactory: filterFactory1\n                    };\n                    if (!useWorkerFetch1) {\n                        transportFactory1.cMapReaderFactory = new CMapReaderFactory1({\n                            baseUrl: cMapUrl1,\n                            isCompressed: cMapPacked1\n                        });\n                        transportFactory1.standardFontDataFactory = new StandardFontDataFactory1({\n                            baseUrl: standardFontDataUrl1\n                        });\n                    }\n                    if (!worker1) {\n                        const workerParams1 = {\n                            verbosity: verbosity1,\n                            port: _worker_options.GlobalWorkerOptions.workerPort\n                        };\n                        worker1 = workerParams1.port ? PDFWorker.fromPort(workerParams1) : new PDFWorker(workerParams1);\n                        task1._worker = worker1;\n                    }\n                    const fetchDocParams1 = {\n                        docId: docId1,\n                        apiVersion: \"3.11.174\",\n                        data: data1,\n                        password: password1,\n                        disableAutoFetch: disableAutoFetch1,\n                        rangeChunkSize: rangeChunkSize1,\n                        length: length1,\n                        docBaseUrl: docBaseUrl1,\n                        enableXfa: enableXfa1,\n                        evaluatorOptions: {\n                            maxImageSize: maxImageSize1,\n                            disableFontFace: disableFontFace1,\n                            ignoreErrors: ignoreErrors1,\n                            isEvalSupported: isEvalSupported1,\n                            isOffscreenCanvasSupported: isOffscreenCanvasSupported1,\n                            canvasMaxAreaInBytes: canvasMaxAreaInBytes1,\n                            fontExtraProperties: fontExtraProperties1,\n                            useSystemFonts: useSystemFonts1,\n                            cMapUrl: useWorkerFetch1 ? cMapUrl1 : null,\n                            standardFontDataUrl: useWorkerFetch1 ? standardFontDataUrl1 : null\n                        }\n                    };\n                    const transportParams1 = {\n                        ignoreErrors: ignoreErrors1,\n                        isEvalSupported: isEvalSupported1,\n                        disableFontFace: disableFontFace1,\n                        fontExtraProperties: fontExtraProperties1,\n                        enableXfa: enableXfa1,\n                        ownerDocument: ownerDocument1,\n                        disableAutoFetch: disableAutoFetch1,\n                        pdfBug: pdfBug1,\n                        styleElement: styleElement1\n                    };\n                    worker1.promise.then(function() {\n                        if (task1.destroyed) {\n                            throw new Error(\"Loading aborted\");\n                        }\n                        const workerIdPromise1 = _fetchDocument(worker1, fetchDocParams1);\n                        const networkStreamPromise1 = new Promise(function(resolve1) {\n                            let networkStream1;\n                            if (rangeTransport1) {\n                                networkStream1 = new _transport_stream.PDFDataTransportStream({\n                                    length: length1,\n                                    initialData: rangeTransport1.initialData,\n                                    progressiveDone: rangeTransport1.progressiveDone,\n                                    contentDispositionFilename: rangeTransport1.contentDispositionFilename,\n                                    disableRange: disableRange1,\n                                    disableStream: disableStream1\n                                }, rangeTransport1);\n                            } else if (!data1) {\n                                const createPDFNetworkStream1 = (params1)=>{\n                                    if (_util.isNodeJS) {\n                                        return new _displayNode_stream.PDFNodeStream(params1);\n                                    }\n                                    return (0, _display_utils.isValidFetchUrl)(params1.url) ? new _displayFetch_stream.PDFFetchStream(params1) : new _displayNetwork.PDFNetworkStream(params1);\n                                };\n                                networkStream1 = createPDFNetworkStream1({\n                                    url: url1,\n                                    length: length1,\n                                    httpHeaders: httpHeaders1,\n                                    withCredentials: withCredentials1,\n                                    rangeChunkSize: rangeChunkSize1,\n                                    disableRange: disableRange1,\n                                    disableStream: disableStream1\n                                });\n                            }\n                            resolve1(networkStream1);\n                        });\n                        return Promise.all([\n                            workerIdPromise1,\n                            networkStreamPromise1\n                        ]).then(function([workerId1, networkStream1]) {\n                            if (task1.destroyed) {\n                                throw new Error(\"Loading aborted\");\n                            }\n                            const messageHandler1 = new _message_handler.MessageHandler(docId1, workerId1, worker1.port);\n                            const transport1 = new WorkerTransport(messageHandler1, task1, networkStream1, transportParams1, transportFactory1);\n                            task1._transport = transport1;\n                            messageHandler1.send(\"Ready\", null);\n                        });\n                    }).catch(task1._capability.reject);\n                    return task1;\n                }\n                async function _fetchDocument(worker1, source1) {\n                    if (worker1.destroyed) {\n                        throw new Error(\"Worker was destroyed\");\n                    }\n                    const workerId1 = await worker1.messageHandler.sendWithPromise(\"GetDocRequest\", source1, source1.data ? [\n                        source1.data.buffer\n                    ] : null);\n                    if (worker1.destroyed) {\n                        throw new Error(\"Worker was destroyed\");\n                    }\n                    return workerId1;\n                }\n                function getUrlProp(val1) {\n                    if (val1 instanceof URL) {\n                        return val1.href;\n                    }\n                    try {\n                        return new URL(val1, window.location).href;\n                    } catch  {\n                        if (_util.isNodeJS && typeof val1 === \"string\") {\n                            return val1;\n                        }\n                    }\n                    throw new Error(\"Invalid PDF url data: \" + \"either string or URL-object is expected in the url property.\");\n                }\n                function getDataProp(val1) {\n                    if (_util.isNodeJS && typeof Buffer !== \"undefined\" && val1 instanceof Buffer) {\n                        throw new Error(\"Please provide binary data as `Uint8Array`, rather than `Buffer`.\");\n                    }\n                    if (val1 instanceof Uint8Array && val1.byteLength === val1.buffer.byteLength) {\n                        return val1;\n                    }\n                    if (typeof val1 === \"string\") {\n                        return (0, _util.stringToBytes)(val1);\n                    }\n                    if (typeof val1 === \"object\" && !isNaN(val1?.length) || (0, _util.isArrayBuffer)(val1)) {\n                        return new Uint8Array(val1);\n                    }\n                    throw new Error(\"Invalid PDF binary data: either TypedArray, \" + \"string, or array-like object is expected in the data property.\");\n                }\n                class PDFDocumentLoadingTask {\n                    static #docId = 0;\n                    constructor(){\n                        this._capability = new _util.PromiseCapability();\n                        this._transport = null;\n                        this._worker = null;\n                        this.docId = `d${PDFDocumentLoadingTask.#docId++}`;\n                        this.destroyed = false;\n                        this.onPassword = null;\n                        this.onProgress = null;\n                    }\n                    get promise() {\n                        return this._capability.promise;\n                    }\n                    async destroy() {\n                        this.destroyed = true;\n                        try {\n                            if (this._worker?.port) {\n                                this._worker._pendingDestroy = true;\n                            }\n                            await this._transport?.destroy();\n                        } catch (ex1) {\n                            if (this._worker?.port) {\n                                delete this._worker._pendingDestroy;\n                            }\n                            throw ex1;\n                        }\n                        this._transport = null;\n                        if (this._worker) {\n                            this._worker.destroy();\n                            this._worker = null;\n                        }\n                    }\n                }\n                exports.PDFDocumentLoadingTask = PDFDocumentLoadingTask;\n                class PDFDataRangeTransport {\n                    constructor(length1, initialData1, progressiveDone1 = false, contentDispositionFilename1 = null){\n                        this.length = length1;\n                        this.initialData = initialData1;\n                        this.progressiveDone = progressiveDone1;\n                        this.contentDispositionFilename = contentDispositionFilename1;\n                        this._rangeListeners = [];\n                        this._progressListeners = [];\n                        this._progressiveReadListeners = [];\n                        this._progressiveDoneListeners = [];\n                        this._readyCapability = new _util.PromiseCapability();\n                    }\n                    addRangeListener(listener1) {\n                        this._rangeListeners.push(listener1);\n                    }\n                    addProgressListener(listener1) {\n                        this._progressListeners.push(listener1);\n                    }\n                    addProgressiveReadListener(listener1) {\n                        this._progressiveReadListeners.push(listener1);\n                    }\n                    addProgressiveDoneListener(listener1) {\n                        this._progressiveDoneListeners.push(listener1);\n                    }\n                    onDataRange(begin1, chunk3) {\n                        for (const listener1 of this._rangeListeners){\n                            listener1(begin1, chunk3);\n                        }\n                    }\n                    onDataProgress(loaded1, total1) {\n                        this._readyCapability.promise.then(()=>{\n                            for (const listener1 of this._progressListeners){\n                                listener1(loaded1, total1);\n                            }\n                        });\n                    }\n                    onDataProgressiveRead(chunk3) {\n                        this._readyCapability.promise.then(()=>{\n                            for (const listener1 of this._progressiveReadListeners){\n                                listener1(chunk3);\n                            }\n                        });\n                    }\n                    onDataProgressiveDone() {\n                        this._readyCapability.promise.then(()=>{\n                            for (const listener1 of this._progressiveDoneListeners){\n                                listener1();\n                            }\n                        });\n                    }\n                    transportReady() {\n                        this._readyCapability.resolve();\n                    }\n                    requestDataRange(begin1, end1) {\n                        (0, _util.unreachable)(\"Abstract method PDFDataRangeTransport.requestDataRange\");\n                    }\n                    abort() {}\n                }\n                exports.PDFDataRangeTransport = PDFDataRangeTransport;\n                class PDFDocumentProxy {\n                    constructor(pdfInfo1, transport1){\n                        this._pdfInfo = pdfInfo1;\n                        this._transport = transport1;\n                        Object.defineProperty(this, \"getJavaScript\", {\n                            value: ()=>{\n                                (0, _display_utils.deprecated)(\"`PDFDocumentProxy.getJavaScript`, \" + \"please use `PDFDocumentProxy.getJSActions` instead.\");\n                                return this.getJSActions().then((js1)=>{\n                                    if (!js1) {\n                                        return js1;\n                                    }\n                                    const jsArr1 = [];\n                                    for(const name1 in js1){\n                                        jsArr1.push(...js1[name1]);\n                                    }\n                                    return jsArr1;\n                                });\n                            }\n                        });\n                    }\n                    get annotationStorage() {\n                        return this._transport.annotationStorage;\n                    }\n                    get filterFactory() {\n                        return this._transport.filterFactory;\n                    }\n                    get numPages() {\n                        return this._pdfInfo.numPages;\n                    }\n                    get fingerprints() {\n                        return this._pdfInfo.fingerprints;\n                    }\n                    get isPureXfa() {\n                        return (0, _util.shadow)(this, \"isPureXfa\", !!this._transport._htmlForXfa);\n                    }\n                    get allXfaHtml() {\n                        return this._transport._htmlForXfa;\n                    }\n                    getPage(pageNumber1) {\n                        return this._transport.getPage(pageNumber1);\n                    }\n                    getPageIndex(ref1) {\n                        return this._transport.getPageIndex(ref1);\n                    }\n                    getDestinations() {\n                        return this._transport.getDestinations();\n                    }\n                    getDestination(id1) {\n                        return this._transport.getDestination(id1);\n                    }\n                    getPageLabels() {\n                        return this._transport.getPageLabels();\n                    }\n                    getPageLayout() {\n                        return this._transport.getPageLayout();\n                    }\n                    getPageMode() {\n                        return this._transport.getPageMode();\n                    }\n                    getViewerPreferences() {\n                        return this._transport.getViewerPreferences();\n                    }\n                    getOpenAction() {\n                        return this._transport.getOpenAction();\n                    }\n                    getAttachments() {\n                        return this._transport.getAttachments();\n                    }\n                    getJSActions() {\n                        return this._transport.getDocJSActions();\n                    }\n                    getOutline() {\n                        return this._transport.getOutline();\n                    }\n                    getOptionalContentConfig() {\n                        return this._transport.getOptionalContentConfig();\n                    }\n                    getPermissions() {\n                        return this._transport.getPermissions();\n                    }\n                    getMetadata() {\n                        return this._transport.getMetadata();\n                    }\n                    getMarkInfo() {\n                        return this._transport.getMarkInfo();\n                    }\n                    getData() {\n                        return this._transport.getData();\n                    }\n                    saveDocument() {\n                        return this._transport.saveDocument();\n                    }\n                    getDownloadInfo() {\n                        return this._transport.downloadInfoCapability.promise;\n                    }\n                    cleanup(keepLoadedFonts1 = false) {\n                        return this._transport.startCleanup(keepLoadedFonts1 || this.isPureXfa);\n                    }\n                    destroy() {\n                        return this.loadingTask.destroy();\n                    }\n                    get loadingParams() {\n                        return this._transport.loadingParams;\n                    }\n                    get loadingTask() {\n                        return this._transport.loadingTask;\n                    }\n                    getFieldObjects() {\n                        return this._transport.getFieldObjects();\n                    }\n                    hasJSActions() {\n                        return this._transport.hasJSActions();\n                    }\n                    getCalculationOrderIds() {\n                        return this._transport.getCalculationOrderIds();\n                    }\n                }\n                exports.PDFDocumentProxy = PDFDocumentProxy;\n                class PDFPageProxy {\n                    #delayedCleanupTimeout;\n                    #pendingCleanup;\n                    constructor(pageIndex1, pageInfo1, transport1, pdfBug1 = false){\n                        this.#delayedCleanupTimeout = null;\n                        this.#pendingCleanup = false;\n                        this._pageIndex = pageIndex1;\n                        this._pageInfo = pageInfo1;\n                        this._transport = transport1;\n                        this._stats = pdfBug1 ? new _display_utils.StatTimer() : null;\n                        this._pdfBug = pdfBug1;\n                        this.commonObjs = transport1.commonObjs;\n                        this.objs = new PDFObjects();\n                        this._maybeCleanupAfterRender = false;\n                        this._intentStates = new Map();\n                        this.destroyed = false;\n                    }\n                    get pageNumber() {\n                        return this._pageIndex + 1;\n                    }\n                    get rotate() {\n                        return this._pageInfo.rotate;\n                    }\n                    get ref() {\n                        return this._pageInfo.ref;\n                    }\n                    get userUnit() {\n                        return this._pageInfo.userUnit;\n                    }\n                    get view() {\n                        return this._pageInfo.view;\n                    }\n                    getViewport({ scale: scale1, rotation: rotation1 = this.rotate, offsetX: offsetX1 = 0, offsetY: offsetY1 = 0, dontFlip: dontFlip1 = false } = {}) {\n                        return new _display_utils.PageViewport({\n                            viewBox: this.view,\n                            scale: scale1,\n                            rotation: rotation1,\n                            offsetX: offsetX1,\n                            offsetY: offsetY1,\n                            dontFlip: dontFlip1\n                        });\n                    }\n                    getAnnotations({ intent: intent1 = \"display\" } = {}) {\n                        const intentArgs1 = this._transport.getRenderingIntent(intent1);\n                        return this._transport.getAnnotations(this._pageIndex, intentArgs1.renderingIntent);\n                    }\n                    getJSActions() {\n                        return this._transport.getPageJSActions(this._pageIndex);\n                    }\n                    get filterFactory() {\n                        return this._transport.filterFactory;\n                    }\n                    get isPureXfa() {\n                        return (0, _util.shadow)(this, \"isPureXfa\", !!this._transport._htmlForXfa);\n                    }\n                    async getXfa() {\n                        return this._transport._htmlForXfa?.children[this._pageIndex] || null;\n                    }\n                    render({ canvasContext: canvasContext1, viewport: viewport1, intent: intent1 = \"display\", annotationMode: annotationMode1 = _util.AnnotationMode.ENABLE, transform: transform1 = null, background: background1 = null, optionalContentConfigPromise: optionalContentConfigPromise1 = null, annotationCanvasMap: annotationCanvasMap1 = null, pageColors: pageColors1 = null, printAnnotationStorage: printAnnotationStorage1 = null }) {\n                        this._stats?.time(\"Overall\");\n                        const intentArgs1 = this._transport.getRenderingIntent(intent1, annotationMode1, printAnnotationStorage1);\n                        this.#pendingCleanup = false;\n                        this.#abortDelayedCleanup();\n                        if (!optionalContentConfigPromise1) {\n                            optionalContentConfigPromise1 = this._transport.getOptionalContentConfig();\n                        }\n                        let intentState1 = this._intentStates.get(intentArgs1.cacheKey);\n                        if (!intentState1) {\n                            intentState1 = Object.create(null);\n                            this._intentStates.set(intentArgs1.cacheKey, intentState1);\n                        }\n                        if (intentState1.streamReaderCancelTimeout) {\n                            clearTimeout(intentState1.streamReaderCancelTimeout);\n                            intentState1.streamReaderCancelTimeout = null;\n                        }\n                        const intentPrint1 = !!(intentArgs1.renderingIntent & _util.RenderingIntentFlag.PRINT);\n                        if (!intentState1.displayReadyCapability) {\n                            intentState1.displayReadyCapability = new _util.PromiseCapability();\n                            intentState1.operatorList = {\n                                fnArray: [],\n                                argsArray: [],\n                                lastChunk: false,\n                                separateAnnots: null\n                            };\n                            this._stats?.time(\"Page Request\");\n                            this._pumpOperatorList(intentArgs1);\n                        }\n                        const complete1 = (error1)=>{\n                            intentState1.renderTasks.delete(internalRenderTask1);\n                            if (this._maybeCleanupAfterRender || intentPrint1) {\n                                this.#pendingCleanup = true;\n                            }\n                            this.#tryCleanup(!intentPrint1);\n                            if (error1) {\n                                internalRenderTask1.capability.reject(error1);\n                                this._abortOperatorList({\n                                    intentState: intentState1,\n                                    reason: error1 instanceof Error ? error1 : new Error(error1)\n                                });\n                            } else {\n                                internalRenderTask1.capability.resolve();\n                            }\n                            this._stats?.timeEnd(\"Rendering\");\n                            this._stats?.timeEnd(\"Overall\");\n                        };\n                        const internalRenderTask1 = new InternalRenderTask({\n                            callback: complete1,\n                            params: {\n                                canvasContext: canvasContext1,\n                                viewport: viewport1,\n                                transform: transform1,\n                                background: background1\n                            },\n                            objs: this.objs,\n                            commonObjs: this.commonObjs,\n                            annotationCanvasMap: annotationCanvasMap1,\n                            operatorList: intentState1.operatorList,\n                            pageIndex: this._pageIndex,\n                            canvasFactory: this._transport.canvasFactory,\n                            filterFactory: this._transport.filterFactory,\n                            useRequestAnimationFrame: !intentPrint1,\n                            pdfBug: this._pdfBug,\n                            pageColors: pageColors1\n                        });\n                        (intentState1.renderTasks ||= new Set()).add(internalRenderTask1);\n                        const renderTask1 = internalRenderTask1.task;\n                        Promise.all([\n                            intentState1.displayReadyCapability.promise,\n                            optionalContentConfigPromise1\n                        ]).then(([transparency1, optionalContentConfig1])=>{\n                            if (this.destroyed) {\n                                complete1();\n                                return;\n                            }\n                            this._stats?.time(\"Rendering\");\n                            internalRenderTask1.initializeGraphics({\n                                transparency: transparency1,\n                                optionalContentConfig: optionalContentConfig1\n                            });\n                            internalRenderTask1.operatorListChanged();\n                        }).catch(complete1);\n                        return renderTask1;\n                    }\n                    getOperatorList({ intent: intent1 = \"display\", annotationMode: annotationMode1 = _util.AnnotationMode.ENABLE, printAnnotationStorage: printAnnotationStorage1 = null } = {}) {\n                        function operatorListChanged1() {\n                            if (intentState1.operatorList.lastChunk) {\n                                intentState1.opListReadCapability.resolve(intentState1.operatorList);\n                                intentState1.renderTasks.delete(opListTask1);\n                            }\n                        }\n                        const intentArgs1 = this._transport.getRenderingIntent(intent1, annotationMode1, printAnnotationStorage1, true);\n                        let intentState1 = this._intentStates.get(intentArgs1.cacheKey);\n                        if (!intentState1) {\n                            intentState1 = Object.create(null);\n                            this._intentStates.set(intentArgs1.cacheKey, intentState1);\n                        }\n                        let opListTask1;\n                        if (!intentState1.opListReadCapability) {\n                            opListTask1 = Object.create(null);\n                            opListTask1.operatorListChanged = operatorListChanged1;\n                            intentState1.opListReadCapability = new _util.PromiseCapability();\n                            (intentState1.renderTasks ||= new Set()).add(opListTask1);\n                            intentState1.operatorList = {\n                                fnArray: [],\n                                argsArray: [],\n                                lastChunk: false,\n                                separateAnnots: null\n                            };\n                            this._stats?.time(\"Page Request\");\n                            this._pumpOperatorList(intentArgs1);\n                        }\n                        return intentState1.opListReadCapability.promise;\n                    }\n                    streamTextContent({ includeMarkedContent: includeMarkedContent1 = false, disableNormalization: disableNormalization1 = false } = {}) {\n                        const TEXT_CONTENT_CHUNK_SIZE1 = 100;\n                        return this._transport.messageHandler.sendWithStream(\"GetTextContent\", {\n                            pageIndex: this._pageIndex,\n                            includeMarkedContent: includeMarkedContent1 === true,\n                            disableNormalization: disableNormalization1 === true\n                        }, {\n                            highWaterMark: TEXT_CONTENT_CHUNK_SIZE1,\n                            size (textContent1) {\n                                return textContent1.items.length;\n                            }\n                        });\n                    }\n                    getTextContent(params1 = {}) {\n                        if (this._transport._htmlForXfa) {\n                            return this.getXfa().then((xfa1)=>{\n                                return _xfa_text.XfaText.textContent(xfa1);\n                            });\n                        }\n                        const readableStream1 = this.streamTextContent(params1);\n                        return new Promise(function(resolve1, reject1) {\n                            function pump1() {\n                                reader1.read().then(function({ value: value1, done: done1 }) {\n                                    if (done1) {\n                                        resolve1(textContent1);\n                                        return;\n                                    }\n                                    Object.assign(textContent1.styles, value1.styles);\n                                    textContent1.items.push(...value1.items);\n                                    pump1();\n                                }, reject1);\n                            }\n                            const reader1 = readableStream1.getReader();\n                            const textContent1 = {\n                                items: [],\n                                styles: Object.create(null)\n                            };\n                            pump1();\n                        });\n                    }\n                    getStructTree() {\n                        return this._transport.getStructTree(this._pageIndex);\n                    }\n                    _destroy() {\n                        this.destroyed = true;\n                        const waitOn1 = [];\n                        for (const intentState1 of this._intentStates.values()){\n                            this._abortOperatorList({\n                                intentState: intentState1,\n                                reason: new Error(\"Page was destroyed.\"),\n                                force: true\n                            });\n                            if (intentState1.opListReadCapability) {\n                                continue;\n                            }\n                            for (const internalRenderTask1 of intentState1.renderTasks){\n                                waitOn1.push(internalRenderTask1.completed);\n                                internalRenderTask1.cancel();\n                            }\n                        }\n                        this.objs.clear();\n                        this.#pendingCleanup = false;\n                        this.#abortDelayedCleanup();\n                        return Promise.all(waitOn1);\n                    }\n                    cleanup(resetStats1 = false) {\n                        this.#pendingCleanup = true;\n                        const success1 = this.#tryCleanup(false);\n                        if (resetStats1 && success1) {\n                            this._stats &&= new _display_utils.StatTimer();\n                        }\n                        return success1;\n                    }\n                    #tryCleanup(delayed1 = false) {\n                        this.#abortDelayedCleanup();\n                        if (!this.#pendingCleanup || this.destroyed) {\n                            return false;\n                        }\n                        if (delayed1) {\n                            this.#delayedCleanupTimeout = setTimeout(()=>{\n                                this.#delayedCleanupTimeout = null;\n                                this.#tryCleanup(false);\n                            }, DELAYED_CLEANUP_TIMEOUT);\n                            return false;\n                        }\n                        for (const { renderTasks: renderTasks1, operatorList: operatorList1 } of this._intentStates.values()){\n                            if (renderTasks1.size > 0 || !operatorList1.lastChunk) {\n                                return false;\n                            }\n                        }\n                        this._intentStates.clear();\n                        this.objs.clear();\n                        this.#pendingCleanup = false;\n                        return true;\n                    }\n                    #abortDelayedCleanup() {\n                        if (this.#delayedCleanupTimeout) {\n                            clearTimeout(this.#delayedCleanupTimeout);\n                            this.#delayedCleanupTimeout = null;\n                        }\n                    }\n                    _startRenderPage(transparency1, cacheKey1) {\n                        const intentState1 = this._intentStates.get(cacheKey1);\n                        if (!intentState1) {\n                            return;\n                        }\n                        this._stats?.timeEnd(\"Page Request\");\n                        intentState1.displayReadyCapability?.resolve(transparency1);\n                    }\n                    _renderPageChunk(operatorListChunk1, intentState1) {\n                        for(let i1 = 0, ii1 = operatorListChunk1.length; i1 < ii1; i1++){\n                            intentState1.operatorList.fnArray.push(operatorListChunk1.fnArray[i1]);\n                            intentState1.operatorList.argsArray.push(operatorListChunk1.argsArray[i1]);\n                        }\n                        intentState1.operatorList.lastChunk = operatorListChunk1.lastChunk;\n                        intentState1.operatorList.separateAnnots = operatorListChunk1.separateAnnots;\n                        for (const internalRenderTask1 of intentState1.renderTasks){\n                            internalRenderTask1.operatorListChanged();\n                        }\n                        if (operatorListChunk1.lastChunk) {\n                            this.#tryCleanup(true);\n                        }\n                    }\n                    _pumpOperatorList({ renderingIntent: renderingIntent1, cacheKey: cacheKey1, annotationStorageSerializable: annotationStorageSerializable1 }) {\n                        const { map: map1, transfers: transfers1 } = annotationStorageSerializable1;\n                        const readableStream1 = this._transport.messageHandler.sendWithStream(\"GetOperatorList\", {\n                            pageIndex: this._pageIndex,\n                            intent: renderingIntent1,\n                            cacheKey: cacheKey1,\n                            annotationStorage: map1\n                        }, transfers1);\n                        const reader1 = readableStream1.getReader();\n                        const intentState1 = this._intentStates.get(cacheKey1);\n                        intentState1.streamReader = reader1;\n                        const pump1 = ()=>{\n                            reader1.read().then(({ value: value1, done: done1 })=>{\n                                if (done1) {\n                                    intentState1.streamReader = null;\n                                    return;\n                                }\n                                if (this._transport.destroyed) {\n                                    return;\n                                }\n                                this._renderPageChunk(value1, intentState1);\n                                pump1();\n                            }, (reason1)=>{\n                                intentState1.streamReader = null;\n                                if (this._transport.destroyed) {\n                                    return;\n                                }\n                                if (intentState1.operatorList) {\n                                    intentState1.operatorList.lastChunk = true;\n                                    for (const internalRenderTask1 of intentState1.renderTasks){\n                                        internalRenderTask1.operatorListChanged();\n                                    }\n                                    this.#tryCleanup(true);\n                                }\n                                if (intentState1.displayReadyCapability) {\n                                    intentState1.displayReadyCapability.reject(reason1);\n                                } else if (intentState1.opListReadCapability) {\n                                    intentState1.opListReadCapability.reject(reason1);\n                                } else {\n                                    throw reason1;\n                                }\n                            });\n                        };\n                        pump1();\n                    }\n                    _abortOperatorList({ intentState: intentState1, reason: reason1, force: force1 = false }) {\n                        if (!intentState1.streamReader) {\n                            return;\n                        }\n                        if (intentState1.streamReaderCancelTimeout) {\n                            clearTimeout(intentState1.streamReaderCancelTimeout);\n                            intentState1.streamReaderCancelTimeout = null;\n                        }\n                        if (!force1) {\n                            if (intentState1.renderTasks.size > 0) {\n                                return;\n                            }\n                            if (reason1 instanceof _display_utils.RenderingCancelledException) {\n                                let delay1 = RENDERING_CANCELLED_TIMEOUT;\n                                if (reason1.extraDelay > 0 && reason1.extraDelay < 1000) {\n                                    delay1 += reason1.extraDelay;\n                                }\n                                intentState1.streamReaderCancelTimeout = setTimeout(()=>{\n                                    intentState1.streamReaderCancelTimeout = null;\n                                    this._abortOperatorList({\n                                        intentState: intentState1,\n                                        reason: reason1,\n                                        force: true\n                                    });\n                                }, delay1);\n                                return;\n                            }\n                        }\n                        intentState1.streamReader.cancel(new _util.AbortException(reason1.message)).catch(()=>{});\n                        intentState1.streamReader = null;\n                        if (this._transport.destroyed) {\n                            return;\n                        }\n                        for (const [curCacheKey1, curIntentState1] of this._intentStates){\n                            if (curIntentState1 === intentState1) {\n                                this._intentStates.delete(curCacheKey1);\n                                break;\n                            }\n                        }\n                        this.cleanup();\n                    }\n                    get stats() {\n                        return this._stats;\n                    }\n                }\n                exports.PDFPageProxy = PDFPageProxy;\n                class LoopbackPort {\n                    #listeners;\n                    #deferred;\n                    postMessage(obj1, transfer1) {\n                        const event1 = {\n                            data: structuredClone(obj1, transfer1 ? {\n                                transfer: transfer1\n                            } : null)\n                        };\n                        this.#deferred.then(()=>{\n                            for (const listener1 of this.#listeners){\n                                listener1.call(this, event1);\n                            }\n                        });\n                    }\n                    addEventListener(name1, listener1) {\n                        this.#listeners.add(listener1);\n                    }\n                    removeEventListener(name1, listener1) {\n                        this.#listeners.delete(listener1);\n                    }\n                    terminate() {\n                        this.#listeners.clear();\n                    }\n                    constructor(){\n                        this.#listeners = new Set();\n                        this.#deferred = Promise.resolve();\n                    }\n                }\n                exports.LoopbackPort = LoopbackPort;\n                const PDFWorkerUtil = {\n                    isWorkerDisabled: false,\n                    fallbackWorkerSrc: null,\n                    fakeWorkerId: 0\n                };\n                exports.PDFWorkerUtil = PDFWorkerUtil;\n                {\n                    if (_util.isNodeJS && \"function\" === \"function\") {\n                        PDFWorkerUtil.isWorkerDisabled = true;\n                        PDFWorkerUtil.fallbackWorkerSrc = \"./pdf.worker.js\";\n                    } else if (typeof document === \"object\") {\n                        const pdfjsFilePath = document?.currentScript?.src;\n                        if (pdfjsFilePath) {\n                            PDFWorkerUtil.fallbackWorkerSrc = pdfjsFilePath.replace(/(\\.(?:min\\.)?js)(\\?.*)?$/i, \".worker$1$2\");\n                        }\n                    }\n                    PDFWorkerUtil.isSameOrigin = function(baseUrl1, otherUrl1) {\n                        let base1;\n                        try {\n                            base1 = new URL(baseUrl1);\n                            if (!base1.origin || base1.origin === \"null\") {\n                                return false;\n                            }\n                        } catch  {\n                            return false;\n                        }\n                        const other1 = new URL(otherUrl1, base1);\n                        return base1.origin === other1.origin;\n                    };\n                    PDFWorkerUtil.createCDNWrapper = function(url1) {\n                        const wrapper1 = `importScripts(\"${url1}\");`;\n                        return URL.createObjectURL(new Blob([\n                            wrapper1\n                        ]));\n                    };\n                }\n                class PDFWorker {\n                    static #workerPorts;\n                    constructor({ name: name1 = null, port: port1 = null, verbosity: verbosity1 = (0, _util.getVerbosityLevel)() } = {}){\n                        this.name = name1;\n                        this.destroyed = false;\n                        this.verbosity = verbosity1;\n                        this._readyCapability = new _util.PromiseCapability();\n                        this._port = null;\n                        this._webWorker = null;\n                        this._messageHandler = null;\n                        if (port1) {\n                            if (PDFWorker.#workerPorts?.has(port1)) {\n                                throw new Error(\"Cannot use more than one PDFWorker per port.\");\n                            }\n                            (PDFWorker.#workerPorts ||= new WeakMap()).set(port1, this);\n                            this._initializeFromPort(port1);\n                            return;\n                        }\n                        this._initialize();\n                    }\n                    get promise() {\n                        return this._readyCapability.promise;\n                    }\n                    get port() {\n                        return this._port;\n                    }\n                    get messageHandler() {\n                        return this._messageHandler;\n                    }\n                    _initializeFromPort(port1) {\n                        this._port = port1;\n                        this._messageHandler = new _message_handler.MessageHandler(\"main\", \"worker\", port1);\n                        this._messageHandler.on(\"ready\", function() {});\n                        this._readyCapability.resolve();\n                        this._messageHandler.send(\"configure\", {\n                            verbosity: this.verbosity\n                        });\n                    }\n                    _initialize() {\n                        if (!PDFWorkerUtil.isWorkerDisabled && !PDFWorker._mainThreadWorkerMessageHandler) {\n                            let { workerSrc: workerSrc1 } = PDFWorker;\n                            try {\n                                if (!PDFWorkerUtil.isSameOrigin(window.location.href, workerSrc1)) {\n                                    workerSrc1 = PDFWorkerUtil.createCDNWrapper(new URL(workerSrc1, window.location).href);\n                                }\n                                const worker1 = new Worker(workerSrc1);\n                                const messageHandler1 = new _message_handler.MessageHandler(\"main\", \"worker\", worker1);\n                                const terminateEarly1 = ()=>{\n                                    worker1.removeEventListener(\"error\", onWorkerError1);\n                                    messageHandler1.destroy();\n                                    worker1.terminate();\n                                    if (this.destroyed) {\n                                        this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n                                    } else {\n                                        this._setupFakeWorker();\n                                    }\n                                };\n                                const onWorkerError1 = ()=>{\n                                    if (!this._webWorker) {\n                                        terminateEarly1();\n                                    }\n                                };\n                                worker1.addEventListener(\"error\", onWorkerError1);\n                                messageHandler1.on(\"test\", (data1)=>{\n                                    worker1.removeEventListener(\"error\", onWorkerError1);\n                                    if (this.destroyed) {\n                                        terminateEarly1();\n                                        return;\n                                    }\n                                    if (data1) {\n                                        this._messageHandler = messageHandler1;\n                                        this._port = worker1;\n                                        this._webWorker = worker1;\n                                        this._readyCapability.resolve();\n                                        messageHandler1.send(\"configure\", {\n                                            verbosity: this.verbosity\n                                        });\n                                    } else {\n                                        this._setupFakeWorker();\n                                        messageHandler1.destroy();\n                                        worker1.terminate();\n                                    }\n                                });\n                                messageHandler1.on(\"ready\", (data1)=>{\n                                    worker1.removeEventListener(\"error\", onWorkerError1);\n                                    if (this.destroyed) {\n                                        terminateEarly1();\n                                        return;\n                                    }\n                                    try {\n                                        sendTest1();\n                                    } catch  {\n                                        this._setupFakeWorker();\n                                    }\n                                });\n                                const sendTest1 = ()=>{\n                                    const testObj1 = new Uint8Array();\n                                    messageHandler1.send(\"test\", testObj1, [\n                                        testObj1.buffer\n                                    ]);\n                                };\n                                sendTest1();\n                                return;\n                            } catch  {\n                                (0, _util.info)(\"The worker has been disabled.\");\n                            }\n                        }\n                        this._setupFakeWorker();\n                    }\n                    _setupFakeWorker() {\n                        if (!PDFWorkerUtil.isWorkerDisabled) {\n                            (0, _util.warn)(\"Setting up fake worker.\");\n                            PDFWorkerUtil.isWorkerDisabled = true;\n                        }\n                        PDFWorker._setupFakeWorkerGlobal.then((WorkerMessageHandler1)=>{\n                            if (this.destroyed) {\n                                this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n                                return;\n                            }\n                            const port1 = new LoopbackPort();\n                            this._port = port1;\n                            const id1 = `fake${PDFWorkerUtil.fakeWorkerId++}`;\n                            const workerHandler1 = new _message_handler.MessageHandler(id1 + \"_worker\", id1, port1);\n                            WorkerMessageHandler1.setup(workerHandler1, port1);\n                            const messageHandler1 = new _message_handler.MessageHandler(id1, id1 + \"_worker\", port1);\n                            this._messageHandler = messageHandler1;\n                            this._readyCapability.resolve();\n                            messageHandler1.send(\"configure\", {\n                                verbosity: this.verbosity\n                            });\n                        }).catch((reason1)=>{\n                            this._readyCapability.reject(new Error(`Setting up fake worker failed: \"${reason1.message}\".`));\n                        });\n                    }\n                    destroy() {\n                        this.destroyed = true;\n                        if (this._webWorker) {\n                            this._webWorker.terminate();\n                            this._webWorker = null;\n                        }\n                        PDFWorker.#workerPorts?.delete(this._port);\n                        this._port = null;\n                        if (this._messageHandler) {\n                            this._messageHandler.destroy();\n                            this._messageHandler = null;\n                        }\n                    }\n                    static fromPort(params1) {\n                        if (!params1?.port) {\n                            throw new Error(\"PDFWorker.fromPort - invalid method signature.\");\n                        }\n                        const cachedPort1 = this.#workerPorts?.get(params1.port);\n                        if (cachedPort1) {\n                            if (cachedPort1._pendingDestroy) {\n                                throw new Error(\"PDFWorker.fromPort - the worker is being destroyed.\\n\" + \"Please remember to await `PDFDocumentLoadingTask.destroy()`-calls.\");\n                            }\n                            return cachedPort1;\n                        }\n                        return new PDFWorker(params1);\n                    }\n                    static get workerSrc() {\n                        if (_worker_options.GlobalWorkerOptions.workerSrc) {\n                            return _worker_options.GlobalWorkerOptions.workerSrc;\n                        }\n                        if (PDFWorkerUtil.fallbackWorkerSrc !== null) {\n                            if (!_util.isNodeJS) {\n                                (0, _display_utils.deprecated)('No \"GlobalWorkerOptions.workerSrc\" specified.');\n                            }\n                            return PDFWorkerUtil.fallbackWorkerSrc;\n                        }\n                        throw new Error('No \"GlobalWorkerOptions.workerSrc\" specified.');\n                    }\n                    static get _mainThreadWorkerMessageHandler() {\n                        try {\n                            return globalThis.pdfjsWorker?.WorkerMessageHandler || null;\n                        } catch  {\n                            return null;\n                        }\n                    }\n                    static get _setupFakeWorkerGlobal() {\n                        const loader = async ()=>{\n                            const mainWorkerMessageHandler = this._mainThreadWorkerMessageHandler;\n                            if (mainWorkerMessageHandler) {\n                                return mainWorkerMessageHandler;\n                            }\n                            if (_util.isNodeJS && \"function\" === \"function\") {\n                                const worker = eval(\"require\")(this.workerSrc);\n                                return worker.WorkerMessageHandler;\n                            }\n                            await (0, _display_utils.loadScript)(this.workerSrc);\n                            return window.pdfjsWorker.WorkerMessageHandler;\n                        };\n                        return (0, _util.shadow)(this, \"_setupFakeWorkerGlobal\", loader());\n                    }\n                }\n                exports.PDFWorker = PDFWorker;\n                class WorkerTransport {\n                    #methodPromises;\n                    #pageCache;\n                    #pagePromises;\n                    #passwordCapability;\n                    constructor(messageHandler1, loadingTask1, networkStream1, params1, factory1){\n                        this.#methodPromises = new Map();\n                        this.#pageCache = new Map();\n                        this.#pagePromises = new Map();\n                        this.#passwordCapability = null;\n                        this.messageHandler = messageHandler1;\n                        this.loadingTask = loadingTask1;\n                        this.commonObjs = new PDFObjects();\n                        this.fontLoader = new _font_loader.FontLoader({\n                            ownerDocument: params1.ownerDocument,\n                            styleElement: params1.styleElement\n                        });\n                        this._params = params1;\n                        this.canvasFactory = factory1.canvasFactory;\n                        this.filterFactory = factory1.filterFactory;\n                        this.cMapReaderFactory = factory1.cMapReaderFactory;\n                        this.standardFontDataFactory = factory1.standardFontDataFactory;\n                        this.destroyed = false;\n                        this.destroyCapability = null;\n                        this._networkStream = networkStream1;\n                        this._fullReader = null;\n                        this._lastProgress = null;\n                        this.downloadInfoCapability = new _util.PromiseCapability();\n                        this.setupMessageHandler();\n                    }\n                    #cacheSimpleMethod(name1, data1 = null) {\n                        const cachedPromise1 = this.#methodPromises.get(name1);\n                        if (cachedPromise1) {\n                            return cachedPromise1;\n                        }\n                        const promise1 = this.messageHandler.sendWithPromise(name1, data1);\n                        this.#methodPromises.set(name1, promise1);\n                        return promise1;\n                    }\n                    get annotationStorage() {\n                        return (0, _util.shadow)(this, \"annotationStorage\", new _annotation_storage.AnnotationStorage());\n                    }\n                    getRenderingIntent(intent1, annotationMode1 = _util.AnnotationMode.ENABLE, printAnnotationStorage1 = null, isOpList1 = false) {\n                        let renderingIntent1 = _util.RenderingIntentFlag.DISPLAY;\n                        let annotationStorageSerializable1 = _annotation_storage.SerializableEmpty;\n                        switch(intent1){\n                            case \"any\":\n                                renderingIntent1 = _util.RenderingIntentFlag.ANY;\n                                break;\n                            case \"display\":\n                                break;\n                            case \"print\":\n                                renderingIntent1 = _util.RenderingIntentFlag.PRINT;\n                                break;\n                            default:\n                                (0, _util.warn)(`getRenderingIntent - invalid intent: ${intent1}`);\n                        }\n                        switch(annotationMode1){\n                            case _util.AnnotationMode.DISABLE:\n                                renderingIntent1 += _util.RenderingIntentFlag.ANNOTATIONS_DISABLE;\n                                break;\n                            case _util.AnnotationMode.ENABLE:\n                                break;\n                            case _util.AnnotationMode.ENABLE_FORMS:\n                                renderingIntent1 += _util.RenderingIntentFlag.ANNOTATIONS_FORMS;\n                                break;\n                            case _util.AnnotationMode.ENABLE_STORAGE:\n                                renderingIntent1 += _util.RenderingIntentFlag.ANNOTATIONS_STORAGE;\n                                const annotationStorage1 = renderingIntent1 & _util.RenderingIntentFlag.PRINT && printAnnotationStorage1 instanceof _annotation_storage.PrintAnnotationStorage ? printAnnotationStorage1 : this.annotationStorage;\n                                annotationStorageSerializable1 = annotationStorage1.serializable;\n                                break;\n                            default:\n                                (0, _util.warn)(`getRenderingIntent - invalid annotationMode: ${annotationMode1}`);\n                        }\n                        if (isOpList1) {\n                            renderingIntent1 += _util.RenderingIntentFlag.OPLIST;\n                        }\n                        return {\n                            renderingIntent: renderingIntent1,\n                            cacheKey: `${renderingIntent1}_${annotationStorageSerializable1.hash}`,\n                            annotationStorageSerializable: annotationStorageSerializable1\n                        };\n                    }\n                    destroy() {\n                        if (this.destroyCapability) {\n                            return this.destroyCapability.promise;\n                        }\n                        this.destroyed = true;\n                        this.destroyCapability = new _util.PromiseCapability();\n                        this.#passwordCapability?.reject(new Error(\"Worker was destroyed during onPassword callback\"));\n                        const waitOn1 = [];\n                        for (const page1 of this.#pageCache.values()){\n                            waitOn1.push(page1._destroy());\n                        }\n                        this.#pageCache.clear();\n                        this.#pagePromises.clear();\n                        if (this.hasOwnProperty(\"annotationStorage\")) {\n                            this.annotationStorage.resetModified();\n                        }\n                        const terminated1 = this.messageHandler.sendWithPromise(\"Terminate\", null);\n                        waitOn1.push(terminated1);\n                        Promise.all(waitOn1).then(()=>{\n                            this.commonObjs.clear();\n                            this.fontLoader.clear();\n                            this.#methodPromises.clear();\n                            this.filterFactory.destroy();\n                            this._networkStream?.cancelAllRequests(new _util.AbortException(\"Worker was terminated.\"));\n                            if (this.messageHandler) {\n                                this.messageHandler.destroy();\n                                this.messageHandler = null;\n                            }\n                            this.destroyCapability.resolve();\n                        }, this.destroyCapability.reject);\n                        return this.destroyCapability.promise;\n                    }\n                    setupMessageHandler() {\n                        const { messageHandler: messageHandler1, loadingTask: loadingTask1 } = this;\n                        messageHandler1.on(\"GetReader\", (data1, sink1)=>{\n                            (0, _util.assert)(this._networkStream, \"GetReader - no `IPDFStream` instance available.\");\n                            this._fullReader = this._networkStream.getFullReader();\n                            this._fullReader.onProgress = (evt1)=>{\n                                this._lastProgress = {\n                                    loaded: evt1.loaded,\n                                    total: evt1.total\n                                };\n                            };\n                            sink1.onPull = ()=>{\n                                this._fullReader.read().then(function({ value: value1, done: done1 }) {\n                                    if (done1) {\n                                        sink1.close();\n                                        return;\n                                    }\n                                    (0, _util.assert)(value1 instanceof ArrayBuffer, \"GetReader - expected an ArrayBuffer.\");\n                                    sink1.enqueue(new Uint8Array(value1), 1, [\n                                        value1\n                                    ]);\n                                }).catch((reason1)=>{\n                                    sink1.error(reason1);\n                                });\n                            };\n                            sink1.onCancel = (reason1)=>{\n                                this._fullReader.cancel(reason1);\n                                sink1.ready.catch((readyReason1)=>{\n                                    if (this.destroyed) {\n                                        return;\n                                    }\n                                    throw readyReason1;\n                                });\n                            };\n                        });\n                        messageHandler1.on(\"ReaderHeadersReady\", (data1)=>{\n                            const headersCapability1 = new _util.PromiseCapability();\n                            const fullReader1 = this._fullReader;\n                            fullReader1.headersReady.then(()=>{\n                                if (!fullReader1.isStreamingSupported || !fullReader1.isRangeSupported) {\n                                    if (this._lastProgress) {\n                                        loadingTask1.onProgress?.(this._lastProgress);\n                                    }\n                                    fullReader1.onProgress = (evt1)=>{\n                                        loadingTask1.onProgress?.({\n                                            loaded: evt1.loaded,\n                                            total: evt1.total\n                                        });\n                                    };\n                                }\n                                headersCapability1.resolve({\n                                    isStreamingSupported: fullReader1.isStreamingSupported,\n                                    isRangeSupported: fullReader1.isRangeSupported,\n                                    contentLength: fullReader1.contentLength\n                                });\n                            }, headersCapability1.reject);\n                            return headersCapability1.promise;\n                        });\n                        messageHandler1.on(\"GetRangeReader\", (data1, sink1)=>{\n                            (0, _util.assert)(this._networkStream, \"GetRangeReader - no `IPDFStream` instance available.\");\n                            const rangeReader1 = this._networkStream.getRangeReader(data1.begin, data1.end);\n                            if (!rangeReader1) {\n                                sink1.close();\n                                return;\n                            }\n                            sink1.onPull = ()=>{\n                                rangeReader1.read().then(function({ value: value1, done: done1 }) {\n                                    if (done1) {\n                                        sink1.close();\n                                        return;\n                                    }\n                                    (0, _util.assert)(value1 instanceof ArrayBuffer, \"GetRangeReader - expected an ArrayBuffer.\");\n                                    sink1.enqueue(new Uint8Array(value1), 1, [\n                                        value1\n                                    ]);\n                                }).catch((reason1)=>{\n                                    sink1.error(reason1);\n                                });\n                            };\n                            sink1.onCancel = (reason1)=>{\n                                rangeReader1.cancel(reason1);\n                                sink1.ready.catch((readyReason1)=>{\n                                    if (this.destroyed) {\n                                        return;\n                                    }\n                                    throw readyReason1;\n                                });\n                            };\n                        });\n                        messageHandler1.on(\"GetDoc\", ({ pdfInfo: pdfInfo1 })=>{\n                            this._numPages = pdfInfo1.numPages;\n                            this._htmlForXfa = pdfInfo1.htmlForXfa;\n                            delete pdfInfo1.htmlForXfa;\n                            loadingTask1._capability.resolve(new PDFDocumentProxy(pdfInfo1, this));\n                        });\n                        messageHandler1.on(\"DocException\", function(ex1) {\n                            let reason1;\n                            switch(ex1.name){\n                                case \"PasswordException\":\n                                    reason1 = new _util.PasswordException(ex1.message, ex1.code);\n                                    break;\n                                case \"InvalidPDFException\":\n                                    reason1 = new _util.InvalidPDFException(ex1.message);\n                                    break;\n                                case \"MissingPDFException\":\n                                    reason1 = new _util.MissingPDFException(ex1.message);\n                                    break;\n                                case \"UnexpectedResponseException\":\n                                    reason1 = new _util.UnexpectedResponseException(ex1.message, ex1.status);\n                                    break;\n                                case \"UnknownErrorException\":\n                                    reason1 = new _util.UnknownErrorException(ex1.message, ex1.details);\n                                    break;\n                                default:\n                                    (0, _util.unreachable)(\"DocException - expected a valid Error.\");\n                            }\n                            loadingTask1._capability.reject(reason1);\n                        });\n                        messageHandler1.on(\"PasswordRequest\", (exception1)=>{\n                            this.#passwordCapability = new _util.PromiseCapability();\n                            if (loadingTask1.onPassword) {\n                                const updatePassword1 = (password1)=>{\n                                    if (password1 instanceof Error) {\n                                        this.#passwordCapability.reject(password1);\n                                    } else {\n                                        this.#passwordCapability.resolve({\n                                            password: password1\n                                        });\n                                    }\n                                };\n                                try {\n                                    loadingTask1.onPassword(updatePassword1, exception1.code);\n                                } catch (ex1) {\n                                    this.#passwordCapability.reject(ex1);\n                                }\n                            } else {\n                                this.#passwordCapability.reject(new _util.PasswordException(exception1.message, exception1.code));\n                            }\n                            return this.#passwordCapability.promise;\n                        });\n                        messageHandler1.on(\"DataLoaded\", (data1)=>{\n                            loadingTask1.onProgress?.({\n                                loaded: data1.length,\n                                total: data1.length\n                            });\n                            this.downloadInfoCapability.resolve(data1);\n                        });\n                        messageHandler1.on(\"StartRenderPage\", (data1)=>{\n                            if (this.destroyed) {\n                                return;\n                            }\n                            const page1 = this.#pageCache.get(data1.pageIndex);\n                            page1._startRenderPage(data1.transparency, data1.cacheKey);\n                        });\n                        messageHandler1.on(\"commonobj\", ([id1, type1, exportedData1])=>{\n                            if (this.destroyed) {\n                                return;\n                            }\n                            if (this.commonObjs.has(id1)) {\n                                return;\n                            }\n                            switch(type1){\n                                case \"Font\":\n                                    const params1 = this._params;\n                                    if (\"error\" in exportedData1) {\n                                        const exportedError1 = exportedData1.error;\n                                        (0, _util.warn)(`Error during font loading: ${exportedError1}`);\n                                        this.commonObjs.resolve(id1, exportedError1);\n                                        break;\n                                    }\n                                    const inspectFont1 = params1.pdfBug && globalThis.FontInspector?.enabled ? (font1, url1)=>globalThis.FontInspector.fontAdded(font1, url1) : null;\n                                    const font1 = new _font_loader.FontFaceObject(exportedData1, {\n                                        isEvalSupported: params1.isEvalSupported,\n                                        disableFontFace: params1.disableFontFace,\n                                        ignoreErrors: params1.ignoreErrors,\n                                        inspectFont: inspectFont1\n                                    });\n                                    this.fontLoader.bind(font1).catch((reason1)=>{\n                                        return messageHandler1.sendWithPromise(\"FontFallback\", {\n                                            id: id1\n                                        });\n                                    }).finally(()=>{\n                                        if (!params1.fontExtraProperties && font1.data) {\n                                            font1.data = null;\n                                        }\n                                        this.commonObjs.resolve(id1, font1);\n                                    });\n                                    break;\n                                case \"FontPath\":\n                                case \"Image\":\n                                case \"Pattern\":\n                                    this.commonObjs.resolve(id1, exportedData1);\n                                    break;\n                                default:\n                                    throw new Error(`Got unknown common object type ${type1}`);\n                            }\n                        });\n                        messageHandler1.on(\"obj\", ([id1, pageIndex1, type1, imageData1])=>{\n                            if (this.destroyed) {\n                                return;\n                            }\n                            const pageProxy1 = this.#pageCache.get(pageIndex1);\n                            if (pageProxy1.objs.has(id1)) {\n                                return;\n                            }\n                            switch(type1){\n                                case \"Image\":\n                                    pageProxy1.objs.resolve(id1, imageData1);\n                                    if (imageData1) {\n                                        let length1;\n                                        if (imageData1.bitmap) {\n                                            const { width: width2, height: height1 } = imageData1;\n                                            length1 = width2 * height1 * 4;\n                                        } else {\n                                            length1 = imageData1.data?.length || 0;\n                                        }\n                                        if (length1 > _util.MAX_IMAGE_SIZE_TO_CACHE) {\n                                            pageProxy1._maybeCleanupAfterRender = true;\n                                        }\n                                    }\n                                    break;\n                                case \"Pattern\":\n                                    pageProxy1.objs.resolve(id1, imageData1);\n                                    break;\n                                default:\n                                    throw new Error(`Got unknown object type ${type1}`);\n                            }\n                        });\n                        messageHandler1.on(\"DocProgress\", (data1)=>{\n                            if (this.destroyed) {\n                                return;\n                            }\n                            loadingTask1.onProgress?.({\n                                loaded: data1.loaded,\n                                total: data1.total\n                            });\n                        });\n                        messageHandler1.on(\"FetchBuiltInCMap\", (data1)=>{\n                            if (this.destroyed) {\n                                return Promise.reject(new Error(\"Worker was destroyed.\"));\n                            }\n                            if (!this.cMapReaderFactory) {\n                                return Promise.reject(new Error(\"CMapReaderFactory not initialized, see the `useWorkerFetch` parameter.\"));\n                            }\n                            return this.cMapReaderFactory.fetch(data1);\n                        });\n                        messageHandler1.on(\"FetchStandardFontData\", (data1)=>{\n                            if (this.destroyed) {\n                                return Promise.reject(new Error(\"Worker was destroyed.\"));\n                            }\n                            if (!this.standardFontDataFactory) {\n                                return Promise.reject(new Error(\"StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter.\"));\n                            }\n                            return this.standardFontDataFactory.fetch(data1);\n                        });\n                    }\n                    getData() {\n                        return this.messageHandler.sendWithPromise(\"GetData\", null);\n                    }\n                    saveDocument() {\n                        if (this.annotationStorage.size <= 0) {\n                            (0, _util.warn)(\"saveDocument called while `annotationStorage` is empty, \" + \"please use the getData-method instead.\");\n                        }\n                        const { map: map1, transfers: transfers1 } = this.annotationStorage.serializable;\n                        return this.messageHandler.sendWithPromise(\"SaveDocument\", {\n                            isPureXfa: !!this._htmlForXfa,\n                            numPages: this._numPages,\n                            annotationStorage: map1,\n                            filename: this._fullReader?.filename ?? null\n                        }, transfers1).finally(()=>{\n                            this.annotationStorage.resetModified();\n                        });\n                    }\n                    getPage(pageNumber1) {\n                        if (!Number.isInteger(pageNumber1) || pageNumber1 <= 0 || pageNumber1 > this._numPages) {\n                            return Promise.reject(new Error(\"Invalid page request.\"));\n                        }\n                        const pageIndex1 = pageNumber1 - 1, cachedPromise1 = this.#pagePromises.get(pageIndex1);\n                        if (cachedPromise1) {\n                            return cachedPromise1;\n                        }\n                        const promise1 = this.messageHandler.sendWithPromise(\"GetPage\", {\n                            pageIndex: pageIndex1\n                        }).then((pageInfo1)=>{\n                            if (this.destroyed) {\n                                throw new Error(\"Transport destroyed\");\n                            }\n                            const page1 = new PDFPageProxy(pageIndex1, pageInfo1, this, this._params.pdfBug);\n                            this.#pageCache.set(pageIndex1, page1);\n                            return page1;\n                        });\n                        this.#pagePromises.set(pageIndex1, promise1);\n                        return promise1;\n                    }\n                    getPageIndex(ref1) {\n                        if (typeof ref1 !== \"object\" || ref1 === null || !Number.isInteger(ref1.num) || ref1.num < 0 || !Number.isInteger(ref1.gen) || ref1.gen < 0) {\n                            return Promise.reject(new Error(\"Invalid pageIndex request.\"));\n                        }\n                        return this.messageHandler.sendWithPromise(\"GetPageIndex\", {\n                            num: ref1.num,\n                            gen: ref1.gen\n                        });\n                    }\n                    getAnnotations(pageIndex1, intent1) {\n                        return this.messageHandler.sendWithPromise(\"GetAnnotations\", {\n                            pageIndex: pageIndex1,\n                            intent: intent1\n                        });\n                    }\n                    getFieldObjects() {\n                        return this.#cacheSimpleMethod(\"GetFieldObjects\");\n                    }\n                    hasJSActions() {\n                        return this.#cacheSimpleMethod(\"HasJSActions\");\n                    }\n                    getCalculationOrderIds() {\n                        return this.messageHandler.sendWithPromise(\"GetCalculationOrderIds\", null);\n                    }\n                    getDestinations() {\n                        return this.messageHandler.sendWithPromise(\"GetDestinations\", null);\n                    }\n                    getDestination(id1) {\n                        if (typeof id1 !== \"string\") {\n                            return Promise.reject(new Error(\"Invalid destination request.\"));\n                        }\n                        return this.messageHandler.sendWithPromise(\"GetDestination\", {\n                            id: id1\n                        });\n                    }\n                    getPageLabels() {\n                        return this.messageHandler.sendWithPromise(\"GetPageLabels\", null);\n                    }\n                    getPageLayout() {\n                        return this.messageHandler.sendWithPromise(\"GetPageLayout\", null);\n                    }\n                    getPageMode() {\n                        return this.messageHandler.sendWithPromise(\"GetPageMode\", null);\n                    }\n                    getViewerPreferences() {\n                        return this.messageHandler.sendWithPromise(\"GetViewerPreferences\", null);\n                    }\n                    getOpenAction() {\n                        return this.messageHandler.sendWithPromise(\"GetOpenAction\", null);\n                    }\n                    getAttachments() {\n                        return this.messageHandler.sendWithPromise(\"GetAttachments\", null);\n                    }\n                    getDocJSActions() {\n                        return this.#cacheSimpleMethod(\"GetDocJSActions\");\n                    }\n                    getPageJSActions(pageIndex1) {\n                        return this.messageHandler.sendWithPromise(\"GetPageJSActions\", {\n                            pageIndex: pageIndex1\n                        });\n                    }\n                    getStructTree(pageIndex1) {\n                        return this.messageHandler.sendWithPromise(\"GetStructTree\", {\n                            pageIndex: pageIndex1\n                        });\n                    }\n                    getOutline() {\n                        return this.messageHandler.sendWithPromise(\"GetOutline\", null);\n                    }\n                    getOptionalContentConfig() {\n                        return this.messageHandler.sendWithPromise(\"GetOptionalContentConfig\", null).then((results1)=>{\n                            return new _optional_content_config.OptionalContentConfig(results1);\n                        });\n                    }\n                    getPermissions() {\n                        return this.messageHandler.sendWithPromise(\"GetPermissions\", null);\n                    }\n                    getMetadata() {\n                        const name1 = \"GetMetadata\", cachedPromise1 = this.#methodPromises.get(name1);\n                        if (cachedPromise1) {\n                            return cachedPromise1;\n                        }\n                        const promise1 = this.messageHandler.sendWithPromise(name1, null).then((results1)=>{\n                            return {\n                                info: results1[0],\n                                metadata: results1[1] ? new _metadata.Metadata(results1[1]) : null,\n                                contentDispositionFilename: this._fullReader?.filename ?? null,\n                                contentLength: this._fullReader?.contentLength ?? null\n                            };\n                        });\n                        this.#methodPromises.set(name1, promise1);\n                        return promise1;\n                    }\n                    getMarkInfo() {\n                        return this.messageHandler.sendWithPromise(\"GetMarkInfo\", null);\n                    }\n                    async startCleanup(keepLoadedFonts1 = false) {\n                        if (this.destroyed) {\n                            return;\n                        }\n                        await this.messageHandler.sendWithPromise(\"Cleanup\", null);\n                        for (const page1 of this.#pageCache.values()){\n                            const cleanupSuccessful1 = page1.cleanup();\n                            if (!cleanupSuccessful1) {\n                                throw new Error(`startCleanup: Page ${page1.pageNumber} is currently rendering.`);\n                            }\n                        }\n                        this.commonObjs.clear();\n                        if (!keepLoadedFonts1) {\n                            this.fontLoader.clear();\n                        }\n                        this.#methodPromises.clear();\n                        this.filterFactory.destroy(true);\n                    }\n                    get loadingParams() {\n                        const { disableAutoFetch: disableAutoFetch1, enableXfa: enableXfa1 } = this._params;\n                        return (0, _util.shadow)(this, \"loadingParams\", {\n                            disableAutoFetch: disableAutoFetch1,\n                            enableXfa: enableXfa1\n                        });\n                    }\n                }\n                class PDFObjects {\n                    #objs;\n                    #ensureObj(objId1) {\n                        return this.#objs[objId1] ||= {\n                            capability: new _util.PromiseCapability(),\n                            data: null\n                        };\n                    }\n                    get(objId1, callback1 = null) {\n                        if (callback1) {\n                            const obj1 = this.#ensureObj(objId1);\n                            obj1.capability.promise.then(()=>callback1(obj1.data));\n                            return null;\n                        }\n                        const obj1 = this.#objs[objId1];\n                        if (!obj1?.capability.settled) {\n                            throw new Error(`Requesting object that isn't resolved yet ${objId1}.`);\n                        }\n                        return obj1.data;\n                    }\n                    has(objId1) {\n                        const obj1 = this.#objs[objId1];\n                        return obj1?.capability.settled || false;\n                    }\n                    resolve(objId1, data1 = null) {\n                        const obj1 = this.#ensureObj(objId1);\n                        obj1.data = data1;\n                        obj1.capability.resolve();\n                    }\n                    clear() {\n                        for(const objId1 in this.#objs){\n                            const { data: data1 } = this.#objs[objId1];\n                            data1?.bitmap?.close();\n                        }\n                        this.#objs = Object.create(null);\n                    }\n                    constructor(){\n                        this.#objs = Object.create(null);\n                    }\n                }\n                class RenderTask {\n                    #internalRenderTask;\n                    constructor(internalRenderTask1){\n                        this.#internalRenderTask = null;\n                        this.#internalRenderTask = internalRenderTask1;\n                        this.onContinue = null;\n                    }\n                    get promise() {\n                        return this.#internalRenderTask.capability.promise;\n                    }\n                    cancel(extraDelay1 = 0) {\n                        this.#internalRenderTask.cancel(null, extraDelay1);\n                    }\n                    get separateAnnots() {\n                        const { separateAnnots: separateAnnots1 } = this.#internalRenderTask.operatorList;\n                        if (!separateAnnots1) {\n                            return false;\n                        }\n                        const { annotationCanvasMap: annotationCanvasMap1 } = this.#internalRenderTask;\n                        return separateAnnots1.form || separateAnnots1.canvas && annotationCanvasMap1?.size > 0;\n                    }\n                }\n                exports.RenderTask = RenderTask;\n                class InternalRenderTask {\n                    static #canvasInUse = new WeakSet();\n                    constructor({ callback: callback1, params: params1, objs: objs1, commonObjs: commonObjs1, annotationCanvasMap: annotationCanvasMap1, operatorList: operatorList1, pageIndex: pageIndex1, canvasFactory: canvasFactory1, filterFactory: filterFactory1, useRequestAnimationFrame: useRequestAnimationFrame1 = false, pdfBug: pdfBug1 = false, pageColors: pageColors1 = null }){\n                        this.callback = callback1;\n                        this.params = params1;\n                        this.objs = objs1;\n                        this.commonObjs = commonObjs1;\n                        this.annotationCanvasMap = annotationCanvasMap1;\n                        this.operatorListIdx = null;\n                        this.operatorList = operatorList1;\n                        this._pageIndex = pageIndex1;\n                        this.canvasFactory = canvasFactory1;\n                        this.filterFactory = filterFactory1;\n                        this._pdfBug = pdfBug1;\n                        this.pageColors = pageColors1;\n                        this.running = false;\n                        this.graphicsReadyCallback = null;\n                        this.graphicsReady = false;\n                        this._useRequestAnimationFrame = useRequestAnimationFrame1 === true && \"undefined\" !== \"undefined\";\n                        this.cancelled = false;\n                        this.capability = new _util.PromiseCapability();\n                        this.task = new RenderTask(this);\n                        this._cancelBound = this.cancel.bind(this);\n                        this._continueBound = this._continue.bind(this);\n                        this._scheduleNextBound = this._scheduleNext.bind(this);\n                        this._nextBound = this._next.bind(this);\n                        this._canvas = params1.canvasContext.canvas;\n                    }\n                    get completed() {\n                        return this.capability.promise.catch(function() {});\n                    }\n                    initializeGraphics({ transparency: transparency1 = false, optionalContentConfig: optionalContentConfig1 }) {\n                        if (this.cancelled) {\n                            return;\n                        }\n                        if (this._canvas) {\n                            if (InternalRenderTask.#canvasInUse.has(this._canvas)) {\n                                throw new Error(\"Cannot use the same canvas during multiple render() operations. \" + \"Use different canvas or ensure previous operations were \" + \"cancelled or completed.\");\n                            }\n                            InternalRenderTask.#canvasInUse.add(this._canvas);\n                        }\n                        if (this._pdfBug && globalThis.StepperManager?.enabled) {\n                            this.stepper = globalThis.StepperManager.create(this._pageIndex);\n                            this.stepper.init(this.operatorList);\n                            this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint();\n                        }\n                        const { canvasContext: canvasContext1, viewport: viewport1, transform: transform1, background: background1 } = this.params;\n                        this.gfx = new _canvas.CanvasGraphics(canvasContext1, this.commonObjs, this.objs, this.canvasFactory, this.filterFactory, {\n                            optionalContentConfig: optionalContentConfig1\n                        }, this.annotationCanvasMap, this.pageColors);\n                        this.gfx.beginDrawing({\n                            transform: transform1,\n                            viewport: viewport1,\n                            transparency: transparency1,\n                            background: background1\n                        });\n                        this.operatorListIdx = 0;\n                        this.graphicsReady = true;\n                        this.graphicsReadyCallback?.();\n                    }\n                    cancel(error1 = null, extraDelay1 = 0) {\n                        this.running = false;\n                        this.cancelled = true;\n                        this.gfx?.endDrawing();\n                        InternalRenderTask.#canvasInUse.delete(this._canvas);\n                        this.callback(error1 || new _display_utils.RenderingCancelledException(`Rendering cancelled, page ${this._pageIndex + 1}`, extraDelay1));\n                    }\n                    operatorListChanged() {\n                        if (!this.graphicsReady) {\n                            this.graphicsReadyCallback ||= this._continueBound;\n                            return;\n                        }\n                        this.stepper?.updateOperatorList(this.operatorList);\n                        if (this.running) {\n                            return;\n                        }\n                        this._continue();\n                    }\n                    _continue() {\n                        this.running = true;\n                        if (this.cancelled) {\n                            return;\n                        }\n                        if (this.task.onContinue) {\n                            this.task.onContinue(this._scheduleNextBound);\n                        } else {\n                            this._scheduleNext();\n                        }\n                    }\n                    _scheduleNext() {\n                        if (this._useRequestAnimationFrame) {\n                            window.requestAnimationFrame(()=>{\n                                this._nextBound().catch(this._cancelBound);\n                            });\n                        } else {\n                            Promise.resolve().then(this._nextBound).catch(this._cancelBound);\n                        }\n                    }\n                    async _next() {\n                        if (this.cancelled) {\n                            return;\n                        }\n                        this.operatorListIdx = this.gfx.executeOperatorList(this.operatorList, this.operatorListIdx, this._continueBound, this.stepper);\n                        if (this.operatorListIdx === this.operatorList.argsArray.length) {\n                            this.running = false;\n                            if (this.operatorList.lastChunk) {\n                                this.gfx.endDrawing();\n                                InternalRenderTask.#canvasInUse.delete(this._canvas);\n                                this.callback();\n                            }\n                        }\n                    }\n                }\n                const version = \"3.11.174\";\n                exports.version = version;\n                const build = \"ce8716743\";\n                exports.build = build;\n            /***/ },\n            /* 3 */ /***/ (__unused_webpack_module1, exports1, __w_pdfjs_require__1)=>{\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                exports1.SerializableEmpty = exports1.PrintAnnotationStorage = exports1.AnnotationStorage = void 0;\n                var _util1 = __w_pdfjs_require__1(1);\n                var _editor1 = __w_pdfjs_require__1(4);\n                var _murmurhash1 = __w_pdfjs_require__1(8);\n                const SerializableEmpty1 = Object.freeze({\n                    map: null,\n                    hash: \"\",\n                    transfers: undefined\n                });\n                exports1.SerializableEmpty = SerializableEmpty1;\n                class AnnotationStorage1 {\n                    #modified;\n                    #storage;\n                    constructor(){\n                        this.#modified = false;\n                        this.#storage = new Map();\n                        this.onSetModified = null;\n                        this.onResetModified = null;\n                        this.onAnnotationEditor = null;\n                    }\n                    getValue(key1, defaultValue1) {\n                        const value1 = this.#storage.get(key1);\n                        if (value1 === undefined) {\n                            return defaultValue1;\n                        }\n                        return Object.assign(defaultValue1, value1);\n                    }\n                    getRawValue(key1) {\n                        return this.#storage.get(key1);\n                    }\n                    remove(key1) {\n                        this.#storage.delete(key1);\n                        if (this.#storage.size === 0) {\n                            this.resetModified();\n                        }\n                        if (typeof this.onAnnotationEditor === \"function\") {\n                            for (const value1 of this.#storage.values()){\n                                if (value1 instanceof _editor1.AnnotationEditor) {\n                                    return;\n                                }\n                            }\n                            this.onAnnotationEditor(null);\n                        }\n                    }\n                    setValue(key1, value1) {\n                        const obj1 = this.#storage.get(key1);\n                        let modified1 = false;\n                        if (obj1 !== undefined) {\n                            for (const [entry1, val1] of Object.entries(value1)){\n                                if (obj1[entry1] !== val1) {\n                                    modified1 = true;\n                                    obj1[entry1] = val1;\n                                }\n                            }\n                        } else {\n                            modified1 = true;\n                            this.#storage.set(key1, value1);\n                        }\n                        if (modified1) {\n                            this.#setModified();\n                        }\n                        if (value1 instanceof _editor1.AnnotationEditor && typeof this.onAnnotationEditor === \"function\") {\n                            this.onAnnotationEditor(value1.constructor._type);\n                        }\n                    }\n                    has(key1) {\n                        return this.#storage.has(key1);\n                    }\n                    getAll() {\n                        return this.#storage.size > 0 ? (0, _util1.objectFromMap)(this.#storage) : null;\n                    }\n                    setAll(obj1) {\n                        for (const [key1, val1] of Object.entries(obj1)){\n                            this.setValue(key1, val1);\n                        }\n                    }\n                    get size() {\n                        return this.#storage.size;\n                    }\n                    #setModified() {\n                        if (!this.#modified) {\n                            this.#modified = true;\n                            if (typeof this.onSetModified === \"function\") {\n                                this.onSetModified();\n                            }\n                        }\n                    }\n                    resetModified() {\n                        if (this.#modified) {\n                            this.#modified = false;\n                            if (typeof this.onResetModified === \"function\") {\n                                this.onResetModified();\n                            }\n                        }\n                    }\n                    get print() {\n                        return new PrintAnnotationStorage1(this);\n                    }\n                    get serializable() {\n                        if (this.#storage.size === 0) {\n                            return SerializableEmpty1;\n                        }\n                        const map1 = new Map(), hash1 = new _murmurhash1.MurmurHash3_64(), transfers1 = [];\n                        const context1 = Object.create(null);\n                        let hasBitmap1 = false;\n                        for (const [key1, val1] of this.#storage){\n                            const serialized1 = val1 instanceof _editor1.AnnotationEditor ? val1.serialize(false, context1) : val1;\n                            if (serialized1) {\n                                map1.set(key1, serialized1);\n                                hash1.update(`${key1}:${JSON.stringify(serialized1)}`);\n                                hasBitmap1 ||= !!serialized1.bitmap;\n                            }\n                        }\n                        if (hasBitmap1) {\n                            for (const value1 of map1.values()){\n                                if (value1.bitmap) {\n                                    transfers1.push(value1.bitmap);\n                                }\n                            }\n                        }\n                        return map1.size > 0 ? {\n                            map: map1,\n                            hash: hash1.hexdigest(),\n                            transfers: transfers1\n                        } : SerializableEmpty1;\n                    }\n                }\n                exports1.AnnotationStorage = AnnotationStorage1;\n                class PrintAnnotationStorage1 extends AnnotationStorage1 {\n                    #serializable;\n                    constructor(parent1){\n                        super();\n                        const { map: map1, hash: hash1, transfers: transfers1 } = parent1.serializable;\n                        const clone1 = structuredClone(map1, transfers1 ? {\n                            transfer: transfers1\n                        } : null);\n                        this.#serializable = {\n                            map: clone1,\n                            hash: hash1,\n                            transfers: transfers1\n                        };\n                    }\n                    get print() {\n                        (0, _util1.unreachable)(\"Should not call PrintAnnotationStorage.print\");\n                    }\n                    get serializable() {\n                        return this.#serializable;\n                    }\n                }\n                exports1.PrintAnnotationStorage = PrintAnnotationStorage1;\n            /***/ },\n            /* 4 */ /***/ (__unused_webpack_module1, exports1, __w_pdfjs_require__1)=>{\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                exports1.AnnotationEditor = void 0;\n                var _tools1 = __w_pdfjs_require__1(5);\n                var _util1 = __w_pdfjs_require__1(1);\n                var _display_utils1 = __w_pdfjs_require__1(6);\n                class AnnotationEditor1 {\n                    #altText;\n                    #altTextDecorative;\n                    #altTextButton;\n                    #altTextTooltip;\n                    #altTextTooltipTimeout;\n                    #keepAspectRatio;\n                    #resizersDiv;\n                    #boundFocusin;\n                    #boundFocusout;\n                    #hasBeenClicked;\n                    #isEditing;\n                    #isInEditMode;\n                    #isDraggable;\n                    #zIndex;\n                    static{\n                        this._borderLineWidth = -1;\n                    }\n                    static{\n                        this._colorManager = new _tools1.ColorManager();\n                    }\n                    static{\n                        this._zIndex = 1;\n                    }\n                    static{\n                        this.SMALL_EDITOR_SIZE = 0;\n                    }\n                    constructor(parameters1){\n                        this.#altText = \"\";\n                        this.#altTextDecorative = false;\n                        this.#altTextButton = null;\n                        this.#altTextTooltip = null;\n                        this.#altTextTooltipTimeout = null;\n                        this.#keepAspectRatio = false;\n                        this.#resizersDiv = null;\n                        this.#boundFocusin = this.focusin.bind(this);\n                        this.#boundFocusout = this.focusout.bind(this);\n                        this.#hasBeenClicked = false;\n                        this.#isEditing = false;\n                        this.#isInEditMode = false;\n                        this._initialOptions = Object.create(null);\n                        this._uiManager = null;\n                        this._focusEventsAllowed = true;\n                        this._l10nPromise = null;\n                        this.#isDraggable = false;\n                        this.#zIndex = AnnotationEditor1._zIndex++;\n                        if (this.constructor === AnnotationEditor1) {\n                            (0, _util1.unreachable)(\"Cannot initialize AnnotationEditor.\");\n                        }\n                        this.parent = parameters1.parent;\n                        this.id = parameters1.id;\n                        this.width = this.height = null;\n                        this.pageIndex = parameters1.parent.pageIndex;\n                        this.name = parameters1.name;\n                        this.div = null;\n                        this._uiManager = parameters1.uiManager;\n                        this.annotationElementId = null;\n                        this._willKeepAspectRatio = false;\n                        this._initialOptions.isCentered = parameters1.isCentered;\n                        this._structTreeParentId = null;\n                        const { rotation: rotation1, rawDims: { pageWidth: pageWidth1, pageHeight: pageHeight1, pageX: pageX1, pageY: pageY1 } } = this.parent.viewport;\n                        this.rotation = rotation1;\n                        this.pageRotation = (360 + rotation1 - this._uiManager.viewParameters.rotation) % 360;\n                        this.pageDimensions = [\n                            pageWidth1,\n                            pageHeight1\n                        ];\n                        this.pageTranslation = [\n                            pageX1,\n                            pageY1\n                        ];\n                        const [width2, height1] = this.parentDimensions;\n                        this.x = parameters1.x / width2;\n                        this.y = parameters1.y / height1;\n                        this.isAttachedToDOM = false;\n                        this.deleted = false;\n                    }\n                    get editorType() {\n                        return Object.getPrototypeOf(this).constructor._type;\n                    }\n                    static get _defaultLineColor() {\n                        return (0, _util1.shadow)(this, \"_defaultLineColor\", this._colorManager.getHexCode(\"CanvasText\"));\n                    }\n                    static deleteAnnotationElement(editor1) {\n                        const fakeEditor1 = new FakeEditor1({\n                            id: editor1.parent.getNextId(),\n                            parent: editor1.parent,\n                            uiManager: editor1._uiManager\n                        });\n                        fakeEditor1.annotationElementId = editor1.annotationElementId;\n                        fakeEditor1.deleted = true;\n                        fakeEditor1._uiManager.addToAnnotationStorage(fakeEditor1);\n                    }\n                    static initialize(l10n1, options1 = null) {\n                        AnnotationEditor1._l10nPromise ||= new Map([\n                            \"editor_alt_text_button_label\",\n                            \"editor_alt_text_edit_button_label\",\n                            \"editor_alt_text_decorative_tooltip\"\n                        ].map((str1)=>[\n                                str1,\n                                l10n1.get(str1)\n                            ]));\n                        if (options1?.strings) {\n                            for (const str1 of options1.strings){\n                                AnnotationEditor1._l10nPromise.set(str1, l10n1.get(str1));\n                            }\n                        }\n                        if (AnnotationEditor1._borderLineWidth !== -1) {\n                            return;\n                        }\n                        const style1 = getComputedStyle(document.documentElement);\n                        AnnotationEditor1._borderLineWidth = parseFloat(style1.getPropertyValue(\"--outline-width\")) || 0;\n                    }\n                    static updateDefaultParams(_type1, _value1) {}\n                    static get defaultPropertiesToUpdate() {\n                        return [];\n                    }\n                    static isHandlingMimeForPasting(mime1) {\n                        return false;\n                    }\n                    static paste(item1, parent1) {\n                        (0, _util1.unreachable)(\"Not implemented\");\n                    }\n                    get propertiesToUpdate() {\n                        return [];\n                    }\n                    get _isDraggable() {\n                        return this.#isDraggable;\n                    }\n                    set _isDraggable(value1) {\n                        this.#isDraggable = value1;\n                        this.div?.classList.toggle(\"draggable\", value1);\n                    }\n                    center() {\n                        const [pageWidth1, pageHeight1] = this.pageDimensions;\n                        switch(this.parentRotation){\n                            case 90:\n                                this.x -= this.height * pageHeight1 / (pageWidth1 * 2);\n                                this.y += this.width * pageWidth1 / (pageHeight1 * 2);\n                                break;\n                            case 180:\n                                this.x += this.width / 2;\n                                this.y += this.height / 2;\n                                break;\n                            case 270:\n                                this.x += this.height * pageHeight1 / (pageWidth1 * 2);\n                                this.y -= this.width * pageWidth1 / (pageHeight1 * 2);\n                                break;\n                            default:\n                                this.x -= this.width / 2;\n                                this.y -= this.height / 2;\n                                break;\n                        }\n                        this.fixAndSetPosition();\n                    }\n                    addCommands(params1) {\n                        this._uiManager.addCommands(params1);\n                    }\n                    get currentLayer() {\n                        return this._uiManager.currentLayer;\n                    }\n                    setInBackground() {\n                        this.div.style.zIndex = 0;\n                    }\n                    setInForeground() {\n                        this.div.style.zIndex = this.#zIndex;\n                    }\n                    setParent(parent1) {\n                        if (parent1 !== null) {\n                            this.pageIndex = parent1.pageIndex;\n                            this.pageDimensions = parent1.pageDimensions;\n                        }\n                        this.parent = parent1;\n                    }\n                    focusin(event1) {\n                        if (!this._focusEventsAllowed) {\n                            return;\n                        }\n                        if (!this.#hasBeenClicked) {\n                            this.parent.setSelected(this);\n                        } else {\n                            this.#hasBeenClicked = false;\n                        }\n                    }\n                    focusout(event1) {\n                        if (!this._focusEventsAllowed) {\n                            return;\n                        }\n                        if (!this.isAttachedToDOM) {\n                            return;\n                        }\n                        const target1 = event1.relatedTarget;\n                        if (target1?.closest(`#${this.id}`)) {\n                            return;\n                        }\n                        event1.preventDefault();\n                        if (!this.parent?.isMultipleSelection) {\n                            this.commitOrRemove();\n                        }\n                    }\n                    commitOrRemove() {\n                        if (this.isEmpty()) {\n                            this.remove();\n                        } else {\n                            this.commit();\n                        }\n                    }\n                    commit() {\n                        this.addToAnnotationStorage();\n                    }\n                    addToAnnotationStorage() {\n                        this._uiManager.addToAnnotationStorage(this);\n                    }\n                    setAt(x4, y4, tx2, ty2) {\n                        const [width2, height1] = this.parentDimensions;\n                        [tx2, ty2] = this.screenToPageTranslation(tx2, ty2);\n                        this.x = (x4 + tx2) / width2;\n                        this.y = (y4 + ty2) / height1;\n                        this.fixAndSetPosition();\n                    }\n                    #translate([width2, height1], x4, y4) {\n                        [x4, y4] = this.screenToPageTranslation(x4, y4);\n                        this.x += x4 / width2;\n                        this.y += y4 / height1;\n                        this.fixAndSetPosition();\n                    }\n                    translate(x4, y4) {\n                        this.#translate(this.parentDimensions, x4, y4);\n                    }\n                    translateInPage(x4, y4) {\n                        this.#translate(this.pageDimensions, x4, y4);\n                        this.div.scrollIntoView({\n                            block: \"nearest\"\n                        });\n                    }\n                    drag(tx2, ty2) {\n                        const [parentWidth1, parentHeight1] = this.parentDimensions;\n                        this.x += tx2 / parentWidth1;\n                        this.y += ty2 / parentHeight1;\n                        if (this.parent && (this.x < 0 || this.x > 1 || this.y < 0 || this.y > 1)) {\n                            const { x: x4, y: y4 } = this.div.getBoundingClientRect();\n                            if (this.parent.findNewParent(this, x4, y4)) {\n                                this.x -= Math.floor(this.x);\n                                this.y -= Math.floor(this.y);\n                            }\n                        }\n                        let { x: x4, y: y4 } = this;\n                        const [bx1, by1] = this.#getBaseTranslation();\n                        x4 += bx1;\n                        y4 += by1;\n                        this.div.style.left = `${(100 * x4).toFixed(2)}%`;\n                        this.div.style.top = `${(100 * y4).toFixed(2)}%`;\n                        this.div.scrollIntoView({\n                            block: \"nearest\"\n                        });\n                    }\n                    #getBaseTranslation() {\n                        const [parentWidth1, parentHeight1] = this.parentDimensions;\n                        const { _borderLineWidth: _borderLineWidth1 } = AnnotationEditor1;\n                        const x4 = _borderLineWidth1 / parentWidth1;\n                        const y4 = _borderLineWidth1 / parentHeight1;\n                        switch(this.rotation){\n                            case 90:\n                                return [\n                                    -x4,\n                                    y4\n                                ];\n                            case 180:\n                                return [\n                                    x4,\n                                    y4\n                                ];\n                            case 270:\n                                return [\n                                    x4,\n                                    -y4\n                                ];\n                            default:\n                                return [\n                                    -x4,\n                                    -y4\n                                ];\n                        }\n                    }\n                    fixAndSetPosition() {\n                        const [pageWidth1, pageHeight1] = this.pageDimensions;\n                        let { x: x4, y: y4, width: width2, height: height1 } = this;\n                        width2 *= pageWidth1;\n                        height1 *= pageHeight1;\n                        x4 *= pageWidth1;\n                        y4 *= pageHeight1;\n                        switch(this.rotation){\n                            case 0:\n                                x4 = Math.max(0, Math.min(pageWidth1 - width2, x4));\n                                y4 = Math.max(0, Math.min(pageHeight1 - height1, y4));\n                                break;\n                            case 90:\n                                x4 = Math.max(0, Math.min(pageWidth1 - height1, x4));\n                                y4 = Math.min(pageHeight1, Math.max(width2, y4));\n                                break;\n                            case 180:\n                                x4 = Math.min(pageWidth1, Math.max(width2, x4));\n                                y4 = Math.min(pageHeight1, Math.max(height1, y4));\n                                break;\n                            case 270:\n                                x4 = Math.min(pageWidth1, Math.max(height1, x4));\n                                y4 = Math.max(0, Math.min(pageHeight1 - width2, y4));\n                                break;\n                        }\n                        this.x = x4 /= pageWidth1;\n                        this.y = y4 /= pageHeight1;\n                        const [bx1, by1] = this.#getBaseTranslation();\n                        x4 += bx1;\n                        y4 += by1;\n                        const { style: style1 } = this.div;\n                        style1.left = `${(100 * x4).toFixed(2)}%`;\n                        style1.top = `${(100 * y4).toFixed(2)}%`;\n                        this.moveInDOM();\n                    }\n                    static #rotatePoint(x4, y4, angle1) {\n                        switch(angle1){\n                            case 90:\n                                return [\n                                    y4,\n                                    -x4\n                                ];\n                            case 180:\n                                return [\n                                    -x4,\n                                    -y4\n                                ];\n                            case 270:\n                                return [\n                                    -y4,\n                                    x4\n                                ];\n                            default:\n                                return [\n                                    x4,\n                                    y4\n                                ];\n                        }\n                    }\n                    screenToPageTranslation(x4, y4) {\n                        return AnnotationEditor1.#rotatePoint(x4, y4, this.parentRotation);\n                    }\n                    pageTranslationToScreen(x4, y4) {\n                        return AnnotationEditor1.#rotatePoint(x4, y4, 360 - this.parentRotation);\n                    }\n                    #getRotationMatrix(rotation1) {\n                        switch(rotation1){\n                            case 90:\n                                {\n                                    const [pageWidth1, pageHeight1] = this.pageDimensions;\n                                    return [\n                                        0,\n                                        -pageWidth1 / pageHeight1,\n                                        pageHeight1 / pageWidth1,\n                                        0\n                                    ];\n                                }\n                            case 180:\n                                return [\n                                    -1,\n                                    0,\n                                    0,\n                                    -1\n                                ];\n                            case 270:\n                                {\n                                    const [pageWidth1, pageHeight1] = this.pageDimensions;\n                                    return [\n                                        0,\n                                        pageWidth1 / pageHeight1,\n                                        -pageHeight1 / pageWidth1,\n                                        0\n                                    ];\n                                }\n                            default:\n                                return [\n                                    1,\n                                    0,\n                                    0,\n                                    1\n                                ];\n                        }\n                    }\n                    get parentScale() {\n                        return this._uiManager.viewParameters.realScale;\n                    }\n                    get parentRotation() {\n                        return (this._uiManager.viewParameters.rotation + this.pageRotation) % 360;\n                    }\n                    get parentDimensions() {\n                        const { parentScale: parentScale1, pageDimensions: [pageWidth1, pageHeight1] } = this;\n                        const scaledWidth1 = pageWidth1 * parentScale1;\n                        const scaledHeight1 = pageHeight1 * parentScale1;\n                        return _util1.FeatureTest.isCSSRoundSupported ? [\n                            Math.round(scaledWidth1),\n                            Math.round(scaledHeight1)\n                        ] : [\n                            scaledWidth1,\n                            scaledHeight1\n                        ];\n                    }\n                    setDims(width2, height1) {\n                        const [parentWidth1, parentHeight1] = this.parentDimensions;\n                        this.div.style.width = `${(100 * width2 / parentWidth1).toFixed(2)}%`;\n                        if (!this.#keepAspectRatio) {\n                            this.div.style.height = `${(100 * height1 / parentHeight1).toFixed(2)}%`;\n                        }\n                        this.#altTextButton?.classList.toggle(\"small\", width2 < AnnotationEditor1.SMALL_EDITOR_SIZE || height1 < AnnotationEditor1.SMALL_EDITOR_SIZE);\n                    }\n                    fixDims() {\n                        const { style: style1 } = this.div;\n                        const { height: height1, width: width2 } = style1;\n                        const widthPercent1 = width2.endsWith(\"%\");\n                        const heightPercent1 = !this.#keepAspectRatio && height1.endsWith(\"%\");\n                        if (widthPercent1 && heightPercent1) {\n                            return;\n                        }\n                        const [parentWidth1, parentHeight1] = this.parentDimensions;\n                        if (!widthPercent1) {\n                            style1.width = `${(100 * parseFloat(width2) / parentWidth1).toFixed(2)}%`;\n                        }\n                        if (!this.#keepAspectRatio && !heightPercent1) {\n                            style1.height = `${(100 * parseFloat(height1) / parentHeight1).toFixed(2)}%`;\n                        }\n                    }\n                    getInitialTranslation() {\n                        return [\n                            0,\n                            0\n                        ];\n                    }\n                    #createResizers() {\n                        if (this.#resizersDiv) {\n                            return;\n                        }\n                        this.#resizersDiv = document.createElement(\"div\");\n                        this.#resizersDiv.classList.add(\"resizers\");\n                        const classes1 = [\n                            \"topLeft\",\n                            \"topRight\",\n                            \"bottomRight\",\n                            \"bottomLeft\"\n                        ];\n                        if (!this._willKeepAspectRatio) {\n                            classes1.push(\"topMiddle\", \"middleRight\", \"bottomMiddle\", \"middleLeft\");\n                        }\n                        for (const name1 of classes1){\n                            const div1 = document.createElement(\"div\");\n                            this.#resizersDiv.append(div1);\n                            div1.classList.add(\"resizer\", name1);\n                            div1.addEventListener(\"pointerdown\", this.#resizerPointerdown.bind(this, name1));\n                            div1.addEventListener(\"contextmenu\", _display_utils1.noContextMenu);\n                        }\n                        this.div.prepend(this.#resizersDiv);\n                    }\n                    #resizerPointerdown(name1, event1) {\n                        event1.preventDefault();\n                        const { isMac: isMac1 } = _util1.FeatureTest.platform;\n                        if (event1.button !== 0 || event1.ctrlKey && isMac1) {\n                            return;\n                        }\n                        const boundResizerPointermove1 = this.#resizerPointermove.bind(this, name1);\n                        const savedDraggable1 = this._isDraggable;\n                        this._isDraggable = false;\n                        const pointerMoveOptions1 = {\n                            passive: true,\n                            capture: true\n                        };\n                        window.addEventListener(\"pointermove\", boundResizerPointermove1, pointerMoveOptions1);\n                        const savedX1 = this.x;\n                        const savedY1 = this.y;\n                        const savedWidth1 = this.width;\n                        const savedHeight1 = this.height;\n                        const savedParentCursor1 = this.parent.div.style.cursor;\n                        const savedCursor1 = this.div.style.cursor;\n                        this.div.style.cursor = this.parent.div.style.cursor = window.getComputedStyle(event1.target).cursor;\n                        const pointerUpCallback1 = ()=>{\n                            this._isDraggable = savedDraggable1;\n                            window.removeEventListener(\"pointerup\", pointerUpCallback1);\n                            window.removeEventListener(\"blur\", pointerUpCallback1);\n                            window.removeEventListener(\"pointermove\", boundResizerPointermove1, pointerMoveOptions1);\n                            this.parent.div.style.cursor = savedParentCursor1;\n                            this.div.style.cursor = savedCursor1;\n                            const newX1 = this.x;\n                            const newY1 = this.y;\n                            const newWidth1 = this.width;\n                            const newHeight1 = this.height;\n                            if (newX1 === savedX1 && newY1 === savedY1 && newWidth1 === savedWidth1 && newHeight1 === savedHeight1) {\n                                return;\n                            }\n                            this.addCommands({\n                                cmd: ()=>{\n                                    this.width = newWidth1;\n                                    this.height = newHeight1;\n                                    this.x = newX1;\n                                    this.y = newY1;\n                                    const [parentWidth1, parentHeight1] = this.parentDimensions;\n                                    this.setDims(parentWidth1 * newWidth1, parentHeight1 * newHeight1);\n                                    this.fixAndSetPosition();\n                                },\n                                undo: ()=>{\n                                    this.width = savedWidth1;\n                                    this.height = savedHeight1;\n                                    this.x = savedX1;\n                                    this.y = savedY1;\n                                    const [parentWidth1, parentHeight1] = this.parentDimensions;\n                                    this.setDims(parentWidth1 * savedWidth1, parentHeight1 * savedHeight1);\n                                    this.fixAndSetPosition();\n                                },\n                                mustExec: true\n                            });\n                        };\n                        window.addEventListener(\"pointerup\", pointerUpCallback1);\n                        window.addEventListener(\"blur\", pointerUpCallback1);\n                    }\n                    #resizerPointermove(name1, event1) {\n                        const [parentWidth1, parentHeight1] = this.parentDimensions;\n                        const savedX1 = this.x;\n                        const savedY1 = this.y;\n                        const savedWidth1 = this.width;\n                        const savedHeight1 = this.height;\n                        const minWidth1 = AnnotationEditor1.MIN_SIZE / parentWidth1;\n                        const minHeight1 = AnnotationEditor1.MIN_SIZE / parentHeight1;\n                        const round1 = (x4)=>Math.round(x4 * 10000) / 10000;\n                        const rotationMatrix1 = this.#getRotationMatrix(this.rotation);\n                        const transf1 = (x4, y4)=>[\n                                rotationMatrix1[0] * x4 + rotationMatrix1[2] * y4,\n                                rotationMatrix1[1] * x4 + rotationMatrix1[3] * y4\n                            ];\n                        const invRotationMatrix1 = this.#getRotationMatrix(360 - this.rotation);\n                        const invTransf1 = (x4, y4)=>[\n                                invRotationMatrix1[0] * x4 + invRotationMatrix1[2] * y4,\n                                invRotationMatrix1[1] * x4 + invRotationMatrix1[3] * y4\n                            ];\n                        let getPoint1;\n                        let getOpposite1;\n                        let isDiagonal1 = false;\n                        let isHorizontal1 = false;\n                        switch(name1){\n                            case \"topLeft\":\n                                isDiagonal1 = true;\n                                getPoint1 = (w1, h3)=>[\n                                        0,\n                                        0\n                                    ];\n                                getOpposite1 = (w1, h3)=>[\n                                        w1,\n                                        h3\n                                    ];\n                                break;\n                            case \"topMiddle\":\n                                getPoint1 = (w1, h3)=>[\n                                        w1 / 2,\n                                        0\n                                    ];\n                                getOpposite1 = (w1, h3)=>[\n                                        w1 / 2,\n                                        h3\n                                    ];\n                                break;\n                            case \"topRight\":\n                                isDiagonal1 = true;\n                                getPoint1 = (w1, h3)=>[\n                                        w1,\n                                        0\n                                    ];\n                                getOpposite1 = (w1, h3)=>[\n                                        0,\n                                        h3\n                                    ];\n                                break;\n                            case \"middleRight\":\n                                isHorizontal1 = true;\n                                getPoint1 = (w1, h3)=>[\n                                        w1,\n                                        h3 / 2\n                                    ];\n                                getOpposite1 = (w1, h3)=>[\n                                        0,\n                                        h3 / 2\n                                    ];\n                                break;\n                            case \"bottomRight\":\n                                isDiagonal1 = true;\n                                getPoint1 = (w1, h3)=>[\n                                        w1,\n                                        h3\n                                    ];\n                                getOpposite1 = (w1, h3)=>[\n                                        0,\n                                        0\n                                    ];\n                                break;\n                            case \"bottomMiddle\":\n                                getPoint1 = (w1, h3)=>[\n                                        w1 / 2,\n                                        h3\n                                    ];\n                                getOpposite1 = (w1, h3)=>[\n                                        w1 / 2,\n                                        0\n                                    ];\n                                break;\n                            case \"bottomLeft\":\n                                isDiagonal1 = true;\n                                getPoint1 = (w1, h3)=>[\n                                        0,\n                                        h3\n                                    ];\n                                getOpposite1 = (w1, h3)=>[\n                                        w1,\n                                        0\n                                    ];\n                                break;\n                            case \"middleLeft\":\n                                isHorizontal1 = true;\n                                getPoint1 = (w1, h3)=>[\n                                        0,\n                                        h3 / 2\n                                    ];\n                                getOpposite1 = (w1, h3)=>[\n                                        w1,\n                                        h3 / 2\n                                    ];\n                                break;\n                        }\n                        const point2 = getPoint1(savedWidth1, savedHeight1);\n                        const oppositePoint1 = getOpposite1(savedWidth1, savedHeight1);\n                        let transfOppositePoint1 = transf1(...oppositePoint1);\n                        const oppositeX1 = round1(savedX1 + transfOppositePoint1[0]);\n                        const oppositeY1 = round1(savedY1 + transfOppositePoint1[1]);\n                        let ratioX1 = 1;\n                        let ratioY1 = 1;\n                        let [deltaX1, deltaY1] = this.screenToPageTranslation(event1.movementX, event1.movementY);\n                        [deltaX1, deltaY1] = invTransf1(deltaX1 / parentWidth1, deltaY1 / parentHeight1);\n                        if (isDiagonal1) {\n                            const oldDiag1 = Math.hypot(savedWidth1, savedHeight1);\n                            ratioX1 = ratioY1 = Math.max(Math.min(Math.hypot(oppositePoint1[0] - point2[0] - deltaX1, oppositePoint1[1] - point2[1] - deltaY1) / oldDiag1, 1 / savedWidth1, 1 / savedHeight1), minWidth1 / savedWidth1, minHeight1 / savedHeight1);\n                        } else if (isHorizontal1) {\n                            ratioX1 = Math.max(minWidth1, Math.min(1, Math.abs(oppositePoint1[0] - point2[0] - deltaX1))) / savedWidth1;\n                        } else {\n                            ratioY1 = Math.max(minHeight1, Math.min(1, Math.abs(oppositePoint1[1] - point2[1] - deltaY1))) / savedHeight1;\n                        }\n                        const newWidth1 = round1(savedWidth1 * ratioX1);\n                        const newHeight1 = round1(savedHeight1 * ratioY1);\n                        transfOppositePoint1 = transf1(...getOpposite1(newWidth1, newHeight1));\n                        const newX1 = oppositeX1 - transfOppositePoint1[0];\n                        const newY1 = oppositeY1 - transfOppositePoint1[1];\n                        this.width = newWidth1;\n                        this.height = newHeight1;\n                        this.x = newX1;\n                        this.y = newY1;\n                        this.setDims(parentWidth1 * newWidth1, parentHeight1 * newHeight1);\n                        this.fixAndSetPosition();\n                    }\n                    async addAltTextButton() {\n                        if (this.#altTextButton) {\n                            return;\n                        }\n                        const altText1 = this.#altTextButton = document.createElement(\"button\");\n                        altText1.className = \"altText\";\n                        const msg1 = await AnnotationEditor1._l10nPromise.get(\"editor_alt_text_button_label\");\n                        altText1.textContent = msg1;\n                        altText1.setAttribute(\"aria-label\", msg1);\n                        altText1.tabIndex = \"0\";\n                        altText1.addEventListener(\"contextmenu\", _display_utils1.noContextMenu);\n                        altText1.addEventListener(\"pointerdown\", (event1)=>event1.stopPropagation());\n                        altText1.addEventListener(\"click\", (event1)=>{\n                            event1.preventDefault();\n                            this._uiManager.editAltText(this);\n                        }, {\n                            capture: true\n                        });\n                        altText1.addEventListener(\"keydown\", (event1)=>{\n                            if (event1.target === altText1 && event1.key === \"Enter\") {\n                                event1.preventDefault();\n                                this._uiManager.editAltText(this);\n                            }\n                        });\n                        this.#setAltTextButtonState();\n                        this.div.append(altText1);\n                        if (!AnnotationEditor1.SMALL_EDITOR_SIZE) {\n                            const PERCENT1 = 40;\n                            AnnotationEditor1.SMALL_EDITOR_SIZE = Math.min(128, Math.round(altText1.getBoundingClientRect().width * (1 + PERCENT1 / 100)));\n                        }\n                    }\n                    async #setAltTextButtonState() {\n                        const button1 = this.#altTextButton;\n                        if (!button1) {\n                            return;\n                        }\n                        if (!this.#altText && !this.#altTextDecorative) {\n                            button1.classList.remove(\"done\");\n                            this.#altTextTooltip?.remove();\n                            return;\n                        }\n                        AnnotationEditor1._l10nPromise.get(\"editor_alt_text_edit_button_label\").then((msg1)=>{\n                            button1.setAttribute(\"aria-label\", msg1);\n                        });\n                        let tooltip1 = this.#altTextTooltip;\n                        if (!tooltip1) {\n                            this.#altTextTooltip = tooltip1 = document.createElement(\"span\");\n                            tooltip1.className = \"tooltip\";\n                            tooltip1.setAttribute(\"role\", \"tooltip\");\n                            const id1 = tooltip1.id = `alt-text-tooltip-${this.id}`;\n                            button1.setAttribute(\"aria-describedby\", id1);\n                            const DELAY_TO_SHOW_TOOLTIP1 = 100;\n                            button1.addEventListener(\"mouseenter\", ()=>{\n                                this.#altTextTooltipTimeout = setTimeout(()=>{\n                                    this.#altTextTooltipTimeout = null;\n                                    this.#altTextTooltip.classList.add(\"show\");\n                                    this._uiManager._eventBus.dispatch(\"reporttelemetry\", {\n                                        source: this,\n                                        details: {\n                                            type: \"editing\",\n                                            subtype: this.editorType,\n                                            data: {\n                                                action: \"alt_text_tooltip\"\n                                            }\n                                        }\n                                    });\n                                }, DELAY_TO_SHOW_TOOLTIP1);\n                            });\n                            button1.addEventListener(\"mouseleave\", ()=>{\n                                clearTimeout(this.#altTextTooltipTimeout);\n                                this.#altTextTooltipTimeout = null;\n                                this.#altTextTooltip?.classList.remove(\"show\");\n                            });\n                        }\n                        button1.classList.add(\"done\");\n                        tooltip1.innerText = this.#altTextDecorative ? await AnnotationEditor1._l10nPromise.get(\"editor_alt_text_decorative_tooltip\") : this.#altText;\n                        if (!tooltip1.parentNode) {\n                            button1.append(tooltip1);\n                        }\n                    }\n                    getClientDimensions() {\n                        return this.div.getBoundingClientRect();\n                    }\n                    get altTextData() {\n                        return {\n                            altText: this.#altText,\n                            decorative: this.#altTextDecorative\n                        };\n                    }\n                    set altTextData({ altText: altText1, decorative: decorative1 }) {\n                        if (this.#altText === altText1 && this.#altTextDecorative === decorative1) {\n                            return;\n                        }\n                        this.#altText = altText1;\n                        this.#altTextDecorative = decorative1;\n                        this.#setAltTextButtonState();\n                    }\n                    render() {\n                        this.div = document.createElement(\"div\");\n                        this.div.setAttribute(\"data-editor-rotation\", (360 - this.rotation) % 360);\n                        this.div.className = this.name;\n                        this.div.setAttribute(\"id\", this.id);\n                        this.div.setAttribute(\"tabIndex\", 0);\n                        this.setInForeground();\n                        this.div.addEventListener(\"focusin\", this.#boundFocusin);\n                        this.div.addEventListener(\"focusout\", this.#boundFocusout);\n                        const [parentWidth1, parentHeight1] = this.parentDimensions;\n                        if (this.parentRotation % 180 !== 0) {\n                            this.div.style.maxWidth = `${(100 * parentHeight1 / parentWidth1).toFixed(2)}%`;\n                            this.div.style.maxHeight = `${(100 * parentWidth1 / parentHeight1).toFixed(2)}%`;\n                        }\n                        const [tx2, ty2] = this.getInitialTranslation();\n                        this.translate(tx2, ty2);\n                        (0, _tools1.bindEvents)(this, this.div, [\n                            \"pointerdown\"\n                        ]);\n                        return this.div;\n                    }\n                    pointerdown(event1) {\n                        const { isMac: isMac1 } = _util1.FeatureTest.platform;\n                        if (event1.button !== 0 || event1.ctrlKey && isMac1) {\n                            event1.preventDefault();\n                            return;\n                        }\n                        this.#hasBeenClicked = true;\n                        this.#setUpDragSession(event1);\n                    }\n                    #setUpDragSession(event1) {\n                        if (!this._isDraggable) {\n                            return;\n                        }\n                        const isSelected1 = this._uiManager.isSelected(this);\n                        this._uiManager.setUpDragSession();\n                        let pointerMoveOptions1, pointerMoveCallback1;\n                        if (isSelected1) {\n                            pointerMoveOptions1 = {\n                                passive: true,\n                                capture: true\n                            };\n                            pointerMoveCallback1 = (e1)=>{\n                                const [tx2, ty2] = this.screenToPageTranslation(e1.movementX, e1.movementY);\n                                this._uiManager.dragSelectedEditors(tx2, ty2);\n                            };\n                            window.addEventListener(\"pointermove\", pointerMoveCallback1, pointerMoveOptions1);\n                        }\n                        const pointerUpCallback1 = ()=>{\n                            window.removeEventListener(\"pointerup\", pointerUpCallback1);\n                            window.removeEventListener(\"blur\", pointerUpCallback1);\n                            if (isSelected1) {\n                                window.removeEventListener(\"pointermove\", pointerMoveCallback1, pointerMoveOptions1);\n                            }\n                            this.#hasBeenClicked = false;\n                            if (!this._uiManager.endDragSession()) {\n                                const { isMac: isMac1 } = _util1.FeatureTest.platform;\n                                if (event1.ctrlKey && !isMac1 || event1.shiftKey || event1.metaKey && isMac1) {\n                                    this.parent.toggleSelected(this);\n                                } else {\n                                    this.parent.setSelected(this);\n                                }\n                            }\n                        };\n                        window.addEventListener(\"pointerup\", pointerUpCallback1);\n                        window.addEventListener(\"blur\", pointerUpCallback1);\n                    }\n                    moveInDOM() {\n                        this.parent?.moveEditorInDOM(this);\n                    }\n                    _setParentAndPosition(parent1, x4, y4) {\n                        parent1.changeParent(this);\n                        this.x = x4;\n                        this.y = y4;\n                        this.fixAndSetPosition();\n                    }\n                    getRect(tx2, ty2) {\n                        const scale1 = this.parentScale;\n                        const [pageWidth1, pageHeight1] = this.pageDimensions;\n                        const [pageX1, pageY1] = this.pageTranslation;\n                        const shiftX1 = tx2 / scale1;\n                        const shiftY1 = ty2 / scale1;\n                        const x4 = this.x * pageWidth1;\n                        const y4 = this.y * pageHeight1;\n                        const width2 = this.width * pageWidth1;\n                        const height1 = this.height * pageHeight1;\n                        switch(this.rotation){\n                            case 0:\n                                return [\n                                    x4 + shiftX1 + pageX1,\n                                    pageHeight1 - y4 - shiftY1 - height1 + pageY1,\n                                    x4 + shiftX1 + width2 + pageX1,\n                                    pageHeight1 - y4 - shiftY1 + pageY1\n                                ];\n                            case 90:\n                                return [\n                                    x4 + shiftY1 + pageX1,\n                                    pageHeight1 - y4 + shiftX1 + pageY1,\n                                    x4 + shiftY1 + height1 + pageX1,\n                                    pageHeight1 - y4 + shiftX1 + width2 + pageY1\n                                ];\n                            case 180:\n                                return [\n                                    x4 - shiftX1 - width2 + pageX1,\n                                    pageHeight1 - y4 + shiftY1 + pageY1,\n                                    x4 - shiftX1 + pageX1,\n                                    pageHeight1 - y4 + shiftY1 + height1 + pageY1\n                                ];\n                            case 270:\n                                return [\n                                    x4 - shiftY1 - height1 + pageX1,\n                                    pageHeight1 - y4 - shiftX1 - width2 + pageY1,\n                                    x4 - shiftY1 + pageX1,\n                                    pageHeight1 - y4 - shiftX1 + pageY1\n                                ];\n                            default:\n                                throw new Error(\"Invalid rotation\");\n                        }\n                    }\n                    getRectInCurrentCoords(rect3, pageHeight1) {\n                        const [x11, y11, x21, y21] = rect3;\n                        const width2 = x21 - x11;\n                        const height1 = y21 - y11;\n                        switch(this.rotation){\n                            case 0:\n                                return [\n                                    x11,\n                                    pageHeight1 - y21,\n                                    width2,\n                                    height1\n                                ];\n                            case 90:\n                                return [\n                                    x11,\n                                    pageHeight1 - y11,\n                                    height1,\n                                    width2\n                                ];\n                            case 180:\n                                return [\n                                    x21,\n                                    pageHeight1 - y11,\n                                    width2,\n                                    height1\n                                ];\n                            case 270:\n                                return [\n                                    x21,\n                                    pageHeight1 - y21,\n                                    height1,\n                                    width2\n                                ];\n                            default:\n                                throw new Error(\"Invalid rotation\");\n                        }\n                    }\n                    onceAdded() {}\n                    isEmpty() {\n                        return false;\n                    }\n                    enableEditMode() {\n                        this.#isInEditMode = true;\n                    }\n                    disableEditMode() {\n                        this.#isInEditMode = false;\n                    }\n                    isInEditMode() {\n                        return this.#isInEditMode;\n                    }\n                    shouldGetKeyboardEvents() {\n                        return false;\n                    }\n                    needsToBeRebuilt() {\n                        return this.div && !this.isAttachedToDOM;\n                    }\n                    rebuild() {\n                        this.div?.addEventListener(\"focusin\", this.#boundFocusin);\n                        this.div?.addEventListener(\"focusout\", this.#boundFocusout);\n                    }\n                    serialize(isForCopying1 = false, context1 = null) {\n                        (0, _util1.unreachable)(\"An editor must be serializable\");\n                    }\n                    static deserialize(data1, parent1, uiManager1) {\n                        const editor1 = new this.prototype.constructor({\n                            parent: parent1,\n                            id: parent1.getNextId(),\n                            uiManager: uiManager1\n                        });\n                        editor1.rotation = data1.rotation;\n                        const [pageWidth1, pageHeight1] = editor1.pageDimensions;\n                        const [x4, y4, width2, height1] = editor1.getRectInCurrentCoords(data1.rect, pageHeight1);\n                        editor1.x = x4 / pageWidth1;\n                        editor1.y = y4 / pageHeight1;\n                        editor1.width = width2 / pageWidth1;\n                        editor1.height = height1 / pageHeight1;\n                        return editor1;\n                    }\n                    remove() {\n                        this.div.removeEventListener(\"focusin\", this.#boundFocusin);\n                        this.div.removeEventListener(\"focusout\", this.#boundFocusout);\n                        if (!this.isEmpty()) {\n                            this.commit();\n                        }\n                        if (this.parent) {\n                            this.parent.remove(this);\n                        } else {\n                            this._uiManager.removeEditor(this);\n                        }\n                        this.#altTextButton?.remove();\n                        this.#altTextButton = null;\n                        this.#altTextTooltip = null;\n                    }\n                    get isResizable() {\n                        return false;\n                    }\n                    makeResizable() {\n                        if (this.isResizable) {\n                            this.#createResizers();\n                            this.#resizersDiv.classList.remove(\"hidden\");\n                        }\n                    }\n                    select() {\n                        this.makeResizable();\n                        this.div?.classList.add(\"selectedEditor\");\n                    }\n                    unselect() {\n                        this.#resizersDiv?.classList.add(\"hidden\");\n                        this.div?.classList.remove(\"selectedEditor\");\n                        if (this.div?.contains(document.activeElement)) {\n                            this._uiManager.currentLayer.div.focus();\n                        }\n                    }\n                    updateParams(type1, value1) {}\n                    disableEditing() {\n                        if (this.#altTextButton) {\n                            this.#altTextButton.hidden = true;\n                        }\n                    }\n                    enableEditing() {\n                        if (this.#altTextButton) {\n                            this.#altTextButton.hidden = false;\n                        }\n                    }\n                    enterInEditMode() {}\n                    get contentDiv() {\n                        return this.div;\n                    }\n                    get isEditing() {\n                        return this.#isEditing;\n                    }\n                    set isEditing(value1) {\n                        this.#isEditing = value1;\n                        if (!this.parent) {\n                            return;\n                        }\n                        if (value1) {\n                            this.parent.setSelected(this);\n                            this.parent.setActiveEditor(this);\n                        } else {\n                            this.parent.setActiveEditor(null);\n                        }\n                    }\n                    setAspectRatio(width2, height1) {\n                        this.#keepAspectRatio = true;\n                        const aspectRatio1 = width2 / height1;\n                        const { style: style1 } = this.div;\n                        style1.aspectRatio = aspectRatio1;\n                        style1.height = \"auto\";\n                    }\n                    static get MIN_SIZE() {\n                        return 16;\n                    }\n                }\n                exports1.AnnotationEditor = AnnotationEditor1;\n                class FakeEditor1 extends AnnotationEditor1 {\n                    constructor(params1){\n                        super(params1);\n                        this.annotationElementId = params1.annotationElementId;\n                        this.deleted = true;\n                    }\n                    serialize() {\n                        return {\n                            id: this.annotationElementId,\n                            deleted: true,\n                            pageIndex: this.pageIndex\n                        };\n                    }\n                }\n            /***/ },\n            /* 5 */ /***/ (__unused_webpack_module1, exports1, __w_pdfjs_require__1)=>{\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                exports1.KeyboardManager = exports1.CommandManager = exports1.ColorManager = exports1.AnnotationEditorUIManager = void 0;\n                exports1.bindEvents = bindEvents1;\n                exports1.opacityToHex = opacityToHex1;\n                var _util1 = __w_pdfjs_require__1(1);\n                var _display_utils1 = __w_pdfjs_require__1(6);\n                function bindEvents1(obj1, element1, names1) {\n                    for (const name1 of names1){\n                        element1.addEventListener(name1, obj1[name1].bind(obj1));\n                    }\n                }\n                function opacityToHex1(opacity1) {\n                    return Math.round(Math.min(255, Math.max(1, 255 * opacity1))).toString(16).padStart(2, \"0\");\n                }\n                class IdManager1 {\n                    #id;\n                    getId() {\n                        return `${_util1.AnnotationEditorPrefix}${this.#id++}`;\n                    }\n                    constructor(){\n                        this.#id = 0;\n                    }\n                }\n                class ImageManager1 {\n                    #baseId;\n                    #id;\n                    #cache;\n                    static get _isSVGFittingCanvas() {\n                        const svg1 = `data:image/svg+xml;charset=UTF-8,<svg viewBox=\"0 0 1 1\" width=\"1\" height=\"1\" xmlns=\"http://www.w3.org/2000/svg\"><rect width=\"1\" height=\"1\" style=\"fill:red;\"/></svg>`;\n                        const canvas1 = new OffscreenCanvas(1, 3);\n                        const ctx1 = canvas1.getContext(\"2d\");\n                        const image1 = new Image();\n                        image1.src = svg1;\n                        const promise1 = image1.decode().then(()=>{\n                            ctx1.drawImage(image1, 0, 0, 1, 1, 0, 0, 1, 3);\n                            return new Uint32Array(ctx1.getImageData(0, 0, 1, 1).data.buffer)[0] === 0;\n                        });\n                        return (0, _util1.shadow)(this, \"_isSVGFittingCanvas\", promise1);\n                    }\n                    async #get(key1, rawData1) {\n                        this.#cache ||= new Map();\n                        let data1 = this.#cache.get(key1);\n                        if (data1 === null) {\n                            return null;\n                        }\n                        if (data1?.bitmap) {\n                            data1.refCounter += 1;\n                            return data1;\n                        }\n                        try {\n                            data1 ||= {\n                                bitmap: null,\n                                id: `image_${this.#baseId}_${this.#id++}`,\n                                refCounter: 0,\n                                isSvg: false\n                            };\n                            let image1;\n                            if (typeof rawData1 === \"string\") {\n                                data1.url = rawData1;\n                                const response1 = await fetch(rawData1);\n                                if (!response1.ok) {\n                                    throw new Error(response1.statusText);\n                                }\n                                image1 = await response1.blob();\n                            } else {\n                                image1 = data1.file = rawData1;\n                            }\n                            if (image1.type === \"image/svg+xml\") {\n                                const mustRemoveAspectRatioPromise1 = ImageManager1._isSVGFittingCanvas;\n                                const fileReader1 = new FileReader();\n                                const imageElement1 = new Image();\n                                const imagePromise1 = new Promise((resolve1, reject1)=>{\n                                    imageElement1.onload = ()=>{\n                                        data1.bitmap = imageElement1;\n                                        data1.isSvg = true;\n                                        resolve1();\n                                    };\n                                    fileReader1.onload = async ()=>{\n                                        const url1 = data1.svgUrl = fileReader1.result;\n                                        imageElement1.src = await mustRemoveAspectRatioPromise1 ? `${url1}#svgView(preserveAspectRatio(none))` : url1;\n                                    };\n                                    imageElement1.onerror = fileReader1.onerror = reject1;\n                                });\n                                fileReader1.readAsDataURL(image1);\n                                await imagePromise1;\n                            } else {\n                                data1.bitmap = await createImageBitmap(image1);\n                            }\n                            data1.refCounter = 1;\n                        } catch (e1) {\n                            console.error(e1);\n                            data1 = null;\n                        }\n                        this.#cache.set(key1, data1);\n                        if (data1) {\n                            this.#cache.set(data1.id, data1);\n                        }\n                        return data1;\n                    }\n                    async getFromFile(file1) {\n                        const { lastModified: lastModified1, name: name1, size: size1, type: type1 } = file1;\n                        return this.#get(`${lastModified1}_${name1}_${size1}_${type1}`, file1);\n                    }\n                    async getFromUrl(url1) {\n                        return this.#get(url1, url1);\n                    }\n                    async getFromId(id1) {\n                        this.#cache ||= new Map();\n                        const data1 = this.#cache.get(id1);\n                        if (!data1) {\n                            return null;\n                        }\n                        if (data1.bitmap) {\n                            data1.refCounter += 1;\n                            return data1;\n                        }\n                        if (data1.file) {\n                            return this.getFromFile(data1.file);\n                        }\n                        return this.getFromUrl(data1.url);\n                    }\n                    getSvgUrl(id1) {\n                        const data1 = this.#cache.get(id1);\n                        if (!data1?.isSvg) {\n                            return null;\n                        }\n                        return data1.svgUrl;\n                    }\n                    deleteId(id1) {\n                        this.#cache ||= new Map();\n                        const data1 = this.#cache.get(id1);\n                        if (!data1) {\n                            return;\n                        }\n                        data1.refCounter -= 1;\n                        if (data1.refCounter !== 0) {\n                            return;\n                        }\n                        data1.bitmap = null;\n                    }\n                    isValidId(id1) {\n                        return id1.startsWith(`image_${this.#baseId}_`);\n                    }\n                    constructor(){\n                        this.#baseId = (0, _util1.getUuid)();\n                        this.#id = 0;\n                        this.#cache = null;\n                    }\n                }\n                class CommandManager1 {\n                    #commands;\n                    #locked;\n                    #maxSize;\n                    #position;\n                    constructor(maxSize1 = 128){\n                        this.#commands = [];\n                        this.#locked = false;\n                        this.#position = -1;\n                        this.#maxSize = maxSize1;\n                    }\n                    add({ cmd: cmd1, undo: undo1, mustExec: mustExec1, type: type1 = NaN, overwriteIfSameType: overwriteIfSameType1 = false, keepUndo: keepUndo1 = false }) {\n                        if (mustExec1) {\n                            cmd1();\n                        }\n                        if (this.#locked) {\n                            return;\n                        }\n                        const save1 = {\n                            cmd: cmd1,\n                            undo: undo1,\n                            type: type1\n                        };\n                        if (this.#position === -1) {\n                            if (this.#commands.length > 0) {\n                                this.#commands.length = 0;\n                            }\n                            this.#position = 0;\n                            this.#commands.push(save1);\n                            return;\n                        }\n                        if (overwriteIfSameType1 && this.#commands[this.#position].type === type1) {\n                            if (keepUndo1) {\n                                save1.undo = this.#commands[this.#position].undo;\n                            }\n                            this.#commands[this.#position] = save1;\n                            return;\n                        }\n                        const next1 = this.#position + 1;\n                        if (next1 === this.#maxSize) {\n                            this.#commands.splice(0, 1);\n                        } else {\n                            this.#position = next1;\n                            if (next1 < this.#commands.length) {\n                                this.#commands.splice(next1);\n                            }\n                        }\n                        this.#commands.push(save1);\n                    }\n                    undo() {\n                        if (this.#position === -1) {\n                            return;\n                        }\n                        this.#locked = true;\n                        this.#commands[this.#position].undo();\n                        this.#locked = false;\n                        this.#position -= 1;\n                    }\n                    redo() {\n                        if (this.#position < this.#commands.length - 1) {\n                            this.#position += 1;\n                            this.#locked = true;\n                            this.#commands[this.#position].cmd();\n                            this.#locked = false;\n                        }\n                    }\n                    hasSomethingToUndo() {\n                        return this.#position !== -1;\n                    }\n                    hasSomethingToRedo() {\n                        return this.#position < this.#commands.length - 1;\n                    }\n                    destroy() {\n                        this.#commands = null;\n                    }\n                }\n                exports1.CommandManager = CommandManager1;\n                class KeyboardManager1 {\n                    constructor(callbacks1){\n                        this.buffer = [];\n                        this.callbacks = new Map();\n                        this.allKeys = new Set();\n                        const { isMac: isMac1 } = _util1.FeatureTest.platform;\n                        for (const [keys1, callback1, options1 = {}] of callbacks1){\n                            for (const key1 of keys1){\n                                const isMacKey1 = key1.startsWith(\"mac+\");\n                                if (isMac1 && isMacKey1) {\n                                    this.callbacks.set(key1.slice(4), {\n                                        callback: callback1,\n                                        options: options1\n                                    });\n                                    this.allKeys.add(key1.split(\"+\").at(-1));\n                                } else if (!isMac1 && !isMacKey1) {\n                                    this.callbacks.set(key1, {\n                                        callback: callback1,\n                                        options: options1\n                                    });\n                                    this.allKeys.add(key1.split(\"+\").at(-1));\n                                }\n                            }\n                        }\n                    }\n                    #serialize(event1) {\n                        if (event1.altKey) {\n                            this.buffer.push(\"alt\");\n                        }\n                        if (event1.ctrlKey) {\n                            this.buffer.push(\"ctrl\");\n                        }\n                        if (event1.metaKey) {\n                            this.buffer.push(\"meta\");\n                        }\n                        if (event1.shiftKey) {\n                            this.buffer.push(\"shift\");\n                        }\n                        this.buffer.push(event1.key);\n                        const str1 = this.buffer.join(\"+\");\n                        this.buffer.length = 0;\n                        return str1;\n                    }\n                    exec(self1, event1) {\n                        if (!this.allKeys.has(event1.key)) {\n                            return;\n                        }\n                        const info1 = this.callbacks.get(this.#serialize(event1));\n                        if (!info1) {\n                            return;\n                        }\n                        const { callback: callback1, options: { bubbles: bubbles1 = false, args: args1 = [], checker: checker1 = null } } = info1;\n                        if (checker1 && !checker1(self1, event1)) {\n                            return;\n                        }\n                        callback1.bind(self1, ...args1)();\n                        if (!bubbles1) {\n                            event1.stopPropagation();\n                            event1.preventDefault();\n                        }\n                    }\n                }\n                exports1.KeyboardManager = KeyboardManager1;\n                class ColorManager1 {\n                    static{\n                        this._colorsMapping = new Map([\n                            [\n                                \"CanvasText\",\n                                [\n                                    0,\n                                    0,\n                                    0\n                                ]\n                            ],\n                            [\n                                \"Canvas\",\n                                [\n                                    255,\n                                    255,\n                                    255\n                                ]\n                            ]\n                        ]);\n                    }\n                    get _colors() {\n                        const colors1 = new Map([\n                            [\n                                \"CanvasText\",\n                                null\n                            ],\n                            [\n                                \"Canvas\",\n                                null\n                            ]\n                        ]);\n                        (0, _display_utils1.getColorValues)(colors1);\n                        return (0, _util1.shadow)(this, \"_colors\", colors1);\n                    }\n                    convert(color1) {\n                        const rgb1 = (0, _display_utils1.getRGB)(color1);\n                        if (!window.matchMedia(\"(forced-colors: active)\").matches) {\n                            return rgb1;\n                        }\n                        for (const [name1, RGB1] of this._colors){\n                            if (RGB1.every((x4, i1)=>x4 === rgb1[i1])) {\n                                return ColorManager1._colorsMapping.get(name1);\n                            }\n                        }\n                        return rgb1;\n                    }\n                    getHexCode(name1) {\n                        const rgb1 = this._colors.get(name1);\n                        if (!rgb1) {\n                            return name1;\n                        }\n                        return _util1.Util.makeHexColor(...rgb1);\n                    }\n                }\n                exports1.ColorManager = ColorManager1;\n                class AnnotationEditorUIManager1 {\n                    #activeEditor;\n                    #allEditors;\n                    #allLayers;\n                    #altTextManager;\n                    #annotationStorage;\n                    #commandManager;\n                    #currentPageIndex;\n                    #deletedAnnotationsElementIds;\n                    #draggingEditors;\n                    #editorTypes;\n                    #editorsToRescale;\n                    #filterFactory;\n                    #idManager;\n                    #isEnabled;\n                    #isWaiting;\n                    #lastActiveElement;\n                    #mode;\n                    #selectedEditors;\n                    #pageColors;\n                    #boundBlur;\n                    #boundFocus;\n                    #boundCopy;\n                    #boundCut;\n                    #boundPaste;\n                    #boundKeydown;\n                    #boundOnEditingAction;\n                    #boundOnPageChanging;\n                    #boundOnScaleChanging;\n                    #boundOnRotationChanging;\n                    #previousStates;\n                    #translation;\n                    #translationTimeoutId;\n                    #container;\n                    #viewer;\n                    static{\n                        this.TRANSLATE_SMALL = 1;\n                    }\n                    static{\n                        this.TRANSLATE_BIG = 10;\n                    }\n                    static get _keyboardManager() {\n                        const proto1 = AnnotationEditorUIManager1.prototype;\n                        const arrowChecker1 = (self1)=>{\n                            const { activeElement: activeElement1 } = document;\n                            return activeElement1 && self1.#container.contains(activeElement1) && self1.hasSomethingToControl();\n                        };\n                        const small1 = this.TRANSLATE_SMALL;\n                        const big1 = this.TRANSLATE_BIG;\n                        return (0, _util1.shadow)(this, \"_keyboardManager\", new KeyboardManager1([\n                            [\n                                [\n                                    \"ctrl+a\",\n                                    \"mac+meta+a\"\n                                ],\n                                proto1.selectAll\n                            ],\n                            [\n                                [\n                                    \"ctrl+z\",\n                                    \"mac+meta+z\"\n                                ],\n                                proto1.undo\n                            ],\n                            [\n                                [\n                                    \"ctrl+y\",\n                                    \"ctrl+shift+z\",\n                                    \"mac+meta+shift+z\",\n                                    \"ctrl+shift+Z\",\n                                    \"mac+meta+shift+Z\"\n                                ],\n                                proto1.redo\n                            ],\n                            [\n                                [\n                                    \"Backspace\",\n                                    \"alt+Backspace\",\n                                    \"ctrl+Backspace\",\n                                    \"shift+Backspace\",\n                                    \"mac+Backspace\",\n                                    \"mac+alt+Backspace\",\n                                    \"mac+ctrl+Backspace\",\n                                    \"Delete\",\n                                    \"ctrl+Delete\",\n                                    \"shift+Delete\",\n                                    \"mac+Delete\"\n                                ],\n                                proto1.delete\n                            ],\n                            [\n                                [\n                                    \"Escape\",\n                                    \"mac+Escape\"\n                                ],\n                                proto1.unselectAll\n                            ],\n                            [\n                                [\n                                    \"ArrowLeft\",\n                                    \"mac+ArrowLeft\"\n                                ],\n                                proto1.translateSelectedEditors,\n                                {\n                                    args: [\n                                        -small1,\n                                        0\n                                    ],\n                                    checker: arrowChecker1\n                                }\n                            ],\n                            [\n                                [\n                                    \"ctrl+ArrowLeft\",\n                                    \"mac+shift+ArrowLeft\"\n                                ],\n                                proto1.translateSelectedEditors,\n                                {\n                                    args: [\n                                        -big1,\n                                        0\n                                    ],\n                                    checker: arrowChecker1\n                                }\n                            ],\n                            [\n                                [\n                                    \"ArrowRight\",\n                                    \"mac+ArrowRight\"\n                                ],\n                                proto1.translateSelectedEditors,\n                                {\n                                    args: [\n                                        small1,\n                                        0\n                                    ],\n                                    checker: arrowChecker1\n                                }\n                            ],\n                            [\n                                [\n                                    \"ctrl+ArrowRight\",\n                                    \"mac+shift+ArrowRight\"\n                                ],\n                                proto1.translateSelectedEditors,\n                                {\n                                    args: [\n                                        big1,\n                                        0\n                                    ],\n                                    checker: arrowChecker1\n                                }\n                            ],\n                            [\n                                [\n                                    \"ArrowUp\",\n                                    \"mac+ArrowUp\"\n                                ],\n                                proto1.translateSelectedEditors,\n                                {\n                                    args: [\n                                        0,\n                                        -small1\n                                    ],\n                                    checker: arrowChecker1\n                                }\n                            ],\n                            [\n                                [\n                                    \"ctrl+ArrowUp\",\n                                    \"mac+shift+ArrowUp\"\n                                ],\n                                proto1.translateSelectedEditors,\n                                {\n                                    args: [\n                                        0,\n                                        -big1\n                                    ],\n                                    checker: arrowChecker1\n                                }\n                            ],\n                            [\n                                [\n                                    \"ArrowDown\",\n                                    \"mac+ArrowDown\"\n                                ],\n                                proto1.translateSelectedEditors,\n                                {\n                                    args: [\n                                        0,\n                                        small1\n                                    ],\n                                    checker: arrowChecker1\n                                }\n                            ],\n                            [\n                                [\n                                    \"ctrl+ArrowDown\",\n                                    \"mac+shift+ArrowDown\"\n                                ],\n                                proto1.translateSelectedEditors,\n                                {\n                                    args: [\n                                        0,\n                                        big1\n                                    ],\n                                    checker: arrowChecker1\n                                }\n                            ]\n                        ]));\n                    }\n                    constructor(container1, viewer1, altTextManager1, eventBus1, pdfDocument1, pageColors1){\n                        this.#activeEditor = null;\n                        this.#allEditors = new Map();\n                        this.#allLayers = new Map();\n                        this.#altTextManager = null;\n                        this.#annotationStorage = null;\n                        this.#commandManager = new CommandManager1();\n                        this.#currentPageIndex = 0;\n                        this.#deletedAnnotationsElementIds = new Set();\n                        this.#draggingEditors = null;\n                        this.#editorTypes = null;\n                        this.#editorsToRescale = new Set();\n                        this.#filterFactory = null;\n                        this.#idManager = new IdManager1();\n                        this.#isEnabled = false;\n                        this.#isWaiting = false;\n                        this.#lastActiveElement = null;\n                        this.#mode = _util1.AnnotationEditorType.NONE;\n                        this.#selectedEditors = new Set();\n                        this.#pageColors = null;\n                        this.#boundBlur = this.blur.bind(this);\n                        this.#boundFocus = this.focus.bind(this);\n                        this.#boundCopy = this.copy.bind(this);\n                        this.#boundCut = this.cut.bind(this);\n                        this.#boundPaste = this.paste.bind(this);\n                        this.#boundKeydown = this.keydown.bind(this);\n                        this.#boundOnEditingAction = this.onEditingAction.bind(this);\n                        this.#boundOnPageChanging = this.onPageChanging.bind(this);\n                        this.#boundOnScaleChanging = this.onScaleChanging.bind(this);\n                        this.#boundOnRotationChanging = this.onRotationChanging.bind(this);\n                        this.#previousStates = {\n                            isEditing: false,\n                            isEmpty: true,\n                            hasSomethingToUndo: false,\n                            hasSomethingToRedo: false,\n                            hasSelectedEditor: false\n                        };\n                        this.#translation = [\n                            0,\n                            0\n                        ];\n                        this.#translationTimeoutId = null;\n                        this.#container = null;\n                        this.#viewer = null;\n                        this.#container = container1;\n                        this.#viewer = viewer1;\n                        this.#altTextManager = altTextManager1;\n                        this._eventBus = eventBus1;\n                        this._eventBus._on(\"editingaction\", this.#boundOnEditingAction);\n                        this._eventBus._on(\"pagechanging\", this.#boundOnPageChanging);\n                        this._eventBus._on(\"scalechanging\", this.#boundOnScaleChanging);\n                        this._eventBus._on(\"rotationchanging\", this.#boundOnRotationChanging);\n                        this.#annotationStorage = pdfDocument1.annotationStorage;\n                        this.#filterFactory = pdfDocument1.filterFactory;\n                        this.#pageColors = pageColors1;\n                        this.viewParameters = {\n                            realScale: _display_utils1.PixelsPerInch.PDF_TO_CSS_UNITS,\n                            rotation: 0\n                        };\n                    }\n                    destroy() {\n                        this.#removeKeyboardManager();\n                        this.#removeFocusManager();\n                        this._eventBus._off(\"editingaction\", this.#boundOnEditingAction);\n                        this._eventBus._off(\"pagechanging\", this.#boundOnPageChanging);\n                        this._eventBus._off(\"scalechanging\", this.#boundOnScaleChanging);\n                        this._eventBus._off(\"rotationchanging\", this.#boundOnRotationChanging);\n                        for (const layer1 of this.#allLayers.values()){\n                            layer1.destroy();\n                        }\n                        this.#allLayers.clear();\n                        this.#allEditors.clear();\n                        this.#editorsToRescale.clear();\n                        this.#activeEditor = null;\n                        this.#selectedEditors.clear();\n                        this.#commandManager.destroy();\n                        this.#altTextManager.destroy();\n                    }\n                    get hcmFilter() {\n                        return (0, _util1.shadow)(this, \"hcmFilter\", this.#pageColors ? this.#filterFactory.addHCMFilter(this.#pageColors.foreground, this.#pageColors.background) : \"none\");\n                    }\n                    get direction() {\n                        return (0, _util1.shadow)(this, \"direction\", getComputedStyle(this.#container).direction);\n                    }\n                    editAltText(editor1) {\n                        this.#altTextManager?.editAltText(this, editor1);\n                    }\n                    onPageChanging({ pageNumber: pageNumber1 }) {\n                        this.#currentPageIndex = pageNumber1 - 1;\n                    }\n                    focusMainContainer() {\n                        this.#container.focus();\n                    }\n                    findParent(x4, y4) {\n                        for (const layer1 of this.#allLayers.values()){\n                            const { x: layerX1, y: layerY1, width: width2, height: height1 } = layer1.div.getBoundingClientRect();\n                            if (x4 >= layerX1 && x4 <= layerX1 + width2 && y4 >= layerY1 && y4 <= layerY1 + height1) {\n                                return layer1;\n                            }\n                        }\n                        return null;\n                    }\n                    disableUserSelect(value1 = false) {\n                        this.#viewer.classList.toggle(\"noUserSelect\", value1);\n                    }\n                    addShouldRescale(editor1) {\n                        this.#editorsToRescale.add(editor1);\n                    }\n                    removeShouldRescale(editor1) {\n                        this.#editorsToRescale.delete(editor1);\n                    }\n                    onScaleChanging({ scale: scale1 }) {\n                        this.commitOrRemove();\n                        this.viewParameters.realScale = scale1 * _display_utils1.PixelsPerInch.PDF_TO_CSS_UNITS;\n                        for (const editor1 of this.#editorsToRescale){\n                            editor1.onScaleChanging();\n                        }\n                    }\n                    onRotationChanging({ pagesRotation: pagesRotation1 }) {\n                        this.commitOrRemove();\n                        this.viewParameters.rotation = pagesRotation1;\n                    }\n                    addToAnnotationStorage(editor1) {\n                        if (!editor1.isEmpty() && this.#annotationStorage && !this.#annotationStorage.has(editor1.id)) {\n                            this.#annotationStorage.setValue(editor1.id, editor1);\n                        }\n                    }\n                    #addFocusManager() {\n                        window.addEventListener(\"focus\", this.#boundFocus);\n                        window.addEventListener(\"blur\", this.#boundBlur);\n                    }\n                    #removeFocusManager() {\n                        window.removeEventListener(\"focus\", this.#boundFocus);\n                        window.removeEventListener(\"blur\", this.#boundBlur);\n                    }\n                    blur() {\n                        if (!this.hasSelection) {\n                            return;\n                        }\n                        const { activeElement: activeElement1 } = document;\n                        for (const editor1 of this.#selectedEditors){\n                            if (editor1.div.contains(activeElement1)) {\n                                this.#lastActiveElement = [\n                                    editor1,\n                                    activeElement1\n                                ];\n                                editor1._focusEventsAllowed = false;\n                                break;\n                            }\n                        }\n                    }\n                    focus() {\n                        if (!this.#lastActiveElement) {\n                            return;\n                        }\n                        const [lastEditor1, lastActiveElement1] = this.#lastActiveElement;\n                        this.#lastActiveElement = null;\n                        lastActiveElement1.addEventListener(\"focusin\", ()=>{\n                            lastEditor1._focusEventsAllowed = true;\n                        }, {\n                            once: true\n                        });\n                        lastActiveElement1.focus();\n                    }\n                    #addKeyboardManager() {\n                        window.addEventListener(\"keydown\", this.#boundKeydown, {\n                            capture: true\n                        });\n                    }\n                    #removeKeyboardManager() {\n                        window.removeEventListener(\"keydown\", this.#boundKeydown, {\n                            capture: true\n                        });\n                    }\n                    #addCopyPasteListeners() {\n                        document.addEventListener(\"copy\", this.#boundCopy);\n                        document.addEventListener(\"cut\", this.#boundCut);\n                        document.addEventListener(\"paste\", this.#boundPaste);\n                    }\n                    #removeCopyPasteListeners() {\n                        document.removeEventListener(\"copy\", this.#boundCopy);\n                        document.removeEventListener(\"cut\", this.#boundCut);\n                        document.removeEventListener(\"paste\", this.#boundPaste);\n                    }\n                    addEditListeners() {\n                        this.#addKeyboardManager();\n                        this.#addCopyPasteListeners();\n                    }\n                    removeEditListeners() {\n                        this.#removeKeyboardManager();\n                        this.#removeCopyPasteListeners();\n                    }\n                    copy(event1) {\n                        event1.preventDefault();\n                        this.#activeEditor?.commitOrRemove();\n                        if (!this.hasSelection) {\n                            return;\n                        }\n                        const editors1 = [];\n                        for (const editor1 of this.#selectedEditors){\n                            const serialized1 = editor1.serialize(true);\n                            if (serialized1) {\n                                editors1.push(serialized1);\n                            }\n                        }\n                        if (editors1.length === 0) {\n                            return;\n                        }\n                        event1.clipboardData.setData(\"application/pdfjs\", JSON.stringify(editors1));\n                    }\n                    cut(event1) {\n                        this.copy(event1);\n                        this.delete();\n                    }\n                    paste(event1) {\n                        event1.preventDefault();\n                        const { clipboardData: clipboardData1 } = event1;\n                        for (const item1 of clipboardData1.items){\n                            for (const editorType1 of this.#editorTypes){\n                                if (editorType1.isHandlingMimeForPasting(item1.type)) {\n                                    editorType1.paste(item1, this.currentLayer);\n                                    return;\n                                }\n                            }\n                        }\n                        let data1 = clipboardData1.getData(\"application/pdfjs\");\n                        if (!data1) {\n                            return;\n                        }\n                        try {\n                            data1 = JSON.parse(data1);\n                        } catch (ex1) {\n                            (0, _util1.warn)(`paste: \"${ex1.message}\".`);\n                            return;\n                        }\n                        if (!Array.isArray(data1)) {\n                            return;\n                        }\n                        this.unselectAll();\n                        const layer1 = this.currentLayer;\n                        try {\n                            const newEditors1 = [];\n                            for (const editor1 of data1){\n                                const deserializedEditor1 = layer1.deserialize(editor1);\n                                if (!deserializedEditor1) {\n                                    return;\n                                }\n                                newEditors1.push(deserializedEditor1);\n                            }\n                            const cmd1 = ()=>{\n                                for (const editor1 of newEditors1){\n                                    this.#addEditorToLayer(editor1);\n                                }\n                                this.#selectEditors(newEditors1);\n                            };\n                            const undo1 = ()=>{\n                                for (const editor1 of newEditors1){\n                                    editor1.remove();\n                                }\n                            };\n                            this.addCommands({\n                                cmd: cmd1,\n                                undo: undo1,\n                                mustExec: true\n                            });\n                        } catch (ex1) {\n                            (0, _util1.warn)(`paste: \"${ex1.message}\".`);\n                        }\n                    }\n                    keydown(event1) {\n                        if (!this.getActive()?.shouldGetKeyboardEvents()) {\n                            AnnotationEditorUIManager1._keyboardManager.exec(this, event1);\n                        }\n                    }\n                    onEditingAction(details1) {\n                        if ([\n                            \"undo\",\n                            \"redo\",\n                            \"delete\",\n                            \"selectAll\"\n                        ].includes(details1.name)) {\n                            this[details1.name]();\n                        }\n                    }\n                    #dispatchUpdateStates(details1) {\n                        const hasChanged1 = Object.entries(details1).some(([key1, value1])=>this.#previousStates[key1] !== value1);\n                        if (hasChanged1) {\n                            this._eventBus.dispatch(\"annotationeditorstateschanged\", {\n                                source: this,\n                                details: Object.assign(this.#previousStates, details1)\n                            });\n                        }\n                    }\n                    #dispatchUpdateUI(details1) {\n                        this._eventBus.dispatch(\"annotationeditorparamschanged\", {\n                            source: this,\n                            details: details1\n                        });\n                    }\n                    setEditingState(isEditing1) {\n                        if (isEditing1) {\n                            this.#addFocusManager();\n                            this.#addKeyboardManager();\n                            this.#addCopyPasteListeners();\n                            this.#dispatchUpdateStates({\n                                isEditing: this.#mode !== _util1.AnnotationEditorType.NONE,\n                                isEmpty: this.#isEmpty(),\n                                hasSomethingToUndo: this.#commandManager.hasSomethingToUndo(),\n                                hasSomethingToRedo: this.#commandManager.hasSomethingToRedo(),\n                                hasSelectedEditor: false\n                            });\n                        } else {\n                            this.#removeFocusManager();\n                            this.#removeKeyboardManager();\n                            this.#removeCopyPasteListeners();\n                            this.#dispatchUpdateStates({\n                                isEditing: false\n                            });\n                            this.disableUserSelect(false);\n                        }\n                    }\n                    registerEditorTypes(types1) {\n                        if (this.#editorTypes) {\n                            return;\n                        }\n                        this.#editorTypes = types1;\n                        for (const editorType1 of this.#editorTypes){\n                            this.#dispatchUpdateUI(editorType1.defaultPropertiesToUpdate);\n                        }\n                    }\n                    getId() {\n                        return this.#idManager.getId();\n                    }\n                    get currentLayer() {\n                        return this.#allLayers.get(this.#currentPageIndex);\n                    }\n                    getLayer(pageIndex1) {\n                        return this.#allLayers.get(pageIndex1);\n                    }\n                    get currentPageIndex() {\n                        return this.#currentPageIndex;\n                    }\n                    addLayer(layer1) {\n                        this.#allLayers.set(layer1.pageIndex, layer1);\n                        if (this.#isEnabled) {\n                            layer1.enable();\n                        } else {\n                            layer1.disable();\n                        }\n                    }\n                    removeLayer(layer1) {\n                        this.#allLayers.delete(layer1.pageIndex);\n                    }\n                    updateMode(mode1, editId1 = null) {\n                        if (this.#mode === mode1) {\n                            return;\n                        }\n                        this.#mode = mode1;\n                        if (mode1 === _util1.AnnotationEditorType.NONE) {\n                            this.setEditingState(false);\n                            this.#disableAll();\n                            return;\n                        }\n                        this.setEditingState(true);\n                        this.#enableAll();\n                        this.unselectAll();\n                        for (const layer1 of this.#allLayers.values()){\n                            layer1.updateMode(mode1);\n                        }\n                        if (!editId1) {\n                            return;\n                        }\n                        for (const editor1 of this.#allEditors.values()){\n                            if (editor1.annotationElementId === editId1) {\n                                this.setSelected(editor1);\n                                editor1.enterInEditMode();\n                                break;\n                            }\n                        }\n                    }\n                    updateToolbar(mode1) {\n                        if (mode1 === this.#mode) {\n                            return;\n                        }\n                        this._eventBus.dispatch(\"switchannotationeditormode\", {\n                            source: this,\n                            mode: mode1\n                        });\n                    }\n                    updateParams(type1, value1) {\n                        if (!this.#editorTypes) {\n                            return;\n                        }\n                        if (type1 === _util1.AnnotationEditorParamsType.CREATE) {\n                            this.currentLayer.addNewEditor(type1);\n                            return;\n                        }\n                        for (const editor1 of this.#selectedEditors){\n                            editor1.updateParams(type1, value1);\n                        }\n                        for (const editorType1 of this.#editorTypes){\n                            editorType1.updateDefaultParams(type1, value1);\n                        }\n                    }\n                    enableWaiting(mustWait1 = false) {\n                        if (this.#isWaiting === mustWait1) {\n                            return;\n                        }\n                        this.#isWaiting = mustWait1;\n                        for (const layer1 of this.#allLayers.values()){\n                            if (mustWait1) {\n                                layer1.disableClick();\n                            } else {\n                                layer1.enableClick();\n                            }\n                            layer1.div.classList.toggle(\"waiting\", mustWait1);\n                        }\n                    }\n                    #enableAll() {\n                        if (!this.#isEnabled) {\n                            this.#isEnabled = true;\n                            for (const layer1 of this.#allLayers.values()){\n                                layer1.enable();\n                            }\n                        }\n                    }\n                    #disableAll() {\n                        this.unselectAll();\n                        if (this.#isEnabled) {\n                            this.#isEnabled = false;\n                            for (const layer1 of this.#allLayers.values()){\n                                layer1.disable();\n                            }\n                        }\n                    }\n                    getEditors(pageIndex1) {\n                        const editors1 = [];\n                        for (const editor1 of this.#allEditors.values()){\n                            if (editor1.pageIndex === pageIndex1) {\n                                editors1.push(editor1);\n                            }\n                        }\n                        return editors1;\n                    }\n                    getEditor(id1) {\n                        return this.#allEditors.get(id1);\n                    }\n                    addEditor(editor1) {\n                        this.#allEditors.set(editor1.id, editor1);\n                    }\n                    removeEditor(editor1) {\n                        this.#allEditors.delete(editor1.id);\n                        this.unselect(editor1);\n                        if (!editor1.annotationElementId || !this.#deletedAnnotationsElementIds.has(editor1.annotationElementId)) {\n                            this.#annotationStorage?.remove(editor1.id);\n                        }\n                    }\n                    addDeletedAnnotationElement(editor1) {\n                        this.#deletedAnnotationsElementIds.add(editor1.annotationElementId);\n                        editor1.deleted = true;\n                    }\n                    isDeletedAnnotationElement(annotationElementId1) {\n                        return this.#deletedAnnotationsElementIds.has(annotationElementId1);\n                    }\n                    removeDeletedAnnotationElement(editor1) {\n                        this.#deletedAnnotationsElementIds.delete(editor1.annotationElementId);\n                        editor1.deleted = false;\n                    }\n                    #addEditorToLayer(editor1) {\n                        const layer1 = this.#allLayers.get(editor1.pageIndex);\n                        if (layer1) {\n                            layer1.addOrRebuild(editor1);\n                        } else {\n                            this.addEditor(editor1);\n                        }\n                    }\n                    setActiveEditor(editor1) {\n                        if (this.#activeEditor === editor1) {\n                            return;\n                        }\n                        this.#activeEditor = editor1;\n                        if (editor1) {\n                            this.#dispatchUpdateUI(editor1.propertiesToUpdate);\n                        }\n                    }\n                    toggleSelected(editor1) {\n                        if (this.#selectedEditors.has(editor1)) {\n                            this.#selectedEditors.delete(editor1);\n                            editor1.unselect();\n                            this.#dispatchUpdateStates({\n                                hasSelectedEditor: this.hasSelection\n                            });\n                            return;\n                        }\n                        this.#selectedEditors.add(editor1);\n                        editor1.select();\n                        this.#dispatchUpdateUI(editor1.propertiesToUpdate);\n                        this.#dispatchUpdateStates({\n                            hasSelectedEditor: true\n                        });\n                    }\n                    setSelected(editor1) {\n                        for (const ed1 of this.#selectedEditors){\n                            if (ed1 !== editor1) {\n                                ed1.unselect();\n                            }\n                        }\n                        this.#selectedEditors.clear();\n                        this.#selectedEditors.add(editor1);\n                        editor1.select();\n                        this.#dispatchUpdateUI(editor1.propertiesToUpdate);\n                        this.#dispatchUpdateStates({\n                            hasSelectedEditor: true\n                        });\n                    }\n                    isSelected(editor1) {\n                        return this.#selectedEditors.has(editor1);\n                    }\n                    unselect(editor1) {\n                        editor1.unselect();\n                        this.#selectedEditors.delete(editor1);\n                        this.#dispatchUpdateStates({\n                            hasSelectedEditor: this.hasSelection\n                        });\n                    }\n                    get hasSelection() {\n                        return this.#selectedEditors.size !== 0;\n                    }\n                    undo() {\n                        this.#commandManager.undo();\n                        this.#dispatchUpdateStates({\n                            hasSomethingToUndo: this.#commandManager.hasSomethingToUndo(),\n                            hasSomethingToRedo: true,\n                            isEmpty: this.#isEmpty()\n                        });\n                    }\n                    redo() {\n                        this.#commandManager.redo();\n                        this.#dispatchUpdateStates({\n                            hasSomethingToUndo: true,\n                            hasSomethingToRedo: this.#commandManager.hasSomethingToRedo(),\n                            isEmpty: this.#isEmpty()\n                        });\n                    }\n                    addCommands(params1) {\n                        this.#commandManager.add(params1);\n                        this.#dispatchUpdateStates({\n                            hasSomethingToUndo: true,\n                            hasSomethingToRedo: false,\n                            isEmpty: this.#isEmpty()\n                        });\n                    }\n                    #isEmpty() {\n                        if (this.#allEditors.size === 0) {\n                            return true;\n                        }\n                        if (this.#allEditors.size === 1) {\n                            for (const editor1 of this.#allEditors.values()){\n                                return editor1.isEmpty();\n                            }\n                        }\n                        return false;\n                    }\n                    delete() {\n                        this.commitOrRemove();\n                        if (!this.hasSelection) {\n                            return;\n                        }\n                        const editors1 = [\n                            ...this.#selectedEditors\n                        ];\n                        const cmd1 = ()=>{\n                            for (const editor1 of editors1){\n                                editor1.remove();\n                            }\n                        };\n                        const undo1 = ()=>{\n                            for (const editor1 of editors1){\n                                this.#addEditorToLayer(editor1);\n                            }\n                        };\n                        this.addCommands({\n                            cmd: cmd1,\n                            undo: undo1,\n                            mustExec: true\n                        });\n                    }\n                    commitOrRemove() {\n                        this.#activeEditor?.commitOrRemove();\n                    }\n                    hasSomethingToControl() {\n                        return this.#activeEditor || this.hasSelection;\n                    }\n                    #selectEditors(editors1) {\n                        this.#selectedEditors.clear();\n                        for (const editor1 of editors1){\n                            if (editor1.isEmpty()) {\n                                continue;\n                            }\n                            this.#selectedEditors.add(editor1);\n                            editor1.select();\n                        }\n                        this.#dispatchUpdateStates({\n                            hasSelectedEditor: true\n                        });\n                    }\n                    selectAll() {\n                        for (const editor1 of this.#selectedEditors){\n                            editor1.commit();\n                        }\n                        this.#selectEditors(this.#allEditors.values());\n                    }\n                    unselectAll() {\n                        if (this.#activeEditor) {\n                            this.#activeEditor.commitOrRemove();\n                            return;\n                        }\n                        if (!this.hasSelection) {\n                            return;\n                        }\n                        for (const editor1 of this.#selectedEditors){\n                            editor1.unselect();\n                        }\n                        this.#selectedEditors.clear();\n                        this.#dispatchUpdateStates({\n                            hasSelectedEditor: false\n                        });\n                    }\n                    translateSelectedEditors(x4, y4, noCommit1 = false) {\n                        if (!noCommit1) {\n                            this.commitOrRemove();\n                        }\n                        if (!this.hasSelection) {\n                            return;\n                        }\n                        this.#translation[0] += x4;\n                        this.#translation[1] += y4;\n                        const [totalX1, totalY1] = this.#translation;\n                        const editors1 = [\n                            ...this.#selectedEditors\n                        ];\n                        const TIME_TO_WAIT1 = 1000;\n                        if (this.#translationTimeoutId) {\n                            clearTimeout(this.#translationTimeoutId);\n                        }\n                        this.#translationTimeoutId = setTimeout(()=>{\n                            this.#translationTimeoutId = null;\n                            this.#translation[0] = this.#translation[1] = 0;\n                            this.addCommands({\n                                cmd: ()=>{\n                                    for (const editor1 of editors1){\n                                        if (this.#allEditors.has(editor1.id)) {\n                                            editor1.translateInPage(totalX1, totalY1);\n                                        }\n                                    }\n                                },\n                                undo: ()=>{\n                                    for (const editor1 of editors1){\n                                        if (this.#allEditors.has(editor1.id)) {\n                                            editor1.translateInPage(-totalX1, -totalY1);\n                                        }\n                                    }\n                                },\n                                mustExec: false\n                            });\n                        }, TIME_TO_WAIT1);\n                        for (const editor1 of editors1){\n                            editor1.translateInPage(x4, y4);\n                        }\n                    }\n                    setUpDragSession() {\n                        if (!this.hasSelection) {\n                            return;\n                        }\n                        this.disableUserSelect(true);\n                        this.#draggingEditors = new Map();\n                        for (const editor1 of this.#selectedEditors){\n                            this.#draggingEditors.set(editor1, {\n                                savedX: editor1.x,\n                                savedY: editor1.y,\n                                savedPageIndex: editor1.pageIndex,\n                                newX: 0,\n                                newY: 0,\n                                newPageIndex: -1\n                            });\n                        }\n                    }\n                    endDragSession() {\n                        if (!this.#draggingEditors) {\n                            return false;\n                        }\n                        this.disableUserSelect(false);\n                        const map1 = this.#draggingEditors;\n                        this.#draggingEditors = null;\n                        let mustBeAddedInUndoStack1 = false;\n                        for (const [{ x: x4, y: y4, pageIndex: pageIndex1 }, value1] of map1){\n                            value1.newX = x4;\n                            value1.newY = y4;\n                            value1.newPageIndex = pageIndex1;\n                            mustBeAddedInUndoStack1 ||= x4 !== value1.savedX || y4 !== value1.savedY || pageIndex1 !== value1.savedPageIndex;\n                        }\n                        if (!mustBeAddedInUndoStack1) {\n                            return false;\n                        }\n                        const move1 = (editor1, x4, y4, pageIndex1)=>{\n                            if (this.#allEditors.has(editor1.id)) {\n                                const parent1 = this.#allLayers.get(pageIndex1);\n                                if (parent1) {\n                                    editor1._setParentAndPosition(parent1, x4, y4);\n                                } else {\n                                    editor1.pageIndex = pageIndex1;\n                                    editor1.x = x4;\n                                    editor1.y = y4;\n                                }\n                            }\n                        };\n                        this.addCommands({\n                            cmd: ()=>{\n                                for (const [editor1, { newX: newX1, newY: newY1, newPageIndex: newPageIndex1 }] of map1){\n                                    move1(editor1, newX1, newY1, newPageIndex1);\n                                }\n                            },\n                            undo: ()=>{\n                                for (const [editor1, { savedX: savedX1, savedY: savedY1, savedPageIndex: savedPageIndex1 }] of map1){\n                                    move1(editor1, savedX1, savedY1, savedPageIndex1);\n                                }\n                            },\n                            mustExec: true\n                        });\n                        return true;\n                    }\n                    dragSelectedEditors(tx2, ty2) {\n                        if (!this.#draggingEditors) {\n                            return;\n                        }\n                        for (const editor1 of this.#draggingEditors.keys()){\n                            editor1.drag(tx2, ty2);\n                        }\n                    }\n                    rebuild(editor1) {\n                        if (editor1.parent === null) {\n                            const parent1 = this.getLayer(editor1.pageIndex);\n                            if (parent1) {\n                                parent1.changeParent(editor1);\n                                parent1.addOrRebuild(editor1);\n                            } else {\n                                this.addEditor(editor1);\n                                this.addToAnnotationStorage(editor1);\n                                editor1.rebuild();\n                            }\n                        } else {\n                            editor1.parent.addOrRebuild(editor1);\n                        }\n                    }\n                    isActive(editor1) {\n                        return this.#activeEditor === editor1;\n                    }\n                    getActive() {\n                        return this.#activeEditor;\n                    }\n                    getMode() {\n                        return this.#mode;\n                    }\n                    get imageManager() {\n                        return (0, _util1.shadow)(this, \"imageManager\", new ImageManager1());\n                    }\n                }\n                exports1.AnnotationEditorUIManager = AnnotationEditorUIManager1;\n            /***/ },\n            /* 6 */ /***/ (__unused_webpack_module1, exports1, __w_pdfjs_require__1)=>{\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                exports1.StatTimer = exports1.RenderingCancelledException = exports1.PixelsPerInch = exports1.PageViewport = exports1.PDFDateString = exports1.DOMStandardFontDataFactory = exports1.DOMSVGFactory = exports1.DOMFilterFactory = exports1.DOMCanvasFactory = exports1.DOMCMapReaderFactory = void 0;\n                exports1.deprecated = deprecated1;\n                exports1.getColorValues = getColorValues1;\n                exports1.getCurrentTransform = getCurrentTransform1;\n                exports1.getCurrentTransformInverse = getCurrentTransformInverse1;\n                exports1.getFilenameFromUrl = getFilenameFromUrl1;\n                exports1.getPdfFilenameFromUrl = getPdfFilenameFromUrl1;\n                exports1.getRGB = getRGB1;\n                exports1.getXfaPageViewport = getXfaPageViewport1;\n                exports1.isDataScheme = isDataScheme1;\n                exports1.isPdfFile = isPdfFile1;\n                exports1.isValidFetchUrl = isValidFetchUrl1;\n                exports1.loadScript = loadScript1;\n                exports1.noContextMenu = noContextMenu1;\n                exports1.setLayerDimensions = setLayerDimensions1;\n                var _base_factory1 = __w_pdfjs_require__1(7);\n                var _util1 = __w_pdfjs_require__1(1);\n                const SVG_NS1 = \"http://www.w3.org/2000/svg\";\n                class PixelsPerInch1 {\n                    static{\n                        this.CSS = 96.0;\n                    }\n                    static{\n                        this.PDF = 72.0;\n                    }\n                    static{\n                        this.PDF_TO_CSS_UNITS = this.CSS / this.PDF;\n                    }\n                }\n                exports1.PixelsPerInch = PixelsPerInch1;\n                class DOMFilterFactory1 extends _base_factory1.BaseFilterFactory {\n                    #_cache;\n                    #_defs;\n                    #docId;\n                    #document;\n                    #hcmFilter;\n                    #hcmKey;\n                    #hcmUrl;\n                    #hcmHighlightFilter;\n                    #hcmHighlightKey;\n                    #hcmHighlightUrl;\n                    #id;\n                    constructor({ docId: docId1, ownerDocument: ownerDocument1 = globalThis.document } = {}){\n                        super();\n                        this.#id = 0;\n                        this.#docId = docId1;\n                        this.#document = ownerDocument1;\n                    }\n                    get #cache() {\n                        return this.#_cache ||= new Map();\n                    }\n                    get #defs() {\n                        if (!this.#_defs) {\n                            const div1 = this.#document.createElement(\"div\");\n                            const { style: style1 } = div1;\n                            style1.visibility = \"hidden\";\n                            style1.contain = \"strict\";\n                            style1.width = style1.height = 0;\n                            style1.position = \"absolute\";\n                            style1.top = style1.left = 0;\n                            style1.zIndex = -1;\n                            const svg1 = this.#document.createElementNS(SVG_NS1, \"svg\");\n                            svg1.setAttribute(\"width\", 0);\n                            svg1.setAttribute(\"height\", 0);\n                            this.#_defs = this.#document.createElementNS(SVG_NS1, \"defs\");\n                            div1.append(svg1);\n                            svg1.append(this.#_defs);\n                            this.#document.body.append(div1);\n                        }\n                        return this.#_defs;\n                    }\n                    addFilter(maps1) {\n                        if (!maps1) {\n                            return \"none\";\n                        }\n                        let value1 = this.#cache.get(maps1);\n                        if (value1) {\n                            return value1;\n                        }\n                        let tableR1, tableG1, tableB1, key1;\n                        if (maps1.length === 1) {\n                            const mapR1 = maps1[0];\n                            const buffer1 = new Array(256);\n                            for(let i1 = 0; i1 < 256; i1++){\n                                buffer1[i1] = mapR1[i1] / 255;\n                            }\n                            key1 = tableR1 = tableG1 = tableB1 = buffer1.join(\",\");\n                        } else {\n                            const [mapR1, mapG1, mapB1] = maps1;\n                            const bufferR1 = new Array(256);\n                            const bufferG1 = new Array(256);\n                            const bufferB1 = new Array(256);\n                            for(let i1 = 0; i1 < 256; i1++){\n                                bufferR1[i1] = mapR1[i1] / 255;\n                                bufferG1[i1] = mapG1[i1] / 255;\n                                bufferB1[i1] = mapB1[i1] / 255;\n                            }\n                            tableR1 = bufferR1.join(\",\");\n                            tableG1 = bufferG1.join(\",\");\n                            tableB1 = bufferB1.join(\",\");\n                            key1 = `${tableR1}${tableG1}${tableB1}`;\n                        }\n                        value1 = this.#cache.get(key1);\n                        if (value1) {\n                            this.#cache.set(maps1, value1);\n                            return value1;\n                        }\n                        const id1 = `g_${this.#docId}_transfer_map_${this.#id++}`;\n                        const url1 = `url(#${id1})`;\n                        this.#cache.set(maps1, url1);\n                        this.#cache.set(key1, url1);\n                        const filter1 = this.#createFilter(id1);\n                        this.#addTransferMapConversion(tableR1, tableG1, tableB1, filter1);\n                        return url1;\n                    }\n                    addHCMFilter(fgColor1, bgColor1) {\n                        const key1 = `${fgColor1}-${bgColor1}`;\n                        if (this.#hcmKey === key1) {\n                            return this.#hcmUrl;\n                        }\n                        this.#hcmKey = key1;\n                        this.#hcmUrl = \"none\";\n                        this.#hcmFilter?.remove();\n                        if (!fgColor1 || !bgColor1) {\n                            return this.#hcmUrl;\n                        }\n                        const fgRGB1 = this.#getRGB(fgColor1);\n                        fgColor1 = _util1.Util.makeHexColor(...fgRGB1);\n                        const bgRGB1 = this.#getRGB(bgColor1);\n                        bgColor1 = _util1.Util.makeHexColor(...bgRGB1);\n                        this.#defs.style.color = \"\";\n                        if (fgColor1 === \"#000000\" && bgColor1 === \"#ffffff\" || fgColor1 === bgColor1) {\n                            return this.#hcmUrl;\n                        }\n                        const map1 = new Array(256);\n                        for(let i1 = 0; i1 <= 255; i1++){\n                            const x4 = i1 / 255;\n                            map1[i1] = x4 <= 0.03928 ? x4 / 12.92 : ((x4 + 0.055) / 1.055) ** 2.4;\n                        }\n                        const table1 = map1.join(\",\");\n                        const id1 = `g_${this.#docId}_hcm_filter`;\n                        const filter1 = this.#hcmHighlightFilter = this.#createFilter(id1);\n                        this.#addTransferMapConversion(table1, table1, table1, filter1);\n                        this.#addGrayConversion(filter1);\n                        const getSteps1 = (c4, n1)=>{\n                            const start1 = fgRGB1[c4] / 255;\n                            const end1 = bgRGB1[c4] / 255;\n                            const arr3 = new Array(n1 + 1);\n                            for(let i1 = 0; i1 <= n1; i1++){\n                                arr3[i1] = start1 + i1 / n1 * (end1 - start1);\n                            }\n                            return arr3.join(\",\");\n                        };\n                        this.#addTransferMapConversion(getSteps1(0, 5), getSteps1(1, 5), getSteps1(2, 5), filter1);\n                        this.#hcmUrl = `url(#${id1})`;\n                        return this.#hcmUrl;\n                    }\n                    addHighlightHCMFilter(fgColor1, bgColor1, newFgColor1, newBgColor1) {\n                        const key1 = `${fgColor1}-${bgColor1}-${newFgColor1}-${newBgColor1}`;\n                        if (this.#hcmHighlightKey === key1) {\n                            return this.#hcmHighlightUrl;\n                        }\n                        this.#hcmHighlightKey = key1;\n                        this.#hcmHighlightUrl = \"none\";\n                        this.#hcmHighlightFilter?.remove();\n                        if (!fgColor1 || !bgColor1) {\n                            return this.#hcmHighlightUrl;\n                        }\n                        const [fgRGB1, bgRGB1] = [\n                            fgColor1,\n                            bgColor1\n                        ].map(this.#getRGB.bind(this));\n                        let fgGray1 = Math.round(0.2126 * fgRGB1[0] + 0.7152 * fgRGB1[1] + 0.0722 * fgRGB1[2]);\n                        let bgGray1 = Math.round(0.2126 * bgRGB1[0] + 0.7152 * bgRGB1[1] + 0.0722 * bgRGB1[2]);\n                        let [newFgRGB1, newBgRGB1] = [\n                            newFgColor1,\n                            newBgColor1\n                        ].map(this.#getRGB.bind(this));\n                        if (bgGray1 < fgGray1) {\n                            [fgGray1, bgGray1, newFgRGB1, newBgRGB1] = [\n                                bgGray1,\n                                fgGray1,\n                                newBgRGB1,\n                                newFgRGB1\n                            ];\n                        }\n                        this.#defs.style.color = \"\";\n                        const getSteps1 = (fg1, bg1, n1)=>{\n                            const arr3 = new Array(256);\n                            const step1 = (bgGray1 - fgGray1) / n1;\n                            const newStart1 = fg1 / 255;\n                            const newStep1 = (bg1 - fg1) / (255 * n1);\n                            let prev1 = 0;\n                            for(let i1 = 0; i1 <= n1; i1++){\n                                const k3 = Math.round(fgGray1 + i1 * step1);\n                                const value1 = newStart1 + i1 * newStep1;\n                                for(let j1 = prev1; j1 <= k3; j1++){\n                                    arr3[j1] = value1;\n                                }\n                                prev1 = k3 + 1;\n                            }\n                            for(let i1 = prev1; i1 < 256; i1++){\n                                arr3[i1] = arr3[prev1 - 1];\n                            }\n                            return arr3.join(\",\");\n                        };\n                        const id1 = `g_${this.#docId}_hcm_highlight_filter`;\n                        const filter1 = this.#hcmHighlightFilter = this.#createFilter(id1);\n                        this.#addGrayConversion(filter1);\n                        this.#addTransferMapConversion(getSteps1(newFgRGB1[0], newBgRGB1[0], 5), getSteps1(newFgRGB1[1], newBgRGB1[1], 5), getSteps1(newFgRGB1[2], newBgRGB1[2], 5), filter1);\n                        this.#hcmHighlightUrl = `url(#${id1})`;\n                        return this.#hcmHighlightUrl;\n                    }\n                    destroy(keepHCM1 = false) {\n                        if (keepHCM1 && (this.#hcmUrl || this.#hcmHighlightUrl)) {\n                            return;\n                        }\n                        if (this.#_defs) {\n                            this.#_defs.parentNode.parentNode.remove();\n                            this.#_defs = null;\n                        }\n                        if (this.#_cache) {\n                            this.#_cache.clear();\n                            this.#_cache = null;\n                        }\n                        this.#id = 0;\n                    }\n                    #addGrayConversion(filter1) {\n                        const feColorMatrix1 = this.#document.createElementNS(SVG_NS1, \"feColorMatrix\");\n                        feColorMatrix1.setAttribute(\"type\", \"matrix\");\n                        feColorMatrix1.setAttribute(\"values\", \"0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0 0 0 1 0\");\n                        filter1.append(feColorMatrix1);\n                    }\n                    #createFilter(id1) {\n                        const filter1 = this.#document.createElementNS(SVG_NS1, \"filter\");\n                        filter1.setAttribute(\"color-interpolation-filters\", \"sRGB\");\n                        filter1.setAttribute(\"id\", id1);\n                        this.#defs.append(filter1);\n                        return filter1;\n                    }\n                    #appendFeFunc(feComponentTransfer1, func1, table1) {\n                        const feFunc1 = this.#document.createElementNS(SVG_NS1, func1);\n                        feFunc1.setAttribute(\"type\", \"discrete\");\n                        feFunc1.setAttribute(\"tableValues\", table1);\n                        feComponentTransfer1.append(feFunc1);\n                    }\n                    #addTransferMapConversion(rTable1, gTable1, bTable1, filter1) {\n                        const feComponentTransfer1 = this.#document.createElementNS(SVG_NS1, \"feComponentTransfer\");\n                        filter1.append(feComponentTransfer1);\n                        this.#appendFeFunc(feComponentTransfer1, \"feFuncR\", rTable1);\n                        this.#appendFeFunc(feComponentTransfer1, \"feFuncG\", gTable1);\n                        this.#appendFeFunc(feComponentTransfer1, \"feFuncB\", bTable1);\n                    }\n                    #getRGB(color1) {\n                        this.#defs.style.color = color1;\n                        return getRGB1(getComputedStyle(this.#defs).getPropertyValue(\"color\"));\n                    }\n                }\n                exports1.DOMFilterFactory = DOMFilterFactory1;\n                class DOMCanvasFactory1 extends _base_factory1.BaseCanvasFactory {\n                    constructor({ ownerDocument: ownerDocument1 = globalThis.document } = {}){\n                        super();\n                        this._document = ownerDocument1;\n                    }\n                    _createCanvas(width2, height1) {\n                        const canvas1 = this._document.createElement(\"canvas\");\n                        canvas1.width = width2;\n                        canvas1.height = height1;\n                        return canvas1;\n                    }\n                }\n                exports1.DOMCanvasFactory = DOMCanvasFactory1;\n                async function fetchData1(url1, asTypedArray1 = false) {\n                    if (isValidFetchUrl1(url1, document.baseURI)) {\n                        const response1 = await fetch(url1);\n                        if (!response1.ok) {\n                            throw new Error(response1.statusText);\n                        }\n                        return asTypedArray1 ? new Uint8Array(await response1.arrayBuffer()) : (0, _util1.stringToBytes)(await response1.text());\n                    }\n                    return new Promise((resolve1, reject1)=>{\n                        const request1 = new XMLHttpRequest();\n                        request1.open(\"GET\", url1, true);\n                        if (asTypedArray1) {\n                            request1.responseType = \"arraybuffer\";\n                        }\n                        request1.onreadystatechange = ()=>{\n                            if (request1.readyState !== XMLHttpRequest.DONE) {\n                                return;\n                            }\n                            if (request1.status === 200 || request1.status === 0) {\n                                let data1;\n                                if (asTypedArray1 && request1.response) {\n                                    data1 = new Uint8Array(request1.response);\n                                } else if (!asTypedArray1 && request1.responseText) {\n                                    data1 = (0, _util1.stringToBytes)(request1.responseText);\n                                }\n                                if (data1) {\n                                    resolve1(data1);\n                                    return;\n                                }\n                            }\n                            reject1(new Error(request1.statusText));\n                        };\n                        request1.send(null);\n                    });\n                }\n                class DOMCMapReaderFactory1 extends _base_factory1.BaseCMapReaderFactory {\n                    _fetchData(url1, compressionType1) {\n                        return fetchData1(url1, this.isCompressed).then((data1)=>{\n                            return {\n                                cMapData: data1,\n                                compressionType: compressionType1\n                            };\n                        });\n                    }\n                }\n                exports1.DOMCMapReaderFactory = DOMCMapReaderFactory1;\n                class DOMStandardFontDataFactory1 extends _base_factory1.BaseStandardFontDataFactory {\n                    _fetchData(url1) {\n                        return fetchData1(url1, true);\n                    }\n                }\n                exports1.DOMStandardFontDataFactory = DOMStandardFontDataFactory1;\n                class DOMSVGFactory1 extends _base_factory1.BaseSVGFactory {\n                    _createSVG(type1) {\n                        return document.createElementNS(SVG_NS1, type1);\n                    }\n                }\n                exports1.DOMSVGFactory = DOMSVGFactory1;\n                class PageViewport1 {\n                    constructor({ viewBox: viewBox1, scale: scale1, rotation: rotation1, offsetX: offsetX1 = 0, offsetY: offsetY1 = 0, dontFlip: dontFlip1 = false }){\n                        this.viewBox = viewBox1;\n                        this.scale = scale1;\n                        this.rotation = rotation1;\n                        this.offsetX = offsetX1;\n                        this.offsetY = offsetY1;\n                        const centerX1 = (viewBox1[2] + viewBox1[0]) / 2;\n                        const centerY1 = (viewBox1[3] + viewBox1[1]) / 2;\n                        let rotateA1, rotateB1, rotateC1, rotateD1;\n                        rotation1 %= 360;\n                        if (rotation1 < 0) {\n                            rotation1 += 360;\n                        }\n                        switch(rotation1){\n                            case 180:\n                                rotateA1 = -1;\n                                rotateB1 = 0;\n                                rotateC1 = 0;\n                                rotateD1 = 1;\n                                break;\n                            case 90:\n                                rotateA1 = 0;\n                                rotateB1 = 1;\n                                rotateC1 = 1;\n                                rotateD1 = 0;\n                                break;\n                            case 270:\n                                rotateA1 = 0;\n                                rotateB1 = -1;\n                                rotateC1 = -1;\n                                rotateD1 = 0;\n                                break;\n                            case 0:\n                                rotateA1 = 1;\n                                rotateB1 = 0;\n                                rotateC1 = 0;\n                                rotateD1 = -1;\n                                break;\n                            default:\n                                throw new Error(\"PageViewport: Invalid rotation, must be a multiple of 90 degrees.\");\n                        }\n                        if (dontFlip1) {\n                            rotateC1 = -rotateC1;\n                            rotateD1 = -rotateD1;\n                        }\n                        let offsetCanvasX1, offsetCanvasY1;\n                        let width2, height1;\n                        if (rotateA1 === 0) {\n                            offsetCanvasX1 = Math.abs(centerY1 - viewBox1[1]) * scale1 + offsetX1;\n                            offsetCanvasY1 = Math.abs(centerX1 - viewBox1[0]) * scale1 + offsetY1;\n                            width2 = (viewBox1[3] - viewBox1[1]) * scale1;\n                            height1 = (viewBox1[2] - viewBox1[0]) * scale1;\n                        } else {\n                            offsetCanvasX1 = Math.abs(centerX1 - viewBox1[0]) * scale1 + offsetX1;\n                            offsetCanvasY1 = Math.abs(centerY1 - viewBox1[1]) * scale1 + offsetY1;\n                            width2 = (viewBox1[2] - viewBox1[0]) * scale1;\n                            height1 = (viewBox1[3] - viewBox1[1]) * scale1;\n                        }\n                        this.transform = [\n                            rotateA1 * scale1,\n                            rotateB1 * scale1,\n                            rotateC1 * scale1,\n                            rotateD1 * scale1,\n                            offsetCanvasX1 - rotateA1 * scale1 * centerX1 - rotateC1 * scale1 * centerY1,\n                            offsetCanvasY1 - rotateB1 * scale1 * centerX1 - rotateD1 * scale1 * centerY1\n                        ];\n                        this.width = width2;\n                        this.height = height1;\n                    }\n                    get rawDims() {\n                        const { viewBox: viewBox1 } = this;\n                        return (0, _util1.shadow)(this, \"rawDims\", {\n                            pageWidth: viewBox1[2] - viewBox1[0],\n                            pageHeight: viewBox1[3] - viewBox1[1],\n                            pageX: viewBox1[0],\n                            pageY: viewBox1[1]\n                        });\n                    }\n                    clone({ scale: scale1 = this.scale, rotation: rotation1 = this.rotation, offsetX: offsetX1 = this.offsetX, offsetY: offsetY1 = this.offsetY, dontFlip: dontFlip1 = false } = {}) {\n                        return new PageViewport1({\n                            viewBox: this.viewBox.slice(),\n                            scale: scale1,\n                            rotation: rotation1,\n                            offsetX: offsetX1,\n                            offsetY: offsetY1,\n                            dontFlip: dontFlip1\n                        });\n                    }\n                    convertToViewportPoint(x4, y4) {\n                        return _util1.Util.applyTransform([\n                            x4,\n                            y4\n                        ], this.transform);\n                    }\n                    convertToViewportRectangle(rect3) {\n                        const topLeft1 = _util1.Util.applyTransform([\n                            rect3[0],\n                            rect3[1]\n                        ], this.transform);\n                        const bottomRight1 = _util1.Util.applyTransform([\n                            rect3[2],\n                            rect3[3]\n                        ], this.transform);\n                        return [\n                            topLeft1[0],\n                            topLeft1[1],\n                            bottomRight1[0],\n                            bottomRight1[1]\n                        ];\n                    }\n                    convertToPdfPoint(x4, y4) {\n                        return _util1.Util.applyInverseTransform([\n                            x4,\n                            y4\n                        ], this.transform);\n                    }\n                }\n                exports1.PageViewport = PageViewport1;\n                class RenderingCancelledException1 extends _util1.BaseException {\n                    constructor(msg1, extraDelay1 = 0){\n                        super(msg1, \"RenderingCancelledException\");\n                        this.extraDelay = extraDelay1;\n                    }\n                }\n                exports1.RenderingCancelledException = RenderingCancelledException1;\n                function isDataScheme1(url1) {\n                    const ii1 = url1.length;\n                    let i1 = 0;\n                    while(i1 < ii1 && url1[i1].trim() === \"\"){\n                        i1++;\n                    }\n                    return url1.substring(i1, i1 + 5).toLowerCase() === \"data:\";\n                }\n                function isPdfFile1(filename1) {\n                    return typeof filename1 === \"string\" && /\\.pdf$/i.test(filename1);\n                }\n                function getFilenameFromUrl1(url1, onlyStripPath1 = false) {\n                    if (!onlyStripPath1) {\n                        [url1] = url1.split(/[#?]/, 1);\n                    }\n                    return url1.substring(url1.lastIndexOf(\"/\") + 1);\n                }\n                function getPdfFilenameFromUrl1(url1, defaultFilename1 = \"document.pdf\") {\n                    if (typeof url1 !== \"string\") {\n                        return defaultFilename1;\n                    }\n                    if (isDataScheme1(url1)) {\n                        (0, _util1.warn)('getPdfFilenameFromUrl: ignore \"data:\"-URL for performance reasons.');\n                        return defaultFilename1;\n                    }\n                    const reURI1 = /^(?:(?:[^:]+:)?\\/\\/[^/]+)?([^?#]*)(\\?[^#]*)?(#.*)?$/;\n                    const reFilename1 = /[^/?#=]+\\.pdf\\b(?!.*\\.pdf\\b)/i;\n                    const splitURI1 = reURI1.exec(url1);\n                    let suggestedFilename1 = reFilename1.exec(splitURI1[1]) || reFilename1.exec(splitURI1[2]) || reFilename1.exec(splitURI1[3]);\n                    if (suggestedFilename1) {\n                        suggestedFilename1 = suggestedFilename1[0];\n                        if (suggestedFilename1.includes(\"%\")) {\n                            try {\n                                suggestedFilename1 = reFilename1.exec(decodeURIComponent(suggestedFilename1))[0];\n                            } catch  {}\n                        }\n                    }\n                    return suggestedFilename1 || defaultFilename1;\n                }\n                class StatTimer1 {\n                    time(name1) {\n                        if (name1 in this.started) {\n                            (0, _util1.warn)(`Timer is already running for ${name1}`);\n                        }\n                        this.started[name1] = Date.now();\n                    }\n                    timeEnd(name1) {\n                        if (!(name1 in this.started)) {\n                            (0, _util1.warn)(`Timer has not been started for ${name1}`);\n                        }\n                        this.times.push({\n                            name: name1,\n                            start: this.started[name1],\n                            end: Date.now()\n                        });\n                        delete this.started[name1];\n                    }\n                    toString() {\n                        const outBuf1 = [];\n                        let longest1 = 0;\n                        for (const { name: name1 } of this.times){\n                            longest1 = Math.max(name1.length, longest1);\n                        }\n                        for (const { name: name1, start: start1, end: end1 } of this.times){\n                            outBuf1.push(`${name1.padEnd(longest1)} ${end1 - start1}ms\\n`);\n                        }\n                        return outBuf1.join(\"\");\n                    }\n                    constructor(){\n                        this.started = Object.create(null);\n                        this.times = [];\n                    }\n                }\n                exports1.StatTimer = StatTimer1;\n                function isValidFetchUrl1(url1, baseUrl1) {\n                    try {\n                        const { protocol: protocol1 } = baseUrl1 ? new URL(url1, baseUrl1) : new URL(url1);\n                        return protocol1 === \"http:\" || protocol1 === \"https:\";\n                    } catch  {\n                        return false;\n                    }\n                }\n                function noContextMenu1(e1) {\n                    e1.preventDefault();\n                }\n                function loadScript1(src1, removeScriptElement1 = false) {\n                    return new Promise((resolve1, reject1)=>{\n                        const script1 = document.createElement(\"script\");\n                        script1.src = src1;\n                        script1.onload = function(evt1) {\n                            if (removeScriptElement1) {\n                                script1.remove();\n                            }\n                            resolve1(evt1);\n                        };\n                        script1.onerror = function() {\n                            reject1(new Error(`Cannot load script at: ${script1.src}`));\n                        };\n                        (document.head || document.documentElement).append(script1);\n                    });\n                }\n                function deprecated1(details1) {\n                    console.log(\"Deprecated API usage: \" + details1);\n                }\n                let pdfDateStringRegex1;\n                class PDFDateString1 {\n                    static toDateObject(input1) {\n                        if (!input1 || typeof input1 !== \"string\") {\n                            return null;\n                        }\n                        pdfDateStringRegex1 ||= new RegExp(\"^D:\" + \"(\\\\d{4})\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"([Z|+|-])?\" + \"(\\\\d{2})?\" + \"'?\" + \"(\\\\d{2})?\" + \"'?\");\n                        const matches1 = pdfDateStringRegex1.exec(input1);\n                        if (!matches1) {\n                            return null;\n                        }\n                        const year1 = parseInt(matches1[1], 10);\n                        let month1 = parseInt(matches1[2], 10);\n                        month1 = month1 >= 1 && month1 <= 12 ? month1 - 1 : 0;\n                        let day1 = parseInt(matches1[3], 10);\n                        day1 = day1 >= 1 && day1 <= 31 ? day1 : 1;\n                        let hour1 = parseInt(matches1[4], 10);\n                        hour1 = hour1 >= 0 && hour1 <= 23 ? hour1 : 0;\n                        let minute1 = parseInt(matches1[5], 10);\n                        minute1 = minute1 >= 0 && minute1 <= 59 ? minute1 : 0;\n                        let second1 = parseInt(matches1[6], 10);\n                        second1 = second1 >= 0 && second1 <= 59 ? second1 : 0;\n                        const universalTimeRelation1 = matches1[7] || \"Z\";\n                        let offsetHour1 = parseInt(matches1[8], 10);\n                        offsetHour1 = offsetHour1 >= 0 && offsetHour1 <= 23 ? offsetHour1 : 0;\n                        let offsetMinute1 = parseInt(matches1[9], 10) || 0;\n                        offsetMinute1 = offsetMinute1 >= 0 && offsetMinute1 <= 59 ? offsetMinute1 : 0;\n                        if (universalTimeRelation1 === \"-\") {\n                            hour1 += offsetHour1;\n                            minute1 += offsetMinute1;\n                        } else if (universalTimeRelation1 === \"+\") {\n                            hour1 -= offsetHour1;\n                            minute1 -= offsetMinute1;\n                        }\n                        return new Date(Date.UTC(year1, month1, day1, hour1, minute1, second1));\n                    }\n                }\n                exports1.PDFDateString = PDFDateString1;\n                function getXfaPageViewport1(xfaPage1, { scale: scale1 = 1, rotation: rotation1 = 0 }) {\n                    const { width: width2, height: height1 } = xfaPage1.attributes.style;\n                    const viewBox1 = [\n                        0,\n                        0,\n                        parseInt(width2),\n                        parseInt(height1)\n                    ];\n                    return new PageViewport1({\n                        viewBox: viewBox1,\n                        scale: scale1,\n                        rotation: rotation1\n                    });\n                }\n                function getRGB1(color1) {\n                    if (color1.startsWith(\"#\")) {\n                        const colorRGB1 = parseInt(color1.slice(1), 16);\n                        return [\n                            (colorRGB1 & 0xff0000) >> 16,\n                            (colorRGB1 & 0x00ff00) >> 8,\n                            colorRGB1 & 0x0000ff\n                        ];\n                    }\n                    if (color1.startsWith(\"rgb(\")) {\n                        return color1.slice(4, -1).split(\",\").map((x4)=>parseInt(x4));\n                    }\n                    if (color1.startsWith(\"rgba(\")) {\n                        return color1.slice(5, -1).split(\",\").map((x4)=>parseInt(x4)).slice(0, 3);\n                    }\n                    (0, _util1.warn)(`Not a valid color format: \"${color1}\"`);\n                    return [\n                        0,\n                        0,\n                        0\n                    ];\n                }\n                function getColorValues1(colors1) {\n                    const span1 = document.createElement(\"span\");\n                    span1.style.visibility = \"hidden\";\n                    document.body.append(span1);\n                    for (const name1 of colors1.keys()){\n                        span1.style.color = name1;\n                        const computedColor1 = window.getComputedStyle(span1).color;\n                        colors1.set(name1, getRGB1(computedColor1));\n                    }\n                    span1.remove();\n                }\n                function getCurrentTransform1(ctx1) {\n                    const { a: a1, b: b4, c: c4, d: d5, e: e1, f: f1 } = ctx1.getTransform();\n                    return [\n                        a1,\n                        b4,\n                        c4,\n                        d5,\n                        e1,\n                        f1\n                    ];\n                }\n                function getCurrentTransformInverse1(ctx1) {\n                    const { a: a1, b: b4, c: c4, d: d5, e: e1, f: f1 } = ctx1.getTransform().invertSelf();\n                    return [\n                        a1,\n                        b4,\n                        c4,\n                        d5,\n                        e1,\n                        f1\n                    ];\n                }\n                function setLayerDimensions1(div1, viewport1, mustFlip1 = false, mustRotate1 = true) {\n                    if (viewport1 instanceof PageViewport1) {\n                        const { pageWidth: pageWidth1, pageHeight: pageHeight1 } = viewport1.rawDims;\n                        const { style: style1 } = div1;\n                        const useRound1 = _util1.FeatureTest.isCSSRoundSupported;\n                        const w1 = `var(--scale-factor) * ${pageWidth1}px`, h3 = `var(--scale-factor) * ${pageHeight1}px`;\n                        const widthStr1 = useRound1 ? `round(${w1}, 1px)` : `calc(${w1})`, heightStr1 = useRound1 ? `round(${h3}, 1px)` : `calc(${h3})`;\n                        if (!mustFlip1 || viewport1.rotation % 180 === 0) {\n                            style1.width = widthStr1;\n                            style1.height = heightStr1;\n                        } else {\n                            style1.width = heightStr1;\n                            style1.height = widthStr1;\n                        }\n                    }\n                    if (mustRotate1) {\n                        div1.setAttribute(\"data-main-rotation\", viewport1.rotation);\n                    }\n                }\n            /***/ },\n            /* 7 */ /***/ (__unused_webpack_module1, exports1, __w_pdfjs_require__1)=>{\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                exports1.BaseStandardFontDataFactory = exports1.BaseSVGFactory = exports1.BaseFilterFactory = exports1.BaseCanvasFactory = exports1.BaseCMapReaderFactory = void 0;\n                var _util1 = __w_pdfjs_require__1(1);\n                class BaseFilterFactory1 {\n                    constructor(){\n                        if (this.constructor === BaseFilterFactory1) {\n                            (0, _util1.unreachable)(\"Cannot initialize BaseFilterFactory.\");\n                        }\n                    }\n                    addFilter(maps1) {\n                        return \"none\";\n                    }\n                    addHCMFilter(fgColor1, bgColor1) {\n                        return \"none\";\n                    }\n                    addHighlightHCMFilter(fgColor1, bgColor1, newFgColor1, newBgColor1) {\n                        return \"none\";\n                    }\n                    destroy(keepHCM1 = false) {}\n                }\n                exports1.BaseFilterFactory = BaseFilterFactory1;\n                class BaseCanvasFactory1 {\n                    constructor(){\n                        if (this.constructor === BaseCanvasFactory1) {\n                            (0, _util1.unreachable)(\"Cannot initialize BaseCanvasFactory.\");\n                        }\n                    }\n                    create(width2, height1) {\n                        if (width2 <= 0 || height1 <= 0) {\n                            throw new Error(\"Invalid canvas size\");\n                        }\n                        const canvas1 = this._createCanvas(width2, height1);\n                        return {\n                            canvas: canvas1,\n                            context: canvas1.getContext(\"2d\")\n                        };\n                    }\n                    reset(canvasAndContext1, width2, height1) {\n                        if (!canvasAndContext1.canvas) {\n                            throw new Error(\"Canvas is not specified\");\n                        }\n                        if (width2 <= 0 || height1 <= 0) {\n                            throw new Error(\"Invalid canvas size\");\n                        }\n                        canvasAndContext1.canvas.width = width2;\n                        canvasAndContext1.canvas.height = height1;\n                    }\n                    destroy(canvasAndContext1) {\n                        if (!canvasAndContext1.canvas) {\n                            throw new Error(\"Canvas is not specified\");\n                        }\n                        canvasAndContext1.canvas.width = 0;\n                        canvasAndContext1.canvas.height = 0;\n                        canvasAndContext1.canvas = null;\n                        canvasAndContext1.context = null;\n                    }\n                    _createCanvas(width2, height1) {\n                        (0, _util1.unreachable)(\"Abstract method `_createCanvas` called.\");\n                    }\n                }\n                exports1.BaseCanvasFactory = BaseCanvasFactory1;\n                class BaseCMapReaderFactory1 {\n                    constructor({ baseUrl: baseUrl1 = null, isCompressed: isCompressed1 = true }){\n                        if (this.constructor === BaseCMapReaderFactory1) {\n                            (0, _util1.unreachable)(\"Cannot initialize BaseCMapReaderFactory.\");\n                        }\n                        this.baseUrl = baseUrl1;\n                        this.isCompressed = isCompressed1;\n                    }\n                    async fetch({ name: name1 }) {\n                        if (!this.baseUrl) {\n                            throw new Error('The CMap \"baseUrl\" parameter must be specified, ensure that ' + 'the \"cMapUrl\" and \"cMapPacked\" API parameters are provided.');\n                        }\n                        if (!name1) {\n                            throw new Error(\"CMap name must be specified.\");\n                        }\n                        const url1 = this.baseUrl + name1 + (this.isCompressed ? \".bcmap\" : \"\");\n                        const compressionType1 = this.isCompressed ? _util1.CMapCompressionType.BINARY : _util1.CMapCompressionType.NONE;\n                        return this._fetchData(url1, compressionType1).catch((reason1)=>{\n                            throw new Error(`Unable to load ${this.isCompressed ? \"binary \" : \"\"}CMap at: ${url1}`);\n                        });\n                    }\n                    _fetchData(url1, compressionType1) {\n                        (0, _util1.unreachable)(\"Abstract method `_fetchData` called.\");\n                    }\n                }\n                exports1.BaseCMapReaderFactory = BaseCMapReaderFactory1;\n                class BaseStandardFontDataFactory1 {\n                    constructor({ baseUrl: baseUrl1 = null }){\n                        if (this.constructor === BaseStandardFontDataFactory1) {\n                            (0, _util1.unreachable)(\"Cannot initialize BaseStandardFontDataFactory.\");\n                        }\n                        this.baseUrl = baseUrl1;\n                    }\n                    async fetch({ filename: filename1 }) {\n                        if (!this.baseUrl) {\n                            throw new Error('The standard font \"baseUrl\" parameter must be specified, ensure that ' + 'the \"standardFontDataUrl\" API parameter is provided.');\n                        }\n                        if (!filename1) {\n                            throw new Error(\"Font filename must be specified.\");\n                        }\n                        const url1 = `${this.baseUrl}${filename1}`;\n                        return this._fetchData(url1).catch((reason1)=>{\n                            throw new Error(`Unable to load font data at: ${url1}`);\n                        });\n                    }\n                    _fetchData(url1) {\n                        (0, _util1.unreachable)(\"Abstract method `_fetchData` called.\");\n                    }\n                }\n                exports1.BaseStandardFontDataFactory = BaseStandardFontDataFactory1;\n                class BaseSVGFactory1 {\n                    constructor(){\n                        if (this.constructor === BaseSVGFactory1) {\n                            (0, _util1.unreachable)(\"Cannot initialize BaseSVGFactory.\");\n                        }\n                    }\n                    create(width2, height1, skipDimensions1 = false) {\n                        if (width2 <= 0 || height1 <= 0) {\n                            throw new Error(\"Invalid SVG dimensions\");\n                        }\n                        const svg1 = this._createSVG(\"svg:svg\");\n                        svg1.setAttribute(\"version\", \"1.1\");\n                        if (!skipDimensions1) {\n                            svg1.setAttribute(\"width\", `${width2}px`);\n                            svg1.setAttribute(\"height\", `${height1}px`);\n                        }\n                        svg1.setAttribute(\"preserveAspectRatio\", \"none\");\n                        svg1.setAttribute(\"viewBox\", `0 0 ${width2} ${height1}`);\n                        return svg1;\n                    }\n                    createElement(type1) {\n                        if (typeof type1 !== \"string\") {\n                            throw new Error(\"Invalid SVG element type\");\n                        }\n                        return this._createSVG(type1);\n                    }\n                    _createSVG(type1) {\n                        (0, _util1.unreachable)(\"Abstract method `_createSVG` called.\");\n                    }\n                }\n                exports1.BaseSVGFactory = BaseSVGFactory1;\n            /***/ },\n            /* 8 */ /***/ (__unused_webpack_module1, exports1, __w_pdfjs_require__1)=>{\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                exports1.MurmurHash3_64 = void 0;\n                var _util1 = __w_pdfjs_require__1(1);\n                const SEED1 = 0xc3d2e1f0;\n                const MASK_HIGH1 = 0xffff0000;\n                const MASK_LOW1 = 0xffff;\n                class MurmurHash3_641 {\n                    constructor(seed1){\n                        this.h1 = seed1 ? seed1 & 0xffffffff : SEED1;\n                        this.h2 = seed1 ? seed1 & 0xffffffff : SEED1;\n                    }\n                    update(input1) {\n                        let data1, length1;\n                        if (typeof input1 === \"string\") {\n                            data1 = new Uint8Array(input1.length * 2);\n                            length1 = 0;\n                            for(let i1 = 0, ii1 = input1.length; i1 < ii1; i1++){\n                                const code1 = input1.charCodeAt(i1);\n                                if (code1 <= 0xff) {\n                                    data1[length1++] = code1;\n                                } else {\n                                    data1[length1++] = code1 >>> 8;\n                                    data1[length1++] = code1 & 0xff;\n                                }\n                            }\n                        } else if ((0, _util1.isArrayBuffer)(input1)) {\n                            data1 = input1.slice();\n                            length1 = data1.byteLength;\n                        } else {\n                            throw new Error(\"Wrong data format in MurmurHash3_64_update. \" + \"Input must be a string or array.\");\n                        }\n                        const blockCounts1 = length1 >> 2;\n                        const tailLength1 = length1 - blockCounts1 * 4;\n                        const dataUint321 = new Uint32Array(data1.buffer, 0, blockCounts1);\n                        let k11 = 0, k21 = 0;\n                        let h11 = this.h1, h21 = this.h2;\n                        const C11 = 0xcc9e2d51, C21 = 0x1b873593;\n                        const C1_LOW1 = C11 & MASK_LOW1, C2_LOW1 = C21 & MASK_LOW1;\n                        for(let i1 = 0; i1 < blockCounts1; i1++){\n                            if (i1 & 1) {\n                                k11 = dataUint321[i1];\n                                k11 = k11 * C11 & MASK_HIGH1 | k11 * C1_LOW1 & MASK_LOW1;\n                                k11 = k11 << 15 | k11 >>> 17;\n                                k11 = k11 * C21 & MASK_HIGH1 | k11 * C2_LOW1 & MASK_LOW1;\n                                h11 ^= k11;\n                                h11 = h11 << 13 | h11 >>> 19;\n                                h11 = h11 * 5 + 0xe6546b64;\n                            } else {\n                                k21 = dataUint321[i1];\n                                k21 = k21 * C11 & MASK_HIGH1 | k21 * C1_LOW1 & MASK_LOW1;\n                                k21 = k21 << 15 | k21 >>> 17;\n                                k21 = k21 * C21 & MASK_HIGH1 | k21 * C2_LOW1 & MASK_LOW1;\n                                h21 ^= k21;\n                                h21 = h21 << 13 | h21 >>> 19;\n                                h21 = h21 * 5 + 0xe6546b64;\n                            }\n                        }\n                        k11 = 0;\n                        switch(tailLength1){\n                            case 3:\n                                k11 ^= data1[blockCounts1 * 4 + 2] << 16;\n                            case 2:\n                                k11 ^= data1[blockCounts1 * 4 + 1] << 8;\n                            case 1:\n                                k11 ^= data1[blockCounts1 * 4];\n                                k11 = k11 * C11 & MASK_HIGH1 | k11 * C1_LOW1 & MASK_LOW1;\n                                k11 = k11 << 15 | k11 >>> 17;\n                                k11 = k11 * C21 & MASK_HIGH1 | k11 * C2_LOW1 & MASK_LOW1;\n                                if (blockCounts1 & 1) {\n                                    h11 ^= k11;\n                                } else {\n                                    h21 ^= k11;\n                                }\n                        }\n                        this.h1 = h11;\n                        this.h2 = h21;\n                    }\n                    hexdigest() {\n                        let h11 = this.h1, h21 = this.h2;\n                        h11 ^= h21 >>> 1;\n                        h11 = h11 * 0xed558ccd & MASK_HIGH1 | h11 * 0x8ccd & MASK_LOW1;\n                        h21 = h21 * 0xff51afd7 & MASK_HIGH1 | ((h21 << 16 | h11 >>> 16) * 0xafd7ed55 & MASK_HIGH1) >>> 16;\n                        h11 ^= h21 >>> 1;\n                        h11 = h11 * 0x1a85ec53 & MASK_HIGH1 | h11 * 0xec53 & MASK_LOW1;\n                        h21 = h21 * 0xc4ceb9fe & MASK_HIGH1 | ((h21 << 16 | h11 >>> 16) * 0xb9fe1a85 & MASK_HIGH1) >>> 16;\n                        h11 ^= h21 >>> 1;\n                        return (h11 >>> 0).toString(16).padStart(8, \"0\") + (h21 >>> 0).toString(16).padStart(8, \"0\");\n                    }\n                }\n                exports1.MurmurHash3_64 = MurmurHash3_641;\n            /***/ },\n            /* 9 */ /***/ (__unused_webpack_module1, exports1, __w_pdfjs_require__1)=>{\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                exports1.FontLoader = exports1.FontFaceObject = void 0;\n                var _util1 = __w_pdfjs_require__1(1);\n                class FontLoader1 {\n                    #systemFonts;\n                    constructor({ ownerDocument: ownerDocument1 = globalThis.document, styleElement: styleElement1 = null }){\n                        this.#systemFonts = new Set();\n                        this._document = ownerDocument1;\n                        this.nativeFontFaces = new Set();\n                        this.styleElement = null;\n                        this.loadingRequests = [];\n                        this.loadTestFontId = 0;\n                    }\n                    addNativeFontFace(nativeFontFace1) {\n                        this.nativeFontFaces.add(nativeFontFace1);\n                        this._document.fonts.add(nativeFontFace1);\n                    }\n                    removeNativeFontFace(nativeFontFace1) {\n                        this.nativeFontFaces.delete(nativeFontFace1);\n                        this._document.fonts.delete(nativeFontFace1);\n                    }\n                    insertRule(rule1) {\n                        if (!this.styleElement) {\n                            this.styleElement = this._document.createElement(\"style\");\n                            this._document.documentElement.getElementsByTagName(\"head\")[0].append(this.styleElement);\n                        }\n                        const styleSheet1 = this.styleElement.sheet;\n                        styleSheet1.insertRule(rule1, styleSheet1.cssRules.length);\n                    }\n                    clear() {\n                        for (const nativeFontFace1 of this.nativeFontFaces){\n                            this._document.fonts.delete(nativeFontFace1);\n                        }\n                        this.nativeFontFaces.clear();\n                        this.#systemFonts.clear();\n                        if (this.styleElement) {\n                            this.styleElement.remove();\n                            this.styleElement = null;\n                        }\n                    }\n                    async loadSystemFont(info1) {\n                        if (!info1 || this.#systemFonts.has(info1.loadedName)) {\n                            return;\n                        }\n                        (0, _util1.assert)(!this.disableFontFace, \"loadSystemFont shouldn't be called when `disableFontFace` is set.\");\n                        if (this.isFontLoadingAPISupported) {\n                            const { loadedName: loadedName1, src: src1, style: style1 } = info1;\n                            const fontFace1 = new FontFace(loadedName1, src1, style1);\n                            this.addNativeFontFace(fontFace1);\n                            try {\n                                await fontFace1.load();\n                                this.#systemFonts.add(loadedName1);\n                            } catch  {\n                                (0, _util1.warn)(`Cannot load system font: ${info1.baseFontName}, installing it could help to improve PDF rendering.`);\n                                this.removeNativeFontFace(fontFace1);\n                            }\n                            return;\n                        }\n                        (0, _util1.unreachable)(\"Not implemented: loadSystemFont without the Font Loading API.\");\n                    }\n                    async bind(font1) {\n                        if (font1.attached || font1.missingFile && !font1.systemFontInfo) {\n                            return;\n                        }\n                        font1.attached = true;\n                        if (font1.systemFontInfo) {\n                            await this.loadSystemFont(font1.systemFontInfo);\n                            return;\n                        }\n                        if (this.isFontLoadingAPISupported) {\n                            const nativeFontFace1 = font1.createNativeFontFace();\n                            if (nativeFontFace1) {\n                                this.addNativeFontFace(nativeFontFace1);\n                                try {\n                                    await nativeFontFace1.loaded;\n                                } catch (ex1) {\n                                    (0, _util1.warn)(`Failed to load font '${nativeFontFace1.family}': '${ex1}'.`);\n                                    font1.disableFontFace = true;\n                                    throw ex1;\n                                }\n                            }\n                            return;\n                        }\n                        const rule1 = font1.createFontFaceRule();\n                        if (rule1) {\n                            this.insertRule(rule1);\n                            if (this.isSyncFontLoadingSupported) {\n                                return;\n                            }\n                            await new Promise((resolve1)=>{\n                                const request1 = this._queueLoadingCallback(resolve1);\n                                this._prepareFontLoadEvent(font1, request1);\n                            });\n                        }\n                    }\n                    get isFontLoadingAPISupported() {\n                        const hasFonts1 = !!this._document?.fonts;\n                        return (0, _util1.shadow)(this, \"isFontLoadingAPISupported\", hasFonts1);\n                    }\n                    get isSyncFontLoadingSupported() {\n                        let supported1 = false;\n                        if (_util1.isNodeJS) {\n                            supported1 = true;\n                        } else if (typeof navigator !== \"undefined\" && /Mozilla\\/5.0.*?rv:\\d+.*? Gecko/.test(navigator.userAgent)) {\n                            supported1 = true;\n                        }\n                        return (0, _util1.shadow)(this, \"isSyncFontLoadingSupported\", supported1);\n                    }\n                    _queueLoadingCallback(callback1) {\n                        function completeRequest1() {\n                            (0, _util1.assert)(!request1.done, \"completeRequest() cannot be called twice.\");\n                            request1.done = true;\n                            while(loadingRequests1.length > 0 && loadingRequests1[0].done){\n                                const otherRequest1 = loadingRequests1.shift();\n                                setTimeout(otherRequest1.callback, 0);\n                            }\n                        }\n                        const { loadingRequests: loadingRequests1 } = this;\n                        const request1 = {\n                            done: false,\n                            complete: completeRequest1,\n                            callback: callback1\n                        };\n                        loadingRequests1.push(request1);\n                        return request1;\n                    }\n                    get _loadTestFont() {\n                        const testFont1 = atob(\"T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQA\" + \"FQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAA\" + \"ALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgA\" + \"AAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1\" + \"AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD\" + \"6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACM\" + \"AooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4D\" + \"IP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAA\" + \"AAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUA\" + \"AQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgAB\" + \"AAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABY\" + \"AAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAA\" + \"AC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAA\" + \"AAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQAC\" + \"AQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3\" + \"Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTj\" + \"FQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==\");\n                        return (0, _util1.shadow)(this, \"_loadTestFont\", testFont1);\n                    }\n                    _prepareFontLoadEvent(font1, request1) {\n                        function int321(data1, offset1) {\n                            return data1.charCodeAt(offset1) << 24 | data1.charCodeAt(offset1 + 1) << 16 | data1.charCodeAt(offset1 + 2) << 8 | data1.charCodeAt(offset1 + 3) & 0xff;\n                        }\n                        function spliceString1(s4, offset1, remove1, insert1) {\n                            const chunk11 = s4.substring(0, offset1);\n                            const chunk21 = s4.substring(offset1 + remove1);\n                            return chunk11 + insert1 + chunk21;\n                        }\n                        let i1, ii1;\n                        const canvas1 = this._document.createElement(\"canvas\");\n                        canvas1.width = 1;\n                        canvas1.height = 1;\n                        const ctx1 = canvas1.getContext(\"2d\");\n                        let called1 = 0;\n                        function isFontReady1(name1, callback1) {\n                            if (++called1 > 30) {\n                                (0, _util1.warn)(\"Load test font never loaded.\");\n                                callback1();\n                                return;\n                            }\n                            ctx1.font = \"30px \" + name1;\n                            ctx1.fillText(\".\", 0, 20);\n                            const imageData1 = ctx1.getImageData(0, 0, 1, 1);\n                            if (imageData1.data[3] > 0) {\n                                callback1();\n                                return;\n                            }\n                            setTimeout(isFontReady1.bind(null, name1, callback1));\n                        }\n                        const loadTestFontId1 = `lt${Date.now()}${this.loadTestFontId++}`;\n                        let data1 = this._loadTestFont;\n                        const COMMENT_OFFSET1 = 976;\n                        data1 = spliceString1(data1, COMMENT_OFFSET1, loadTestFontId1.length, loadTestFontId1);\n                        const CFF_CHECKSUM_OFFSET1 = 16;\n                        const XXXX_VALUE1 = 0x58585858;\n                        let checksum1 = int321(data1, CFF_CHECKSUM_OFFSET1);\n                        for(i1 = 0, ii1 = loadTestFontId1.length - 3; i1 < ii1; i1 += 4){\n                            checksum1 = checksum1 - XXXX_VALUE1 + int321(loadTestFontId1, i1) | 0;\n                        }\n                        if (i1 < loadTestFontId1.length) {\n                            checksum1 = checksum1 - XXXX_VALUE1 + int321(loadTestFontId1 + \"XXX\", i1) | 0;\n                        }\n                        data1 = spliceString1(data1, CFF_CHECKSUM_OFFSET1, 4, (0, _util1.string32)(checksum1));\n                        const url1 = `url(data:font/opentype;base64,${btoa(data1)});`;\n                        const rule1 = `@font-face {font-family:\"${loadTestFontId1}\";src:${url1}}`;\n                        this.insertRule(rule1);\n                        const div1 = this._document.createElement(\"div\");\n                        div1.style.visibility = \"hidden\";\n                        div1.style.width = div1.style.height = \"10px\";\n                        div1.style.position = \"absolute\";\n                        div1.style.top = div1.style.left = \"0px\";\n                        for (const name1 of [\n                            font1.loadedName,\n                            loadTestFontId1\n                        ]){\n                            const span1 = this._document.createElement(\"span\");\n                            span1.textContent = \"Hi\";\n                            span1.style.fontFamily = name1;\n                            div1.append(span1);\n                        }\n                        this._document.body.append(div1);\n                        isFontReady1(loadTestFontId1, ()=>{\n                            div1.remove();\n                            request1.complete();\n                        });\n                    }\n                }\n                exports1.FontLoader = FontLoader1;\n                class FontFaceObject1 {\n                    constructor(translatedData1, { isEvalSupported: isEvalSupported1 = true, disableFontFace: disableFontFace1 = false, ignoreErrors: ignoreErrors1 = false, inspectFont: inspectFont1 = null }){\n                        this.compiledGlyphs = Object.create(null);\n                        for(const i1 in translatedData1){\n                            this[i1] = translatedData1[i1];\n                        }\n                        this.isEvalSupported = isEvalSupported1 !== false;\n                        this.disableFontFace = disableFontFace1 === true;\n                        this.ignoreErrors = ignoreErrors1 === true;\n                        this._inspectFont = inspectFont1;\n                    }\n                    createNativeFontFace() {\n                        if (!this.data || this.disableFontFace) {\n                            return null;\n                        }\n                        let nativeFontFace1;\n                        if (!this.cssFontInfo) {\n                            nativeFontFace1 = new FontFace(this.loadedName, this.data, {});\n                        } else {\n                            const css1 = {\n                                weight: this.cssFontInfo.fontWeight\n                            };\n                            if (this.cssFontInfo.italicAngle) {\n                                css1.style = `oblique ${this.cssFontInfo.italicAngle}deg`;\n                            }\n                            nativeFontFace1 = new FontFace(this.cssFontInfo.fontFamily, this.data, css1);\n                        }\n                        this._inspectFont?.(this);\n                        return nativeFontFace1;\n                    }\n                    createFontFaceRule() {\n                        if (!this.data || this.disableFontFace) {\n                            return null;\n                        }\n                        const data1 = (0, _util1.bytesToString)(this.data);\n                        const url1 = `url(data:${this.mimetype};base64,${btoa(data1)});`;\n                        let rule1;\n                        if (!this.cssFontInfo) {\n                            rule1 = `@font-face {font-family:\"${this.loadedName}\";src:${url1}}`;\n                        } else {\n                            let css1 = `font-weight: ${this.cssFontInfo.fontWeight};`;\n                            if (this.cssFontInfo.italicAngle) {\n                                css1 += `font-style: oblique ${this.cssFontInfo.italicAngle}deg;`;\n                            }\n                            rule1 = `@font-face {font-family:\"${this.cssFontInfo.fontFamily}\";${css1}src:${url1}}`;\n                        }\n                        this._inspectFont?.(this, url1);\n                        return rule1;\n                    }\n                    getPathGenerator(objs1, character1) {\n                        if (this.compiledGlyphs[character1] !== undefined) {\n                            return this.compiledGlyphs[character1];\n                        }\n                        let cmds1;\n                        try {\n                            cmds1 = objs1.get(this.loadedName + \"_path_\" + character1);\n                        } catch (ex1) {\n                            if (!this.ignoreErrors) {\n                                throw ex1;\n                            }\n                            (0, _util1.warn)(`getPathGenerator - ignoring character: \"${ex1}\".`);\n                            return this.compiledGlyphs[character1] = function(c4, size1) {};\n                        }\n                        if (this.isEvalSupported && _util1.FeatureTest.isEvalSupported) {\n                            const jsBuf1 = [];\n                            for (const current1 of cmds1){\n                                const args1 = current1.args !== undefined ? current1.args.join(\",\") : \"\";\n                                jsBuf1.push(\"c.\", current1.cmd, \"(\", args1, \");\\n\");\n                            }\n                            return this.compiledGlyphs[character1] = new Function(\"c\", \"size\", jsBuf1.join(\"\"));\n                        }\n                        return this.compiledGlyphs[character1] = function(c4, size1) {\n                            for (const current1 of cmds1){\n                                if (current1.cmd === \"scale\") {\n                                    current1.args = [\n                                        size1,\n                                        -size1\n                                    ];\n                                }\n                                c4[current1.cmd].apply(c4, current1.args);\n                            }\n                        };\n                    }\n                }\n                exports1.FontFaceObject = FontFaceObject1;\n            /***/ },\n            /* 10 */ /***/ (__unused_webpack_module1, exports1, __w_pdfjs_require__1)=>{\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                exports1.NodeStandardFontDataFactory = exports1.NodeFilterFactory = exports1.NodeCanvasFactory = exports1.NodeCMapReaderFactory = void 0;\n                var _base_factory1 = __w_pdfjs_require__1(7);\n                var _util1 = __w_pdfjs_require__1(1);\n                ;\n                ;\n                const fetchData1 = function(url1) {\n                    return new Promise((resolve1, reject1)=>{\n                        const fs1 = __webpack_require__(/*! fs */ \"fs\");\n                        fs1.readFile(url1, (error1, data1)=>{\n                            if (error1 || !data1) {\n                                reject1(new Error(error1));\n                                return;\n                            }\n                            resolve1(new Uint8Array(data1));\n                        });\n                    });\n                };\n                class NodeFilterFactory1 extends _base_factory1.BaseFilterFactory {\n                }\n                exports1.NodeFilterFactory = NodeFilterFactory1;\n                class NodeCanvasFactory1 extends _base_factory1.BaseCanvasFactory {\n                    _createCanvas(width2, height1) {\n                        const Canvas1 = __webpack_require__(/*! canvas */ \"?8412\");\n                        return Canvas1.createCanvas(width2, height1);\n                    }\n                }\n                exports1.NodeCanvasFactory = NodeCanvasFactory1;\n                class NodeCMapReaderFactory1 extends _base_factory1.BaseCMapReaderFactory {\n                    _fetchData(url1, compressionType1) {\n                        return fetchData1(url1).then((data1)=>{\n                            return {\n                                cMapData: data1,\n                                compressionType: compressionType1\n                            };\n                        });\n                    }\n                }\n                exports1.NodeCMapReaderFactory = NodeCMapReaderFactory1;\n                class NodeStandardFontDataFactory1 extends _base_factory1.BaseStandardFontDataFactory {\n                    _fetchData(url1) {\n                        return fetchData1(url1);\n                    }\n                }\n                exports1.NodeStandardFontDataFactory = NodeStandardFontDataFactory1;\n            /***/ },\n            /* 11 */ /***/ (__unused_webpack_module1, exports1, __w_pdfjs_require__1)=>{\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                exports1.CanvasGraphics = void 0;\n                var _util1 = __w_pdfjs_require__1(1);\n                var _display_utils1 = __w_pdfjs_require__1(6);\n                var _pattern_helper1 = __w_pdfjs_require__1(12);\n                var _image_utils1 = __w_pdfjs_require__1(13);\n                const MIN_FONT_SIZE1 = 16;\n                const MAX_FONT_SIZE1 = 100;\n                const MAX_GROUP_SIZE1 = 4096;\n                const EXECUTION_TIME1 = 15;\n                const EXECUTION_STEPS1 = 10;\n                const MAX_SIZE_TO_COMPILE1 = 1000;\n                const FULL_CHUNK_HEIGHT1 = 16;\n                function mirrorContextOperations1(ctx1, destCtx1) {\n                    if (ctx1._removeMirroring) {\n                        throw new Error(\"Context is already forwarding operations.\");\n                    }\n                    ctx1.__originalSave = ctx1.save;\n                    ctx1.__originalRestore = ctx1.restore;\n                    ctx1.__originalRotate = ctx1.rotate;\n                    ctx1.__originalScale = ctx1.scale;\n                    ctx1.__originalTranslate = ctx1.translate;\n                    ctx1.__originalTransform = ctx1.transform;\n                    ctx1.__originalSetTransform = ctx1.setTransform;\n                    ctx1.__originalResetTransform = ctx1.resetTransform;\n                    ctx1.__originalClip = ctx1.clip;\n                    ctx1.__originalMoveTo = ctx1.moveTo;\n                    ctx1.__originalLineTo = ctx1.lineTo;\n                    ctx1.__originalBezierCurveTo = ctx1.bezierCurveTo;\n                    ctx1.__originalRect = ctx1.rect;\n                    ctx1.__originalClosePath = ctx1.closePath;\n                    ctx1.__originalBeginPath = ctx1.beginPath;\n                    ctx1._removeMirroring = ()=>{\n                        ctx1.save = ctx1.__originalSave;\n                        ctx1.restore = ctx1.__originalRestore;\n                        ctx1.rotate = ctx1.__originalRotate;\n                        ctx1.scale = ctx1.__originalScale;\n                        ctx1.translate = ctx1.__originalTranslate;\n                        ctx1.transform = ctx1.__originalTransform;\n                        ctx1.setTransform = ctx1.__originalSetTransform;\n                        ctx1.resetTransform = ctx1.__originalResetTransform;\n                        ctx1.clip = ctx1.__originalClip;\n                        ctx1.moveTo = ctx1.__originalMoveTo;\n                        ctx1.lineTo = ctx1.__originalLineTo;\n                        ctx1.bezierCurveTo = ctx1.__originalBezierCurveTo;\n                        ctx1.rect = ctx1.__originalRect;\n                        ctx1.closePath = ctx1.__originalClosePath;\n                        ctx1.beginPath = ctx1.__originalBeginPath;\n                        delete ctx1._removeMirroring;\n                    };\n                    ctx1.save = function ctxSave1() {\n                        destCtx1.save();\n                        this.__originalSave();\n                    };\n                    ctx1.restore = function ctxRestore1() {\n                        destCtx1.restore();\n                        this.__originalRestore();\n                    };\n                    ctx1.translate = function ctxTranslate1(x4, y4) {\n                        destCtx1.translate(x4, y4);\n                        this.__originalTranslate(x4, y4);\n                    };\n                    ctx1.scale = function ctxScale1(x4, y4) {\n                        destCtx1.scale(x4, y4);\n                        this.__originalScale(x4, y4);\n                    };\n                    ctx1.transform = function ctxTransform1(a1, b4, c4, d5, e1, f1) {\n                        destCtx1.transform(a1, b4, c4, d5, e1, f1);\n                        this.__originalTransform(a1, b4, c4, d5, e1, f1);\n                    };\n                    ctx1.setTransform = function ctxSetTransform1(a1, b4, c4, d5, e1, f1) {\n                        destCtx1.setTransform(a1, b4, c4, d5, e1, f1);\n                        this.__originalSetTransform(a1, b4, c4, d5, e1, f1);\n                    };\n                    ctx1.resetTransform = function ctxResetTransform1() {\n                        destCtx1.resetTransform();\n                        this.__originalResetTransform();\n                    };\n                    ctx1.rotate = function ctxRotate1(angle1) {\n                        destCtx1.rotate(angle1);\n                        this.__originalRotate(angle1);\n                    };\n                    ctx1.clip = function ctxRotate1(rule1) {\n                        destCtx1.clip(rule1);\n                        this.__originalClip(rule1);\n                    };\n                    ctx1.moveTo = function(x4, y4) {\n                        destCtx1.moveTo(x4, y4);\n                        this.__originalMoveTo(x4, y4);\n                    };\n                    ctx1.lineTo = function(x4, y4) {\n                        destCtx1.lineTo(x4, y4);\n                        this.__originalLineTo(x4, y4);\n                    };\n                    ctx1.bezierCurveTo = function(cp1x1, cp1y1, cp2x1, cp2y1, x4, y4) {\n                        destCtx1.bezierCurveTo(cp1x1, cp1y1, cp2x1, cp2y1, x4, y4);\n                        this.__originalBezierCurveTo(cp1x1, cp1y1, cp2x1, cp2y1, x4, y4);\n                    };\n                    ctx1.rect = function(x4, y4, width2, height1) {\n                        destCtx1.rect(x4, y4, width2, height1);\n                        this.__originalRect(x4, y4, width2, height1);\n                    };\n                    ctx1.closePath = function() {\n                        destCtx1.closePath();\n                        this.__originalClosePath();\n                    };\n                    ctx1.beginPath = function() {\n                        destCtx1.beginPath();\n                        this.__originalBeginPath();\n                    };\n                }\n                class CachedCanvases1 {\n                    constructor(canvasFactory1){\n                        this.canvasFactory = canvasFactory1;\n                        this.cache = Object.create(null);\n                    }\n                    getCanvas(id1, width2, height1) {\n                        let canvasEntry1;\n                        if (this.cache[id1] !== undefined) {\n                            canvasEntry1 = this.cache[id1];\n                            this.canvasFactory.reset(canvasEntry1, width2, height1);\n                        } else {\n                            canvasEntry1 = this.canvasFactory.create(width2, height1);\n                            this.cache[id1] = canvasEntry1;\n                        }\n                        return canvasEntry1;\n                    }\n                    delete(id1) {\n                        delete this.cache[id1];\n                    }\n                    clear() {\n                        for(const id1 in this.cache){\n                            const canvasEntry1 = this.cache[id1];\n                            this.canvasFactory.destroy(canvasEntry1);\n                            delete this.cache[id1];\n                        }\n                    }\n                }\n                function drawImageAtIntegerCoords1(ctx1, srcImg1, srcX1, srcY1, srcW1, srcH1, destX1, destY1, destW1, destH1) {\n                    const [a1, b4, c4, d5, tx2, ty2] = (0, _display_utils1.getCurrentTransform)(ctx1);\n                    if (b4 === 0 && c4 === 0) {\n                        const tlX1 = destX1 * a1 + tx2;\n                        const rTlX1 = Math.round(tlX1);\n                        const tlY1 = destY1 * d5 + ty2;\n                        const rTlY1 = Math.round(tlY1);\n                        const brX1 = (destX1 + destW1) * a1 + tx2;\n                        const rWidth1 = Math.abs(Math.round(brX1) - rTlX1) || 1;\n                        const brY1 = (destY1 + destH1) * d5 + ty2;\n                        const rHeight1 = Math.abs(Math.round(brY1) - rTlY1) || 1;\n                        ctx1.setTransform(Math.sign(a1), 0, 0, Math.sign(d5), rTlX1, rTlY1);\n                        ctx1.drawImage(srcImg1, srcX1, srcY1, srcW1, srcH1, 0, 0, rWidth1, rHeight1);\n                        ctx1.setTransform(a1, b4, c4, d5, tx2, ty2);\n                        return [\n                            rWidth1,\n                            rHeight1\n                        ];\n                    }\n                    if (a1 === 0 && d5 === 0) {\n                        const tlX1 = destY1 * c4 + tx2;\n                        const rTlX1 = Math.round(tlX1);\n                        const tlY1 = destX1 * b4 + ty2;\n                        const rTlY1 = Math.round(tlY1);\n                        const brX1 = (destY1 + destH1) * c4 + tx2;\n                        const rWidth1 = Math.abs(Math.round(brX1) - rTlX1) || 1;\n                        const brY1 = (destX1 + destW1) * b4 + ty2;\n                        const rHeight1 = Math.abs(Math.round(brY1) - rTlY1) || 1;\n                        ctx1.setTransform(0, Math.sign(b4), Math.sign(c4), 0, rTlX1, rTlY1);\n                        ctx1.drawImage(srcImg1, srcX1, srcY1, srcW1, srcH1, 0, 0, rHeight1, rWidth1);\n                        ctx1.setTransform(a1, b4, c4, d5, tx2, ty2);\n                        return [\n                            rHeight1,\n                            rWidth1\n                        ];\n                    }\n                    ctx1.drawImage(srcImg1, srcX1, srcY1, srcW1, srcH1, destX1, destY1, destW1, destH1);\n                    const scaleX1 = Math.hypot(a1, b4);\n                    const scaleY1 = Math.hypot(c4, d5);\n                    return [\n                        scaleX1 * destW1,\n                        scaleY1 * destH1\n                    ];\n                }\n                function compileType3Glyph1(imgData1) {\n                    const { width: width2, height: height1 } = imgData1;\n                    if (width2 > MAX_SIZE_TO_COMPILE1 || height1 > MAX_SIZE_TO_COMPILE1) {\n                        return null;\n                    }\n                    const POINT_TO_PROCESS_LIMIT1 = 1000;\n                    const POINT_TYPES1 = new Uint8Array([\n                        0,\n                        2,\n                        4,\n                        0,\n                        1,\n                        0,\n                        5,\n                        4,\n                        8,\n                        10,\n                        0,\n                        8,\n                        0,\n                        2,\n                        1,\n                        0\n                    ]);\n                    const width11 = width2 + 1;\n                    let points1 = new Uint8Array(width11 * (height1 + 1));\n                    let i1, j1, j01;\n                    const lineSize1 = width2 + 7 & ~7;\n                    let data1 = new Uint8Array(lineSize1 * height1), pos1 = 0;\n                    for (const elem1 of imgData1.data){\n                        let mask1 = 128;\n                        while(mask1 > 0){\n                            data1[pos1++] = elem1 & mask1 ? 0 : 255;\n                            mask1 >>= 1;\n                        }\n                    }\n                    let count1 = 0;\n                    pos1 = 0;\n                    if (data1[pos1] !== 0) {\n                        points1[0] = 1;\n                        ++count1;\n                    }\n                    for(j1 = 1; j1 < width2; j1++){\n                        if (data1[pos1] !== data1[pos1 + 1]) {\n                            points1[j1] = data1[pos1] ? 2 : 1;\n                            ++count1;\n                        }\n                        pos1++;\n                    }\n                    if (data1[pos1] !== 0) {\n                        points1[j1] = 2;\n                        ++count1;\n                    }\n                    for(i1 = 1; i1 < height1; i1++){\n                        pos1 = i1 * lineSize1;\n                        j01 = i1 * width11;\n                        if (data1[pos1 - lineSize1] !== data1[pos1]) {\n                            points1[j01] = data1[pos1] ? 1 : 8;\n                            ++count1;\n                        }\n                        let sum1 = (data1[pos1] ? 4 : 0) + (data1[pos1 - lineSize1] ? 8 : 0);\n                        for(j1 = 1; j1 < width2; j1++){\n                            sum1 = (sum1 >> 2) + (data1[pos1 + 1] ? 4 : 0) + (data1[pos1 - lineSize1 + 1] ? 8 : 0);\n                            if (POINT_TYPES1[sum1]) {\n                                points1[j01 + j1] = POINT_TYPES1[sum1];\n                                ++count1;\n                            }\n                            pos1++;\n                        }\n                        if (data1[pos1 - lineSize1] !== data1[pos1]) {\n                            points1[j01 + j1] = data1[pos1] ? 2 : 4;\n                            ++count1;\n                        }\n                        if (count1 > POINT_TO_PROCESS_LIMIT1) {\n                            return null;\n                        }\n                    }\n                    pos1 = lineSize1 * (height1 - 1);\n                    j01 = i1 * width11;\n                    if (data1[pos1] !== 0) {\n                        points1[j01] = 8;\n                        ++count1;\n                    }\n                    for(j1 = 1; j1 < width2; j1++){\n                        if (data1[pos1] !== data1[pos1 + 1]) {\n                            points1[j01 + j1] = data1[pos1] ? 4 : 8;\n                            ++count1;\n                        }\n                        pos1++;\n                    }\n                    if (data1[pos1] !== 0) {\n                        points1[j01 + j1] = 4;\n                        ++count1;\n                    }\n                    if (count1 > POINT_TO_PROCESS_LIMIT1) {\n                        return null;\n                    }\n                    const steps1 = new Int32Array([\n                        0,\n                        width11,\n                        -1,\n                        0,\n                        -width11,\n                        0,\n                        0,\n                        0,\n                        1\n                    ]);\n                    const path1 = new Path2D();\n                    for(i1 = 0; count1 && i1 <= height1; i1++){\n                        let p5 = i1 * width11;\n                        const end1 = p5 + width2;\n                        while(p5 < end1 && !points1[p5]){\n                            p5++;\n                        }\n                        if (p5 === end1) {\n                            continue;\n                        }\n                        path1.moveTo(p5 % width11, i1);\n                        const p01 = p5;\n                        let type1 = points1[p5];\n                        do {\n                            const step1 = steps1[type1];\n                            do {\n                                p5 += step1;\n                            }while (!points1[p5]);\n                            const pp1 = points1[p5];\n                            if (pp1 !== 5 && pp1 !== 10) {\n                                type1 = pp1;\n                                points1[p5] = 0;\n                            } else {\n                                type1 = pp1 & 0x33 * type1 >> 4;\n                                points1[p5] &= type1 >> 2 | type1 << 2;\n                            }\n                            path1.lineTo(p5 % width11, p5 / width11 | 0);\n                            if (!points1[p5]) {\n                                --count1;\n                            }\n                        }while (p01 !== p5);\n                        --i1;\n                    }\n                    data1 = null;\n                    points1 = null;\n                    const drawOutline1 = function(c4) {\n                        c4.save();\n                        c4.scale(1 / width2, -1 / height1);\n                        c4.translate(0, -height1);\n                        c4.fill(path1);\n                        c4.beginPath();\n                        c4.restore();\n                    };\n                    return drawOutline1;\n                }\n                class CanvasExtraState1 {\n                    constructor(width2, height1){\n                        this.alphaIsShape = false;\n                        this.fontSize = 0;\n                        this.fontSizeScale = 1;\n                        this.textMatrix = _util1.IDENTITY_MATRIX;\n                        this.textMatrixScale = 1;\n                        this.fontMatrix = _util1.FONT_IDENTITY_MATRIX;\n                        this.leading = 0;\n                        this.x = 0;\n                        this.y = 0;\n                        this.lineX = 0;\n                        this.lineY = 0;\n                        this.charSpacing = 0;\n                        this.wordSpacing = 0;\n                        this.textHScale = 1;\n                        this.textRenderingMode = _util1.TextRenderingMode.FILL;\n                        this.textRise = 0;\n                        this.fillColor = \"#000000\";\n                        this.strokeColor = \"#000000\";\n                        this.patternFill = false;\n                        this.fillAlpha = 1;\n                        this.strokeAlpha = 1;\n                        this.lineWidth = 1;\n                        this.activeSMask = null;\n                        this.transferMaps = \"none\";\n                        this.startNewPathAndClipBox([\n                            0,\n                            0,\n                            width2,\n                            height1\n                        ]);\n                    }\n                    clone() {\n                        const clone1 = Object.create(this);\n                        clone1.clipBox = this.clipBox.slice();\n                        return clone1;\n                    }\n                    setCurrentPoint(x4, y4) {\n                        this.x = x4;\n                        this.y = y4;\n                    }\n                    updatePathMinMax(transform1, x4, y4) {\n                        [x4, y4] = _util1.Util.applyTransform([\n                            x4,\n                            y4\n                        ], transform1);\n                        this.minX = Math.min(this.minX, x4);\n                        this.minY = Math.min(this.minY, y4);\n                        this.maxX = Math.max(this.maxX, x4);\n                        this.maxY = Math.max(this.maxY, y4);\n                    }\n                    updateRectMinMax(transform1, rect3) {\n                        const p12 = _util1.Util.applyTransform(rect3, transform1);\n                        const p22 = _util1.Util.applyTransform(rect3.slice(2), transform1);\n                        this.minX = Math.min(this.minX, p12[0], p22[0]);\n                        this.minY = Math.min(this.minY, p12[1], p22[1]);\n                        this.maxX = Math.max(this.maxX, p12[0], p22[0]);\n                        this.maxY = Math.max(this.maxY, p12[1], p22[1]);\n                    }\n                    updateScalingPathMinMax(transform1, minMax1) {\n                        _util1.Util.scaleMinMax(transform1, minMax1);\n                        this.minX = Math.min(this.minX, minMax1[0]);\n                        this.maxX = Math.max(this.maxX, minMax1[1]);\n                        this.minY = Math.min(this.minY, minMax1[2]);\n                        this.maxY = Math.max(this.maxY, minMax1[3]);\n                    }\n                    updateCurvePathMinMax(transform1, x01, y01, x11, y11, x21, y21, x31, y31, minMax1) {\n                        const box1 = _util1.Util.bezierBoundingBox(x01, y01, x11, y11, x21, y21, x31, y31);\n                        if (minMax1) {\n                            minMax1[0] = Math.min(minMax1[0], box1[0], box1[2]);\n                            minMax1[1] = Math.max(minMax1[1], box1[0], box1[2]);\n                            minMax1[2] = Math.min(minMax1[2], box1[1], box1[3]);\n                            minMax1[3] = Math.max(minMax1[3], box1[1], box1[3]);\n                            return;\n                        }\n                        this.updateRectMinMax(transform1, box1);\n                    }\n                    getPathBoundingBox(pathType1 = _pattern_helper1.PathType.FILL, transform1 = null) {\n                        const box1 = [\n                            this.minX,\n                            this.minY,\n                            this.maxX,\n                            this.maxY\n                        ];\n                        if (pathType1 === _pattern_helper1.PathType.STROKE) {\n                            if (!transform1) {\n                                (0, _util1.unreachable)(\"Stroke bounding box must include transform.\");\n                            }\n                            const scale1 = _util1.Util.singularValueDecompose2dScale(transform1);\n                            const xStrokePad1 = scale1[0] * this.lineWidth / 2;\n                            const yStrokePad1 = scale1[1] * this.lineWidth / 2;\n                            box1[0] -= xStrokePad1;\n                            box1[1] -= yStrokePad1;\n                            box1[2] += xStrokePad1;\n                            box1[3] += yStrokePad1;\n                        }\n                        return box1;\n                    }\n                    updateClipFromPath() {\n                        const intersect1 = _util1.Util.intersect(this.clipBox, this.getPathBoundingBox());\n                        this.startNewPathAndClipBox(intersect1 || [\n                            0,\n                            0,\n                            0,\n                            0\n                        ]);\n                    }\n                    isEmptyClip() {\n                        return this.minX === Infinity;\n                    }\n                    startNewPathAndClipBox(box1) {\n                        this.clipBox = box1;\n                        this.minX = Infinity;\n                        this.minY = Infinity;\n                        this.maxX = 0;\n                        this.maxY = 0;\n                    }\n                    getClippedPathBoundingBox(pathType1 = _pattern_helper1.PathType.FILL, transform1 = null) {\n                        return _util1.Util.intersect(this.clipBox, this.getPathBoundingBox(pathType1, transform1));\n                    }\n                }\n                function putBinaryImageData1(ctx1, imgData1) {\n                    if (typeof ImageData !== \"undefined\" && imgData1 instanceof ImageData) {\n                        ctx1.putImageData(imgData1, 0, 0);\n                        return;\n                    }\n                    const height1 = imgData1.height, width2 = imgData1.width;\n                    const partialChunkHeight1 = height1 % FULL_CHUNK_HEIGHT1;\n                    const fullChunks1 = (height1 - partialChunkHeight1) / FULL_CHUNK_HEIGHT1;\n                    const totalChunks1 = partialChunkHeight1 === 0 ? fullChunks1 : fullChunks1 + 1;\n                    const chunkImgData1 = ctx1.createImageData(width2, FULL_CHUNK_HEIGHT1);\n                    let srcPos1 = 0, destPos1;\n                    const src1 = imgData1.data;\n                    const dest1 = chunkImgData1.data;\n                    let i1, j1, thisChunkHeight1, elemsInThisChunk1;\n                    if (imgData1.kind === _util1.ImageKind.GRAYSCALE_1BPP) {\n                        const srcLength1 = src1.byteLength;\n                        const dest321 = new Uint32Array(dest1.buffer, 0, dest1.byteLength >> 2);\n                        const dest32DataLength1 = dest321.length;\n                        const fullSrcDiff1 = width2 + 7 >> 3;\n                        const white1 = 0xffffffff;\n                        const black1 = _util1.FeatureTest.isLittleEndian ? 0xff000000 : 0x000000ff;\n                        for(i1 = 0; i1 < totalChunks1; i1++){\n                            thisChunkHeight1 = i1 < fullChunks1 ? FULL_CHUNK_HEIGHT1 : partialChunkHeight1;\n                            destPos1 = 0;\n                            for(j1 = 0; j1 < thisChunkHeight1; j1++){\n                                const srcDiff1 = srcLength1 - srcPos1;\n                                let k3 = 0;\n                                const kEnd1 = srcDiff1 > fullSrcDiff1 ? width2 : srcDiff1 * 8 - 7;\n                                const kEndUnrolled1 = kEnd1 & ~7;\n                                let mask1 = 0;\n                                let srcByte1 = 0;\n                                for(; k3 < kEndUnrolled1; k3 += 8){\n                                    srcByte1 = src1[srcPos1++];\n                                    dest321[destPos1++] = srcByte1 & 128 ? white1 : black1;\n                                    dest321[destPos1++] = srcByte1 & 64 ? white1 : black1;\n                                    dest321[destPos1++] = srcByte1 & 32 ? white1 : black1;\n                                    dest321[destPos1++] = srcByte1 & 16 ? white1 : black1;\n                                    dest321[destPos1++] = srcByte1 & 8 ? white1 : black1;\n                                    dest321[destPos1++] = srcByte1 & 4 ? white1 : black1;\n                                    dest321[destPos1++] = srcByte1 & 2 ? white1 : black1;\n                                    dest321[destPos1++] = srcByte1 & 1 ? white1 : black1;\n                                }\n                                for(; k3 < kEnd1; k3++){\n                                    if (mask1 === 0) {\n                                        srcByte1 = src1[srcPos1++];\n                                        mask1 = 128;\n                                    }\n                                    dest321[destPos1++] = srcByte1 & mask1 ? white1 : black1;\n                                    mask1 >>= 1;\n                                }\n                            }\n                            while(destPos1 < dest32DataLength1){\n                                dest321[destPos1++] = 0;\n                            }\n                            ctx1.putImageData(chunkImgData1, 0, i1 * FULL_CHUNK_HEIGHT1);\n                        }\n                    } else if (imgData1.kind === _util1.ImageKind.RGBA_32BPP) {\n                        j1 = 0;\n                        elemsInThisChunk1 = width2 * FULL_CHUNK_HEIGHT1 * 4;\n                        for(i1 = 0; i1 < fullChunks1; i1++){\n                            dest1.set(src1.subarray(srcPos1, srcPos1 + elemsInThisChunk1));\n                            srcPos1 += elemsInThisChunk1;\n                            ctx1.putImageData(chunkImgData1, 0, j1);\n                            j1 += FULL_CHUNK_HEIGHT1;\n                        }\n                        if (i1 < totalChunks1) {\n                            elemsInThisChunk1 = width2 * partialChunkHeight1 * 4;\n                            dest1.set(src1.subarray(srcPos1, srcPos1 + elemsInThisChunk1));\n                            ctx1.putImageData(chunkImgData1, 0, j1);\n                        }\n                    } else if (imgData1.kind === _util1.ImageKind.RGB_24BPP) {\n                        thisChunkHeight1 = FULL_CHUNK_HEIGHT1;\n                        elemsInThisChunk1 = width2 * thisChunkHeight1;\n                        for(i1 = 0; i1 < totalChunks1; i1++){\n                            if (i1 >= fullChunks1) {\n                                thisChunkHeight1 = partialChunkHeight1;\n                                elemsInThisChunk1 = width2 * thisChunkHeight1;\n                            }\n                            destPos1 = 0;\n                            for(j1 = elemsInThisChunk1; j1--;){\n                                dest1[destPos1++] = src1[srcPos1++];\n                                dest1[destPos1++] = src1[srcPos1++];\n                                dest1[destPos1++] = src1[srcPos1++];\n                                dest1[destPos1++] = 255;\n                            }\n                            ctx1.putImageData(chunkImgData1, 0, i1 * FULL_CHUNK_HEIGHT1);\n                        }\n                    } else {\n                        throw new Error(`bad image kind: ${imgData1.kind}`);\n                    }\n                }\n                function putBinaryImageMask1(ctx1, imgData1) {\n                    if (imgData1.bitmap) {\n                        ctx1.drawImage(imgData1.bitmap, 0, 0);\n                        return;\n                    }\n                    const height1 = imgData1.height, width2 = imgData1.width;\n                    const partialChunkHeight1 = height1 % FULL_CHUNK_HEIGHT1;\n                    const fullChunks1 = (height1 - partialChunkHeight1) / FULL_CHUNK_HEIGHT1;\n                    const totalChunks1 = partialChunkHeight1 === 0 ? fullChunks1 : fullChunks1 + 1;\n                    const chunkImgData1 = ctx1.createImageData(width2, FULL_CHUNK_HEIGHT1);\n                    let srcPos1 = 0;\n                    const src1 = imgData1.data;\n                    const dest1 = chunkImgData1.data;\n                    for(let i1 = 0; i1 < totalChunks1; i1++){\n                        const thisChunkHeight1 = i1 < fullChunks1 ? FULL_CHUNK_HEIGHT1 : partialChunkHeight1;\n                        ({ srcPos: srcPos1 } = (0, _image_utils1.convertBlackAndWhiteToRGBA)({\n                            src: src1,\n                            srcPos: srcPos1,\n                            dest: dest1,\n                            width: width2,\n                            height: thisChunkHeight1,\n                            nonBlackColor: 0\n                        }));\n                        ctx1.putImageData(chunkImgData1, 0, i1 * FULL_CHUNK_HEIGHT1);\n                    }\n                }\n                function copyCtxState1(sourceCtx1, destCtx1) {\n                    const properties1 = [\n                        \"strokeStyle\",\n                        \"fillStyle\",\n                        \"fillRule\",\n                        \"globalAlpha\",\n                        \"lineWidth\",\n                        \"lineCap\",\n                        \"lineJoin\",\n                        \"miterLimit\",\n                        \"globalCompositeOperation\",\n                        \"font\",\n                        \"filter\"\n                    ];\n                    for (const property1 of properties1){\n                        if (sourceCtx1[property1] !== undefined) {\n                            destCtx1[property1] = sourceCtx1[property1];\n                        }\n                    }\n                    if (sourceCtx1.setLineDash !== undefined) {\n                        destCtx1.setLineDash(sourceCtx1.getLineDash());\n                        destCtx1.lineDashOffset = sourceCtx1.lineDashOffset;\n                    }\n                }\n                function resetCtxToDefault1(ctx1) {\n                    ctx1.strokeStyle = ctx1.fillStyle = \"#000000\";\n                    ctx1.fillRule = \"nonzero\";\n                    ctx1.globalAlpha = 1;\n                    ctx1.lineWidth = 1;\n                    ctx1.lineCap = \"butt\";\n                    ctx1.lineJoin = \"miter\";\n                    ctx1.miterLimit = 10;\n                    ctx1.globalCompositeOperation = \"source-over\";\n                    ctx1.font = \"10px sans-serif\";\n                    if (ctx1.setLineDash !== undefined) {\n                        ctx1.setLineDash([]);\n                        ctx1.lineDashOffset = 0;\n                    }\n                    if (!_util1.isNodeJS) {\n                        const { filter: filter1 } = ctx1;\n                        if (filter1 !== \"none\" && filter1 !== \"\") {\n                            ctx1.filter = \"none\";\n                        }\n                    }\n                }\n                function composeSMaskBackdrop1(bytes1, r01, g01, b01) {\n                    const length1 = bytes1.length;\n                    for(let i1 = 3; i1 < length1; i1 += 4){\n                        const alpha1 = bytes1[i1];\n                        if (alpha1 === 0) {\n                            bytes1[i1 - 3] = r01;\n                            bytes1[i1 - 2] = g01;\n                            bytes1[i1 - 1] = b01;\n                        } else if (alpha1 < 255) {\n                            const alpha_1 = 255 - alpha1;\n                            bytes1[i1 - 3] = bytes1[i1 - 3] * alpha1 + r01 * alpha_1 >> 8;\n                            bytes1[i1 - 2] = bytes1[i1 - 2] * alpha1 + g01 * alpha_1 >> 8;\n                            bytes1[i1 - 1] = bytes1[i1 - 1] * alpha1 + b01 * alpha_1 >> 8;\n                        }\n                    }\n                }\n                function composeSMaskAlpha1(maskData1, layerData1, transferMap1) {\n                    const length1 = maskData1.length;\n                    const scale1 = 1 / 255;\n                    for(let i1 = 3; i1 < length1; i1 += 4){\n                        const alpha1 = transferMap1 ? transferMap1[maskData1[i1]] : maskData1[i1];\n                        layerData1[i1] = layerData1[i1] * alpha1 * scale1 | 0;\n                    }\n                }\n                function composeSMaskLuminosity1(maskData1, layerData1, transferMap1) {\n                    const length1 = maskData1.length;\n                    for(let i1 = 3; i1 < length1; i1 += 4){\n                        const y4 = maskData1[i1 - 3] * 77 + maskData1[i1 - 2] * 152 + maskData1[i1 - 1] * 28;\n                        layerData1[i1] = transferMap1 ? layerData1[i1] * transferMap1[y4 >> 8] >> 8 : layerData1[i1] * y4 >> 16;\n                    }\n                }\n                function genericComposeSMask1(maskCtx1, layerCtx1, width2, height1, subtype1, backdrop1, transferMap1, layerOffsetX1, layerOffsetY1, maskOffsetX1, maskOffsetY1) {\n                    const hasBackdrop1 = !!backdrop1;\n                    const r01 = hasBackdrop1 ? backdrop1[0] : 0;\n                    const g01 = hasBackdrop1 ? backdrop1[1] : 0;\n                    const b01 = hasBackdrop1 ? backdrop1[2] : 0;\n                    const composeFn1 = subtype1 === \"Luminosity\" ? composeSMaskLuminosity1 : composeSMaskAlpha1;\n                    const PIXELS_TO_PROCESS1 = 1048576;\n                    const chunkSize1 = Math.min(height1, Math.ceil(PIXELS_TO_PROCESS1 / width2));\n                    for(let row1 = 0; row1 < height1; row1 += chunkSize1){\n                        const chunkHeight1 = Math.min(chunkSize1, height1 - row1);\n                        const maskData1 = maskCtx1.getImageData(layerOffsetX1 - maskOffsetX1, row1 + (layerOffsetY1 - maskOffsetY1), width2, chunkHeight1);\n                        const layerData1 = layerCtx1.getImageData(layerOffsetX1, row1 + layerOffsetY1, width2, chunkHeight1);\n                        if (hasBackdrop1) {\n                            composeSMaskBackdrop1(maskData1.data, r01, g01, b01);\n                        }\n                        composeFn1(maskData1.data, layerData1.data, transferMap1);\n                        layerCtx1.putImageData(layerData1, layerOffsetX1, row1 + layerOffsetY1);\n                    }\n                }\n                function composeSMask1(ctx1, smask1, layerCtx1, layerBox1) {\n                    const layerOffsetX1 = layerBox1[0];\n                    const layerOffsetY1 = layerBox1[1];\n                    const layerWidth1 = layerBox1[2] - layerOffsetX1;\n                    const layerHeight1 = layerBox1[3] - layerOffsetY1;\n                    if (layerWidth1 === 0 || layerHeight1 === 0) {\n                        return;\n                    }\n                    genericComposeSMask1(smask1.context, layerCtx1, layerWidth1, layerHeight1, smask1.subtype, smask1.backdrop, smask1.transferMap, layerOffsetX1, layerOffsetY1, smask1.offsetX, smask1.offsetY);\n                    ctx1.save();\n                    ctx1.globalAlpha = 1;\n                    ctx1.globalCompositeOperation = \"source-over\";\n                    ctx1.setTransform(1, 0, 0, 1, 0, 0);\n                    ctx1.drawImage(layerCtx1.canvas, 0, 0);\n                    ctx1.restore();\n                }\n                function getImageSmoothingEnabled1(transform1, interpolate1) {\n                    const scale1 = _util1.Util.singularValueDecompose2dScale(transform1);\n                    scale1[0] = Math.fround(scale1[0]);\n                    scale1[1] = Math.fround(scale1[1]);\n                    const actualScale1 = Math.fround((globalThis.devicePixelRatio || 1) * _display_utils1.PixelsPerInch.PDF_TO_CSS_UNITS);\n                    if (interpolate1 !== undefined) {\n                        return interpolate1;\n                    } else if (scale1[0] <= actualScale1 || scale1[1] <= actualScale1) {\n                        return true;\n                    }\n                    return false;\n                }\n                const LINE_CAP_STYLES1 = [\n                    \"butt\",\n                    \"round\",\n                    \"square\"\n                ];\n                const LINE_JOIN_STYLES1 = [\n                    \"miter\",\n                    \"round\",\n                    \"bevel\"\n                ];\n                const NORMAL_CLIP1 = {};\n                const EO_CLIP1 = {};\n                class CanvasGraphics1 {\n                    constructor(canvasCtx1, commonObjs1, objs1, canvasFactory1, filterFactory1, { optionalContentConfig: optionalContentConfig1, markedContentStack: markedContentStack1 = null }, annotationCanvasMap1, pageColors1){\n                        this.ctx = canvasCtx1;\n                        this.current = new CanvasExtraState1(this.ctx.canvas.width, this.ctx.canvas.height);\n                        this.stateStack = [];\n                        this.pendingClip = null;\n                        this.pendingEOFill = false;\n                        this.res = null;\n                        this.xobjs = null;\n                        this.commonObjs = commonObjs1;\n                        this.objs = objs1;\n                        this.canvasFactory = canvasFactory1;\n                        this.filterFactory = filterFactory1;\n                        this.groupStack = [];\n                        this.processingType3 = null;\n                        this.baseTransform = null;\n                        this.baseTransformStack = [];\n                        this.groupLevel = 0;\n                        this.smaskStack = [];\n                        this.smaskCounter = 0;\n                        this.tempSMask = null;\n                        this.suspendedCtx = null;\n                        this.contentVisible = true;\n                        this.markedContentStack = markedContentStack1 || [];\n                        this.optionalContentConfig = optionalContentConfig1;\n                        this.cachedCanvases = new CachedCanvases1(this.canvasFactory);\n                        this.cachedPatterns = new Map();\n                        this.annotationCanvasMap = annotationCanvasMap1;\n                        this.viewportScale = 1;\n                        this.outputScaleX = 1;\n                        this.outputScaleY = 1;\n                        this.pageColors = pageColors1;\n                        this._cachedScaleForStroking = [\n                            -1,\n                            0\n                        ];\n                        this._cachedGetSinglePixelWidth = null;\n                        this._cachedBitmapsMap = new Map();\n                    }\n                    getObject(data1, fallback1 = null) {\n                        if (typeof data1 === \"string\") {\n                            return data1.startsWith(\"g_\") ? this.commonObjs.get(data1) : this.objs.get(data1);\n                        }\n                        return fallback1;\n                    }\n                    beginDrawing({ transform: transform1, viewport: viewport1, transparency: transparency1 = false, background: background1 = null }) {\n                        const width2 = this.ctx.canvas.width;\n                        const height1 = this.ctx.canvas.height;\n                        const savedFillStyle1 = this.ctx.fillStyle;\n                        this.ctx.fillStyle = background1 || \"#ffffff\";\n                        this.ctx.fillRect(0, 0, width2, height1);\n                        this.ctx.fillStyle = savedFillStyle1;\n                        if (transparency1) {\n                            const transparentCanvas1 = this.cachedCanvases.getCanvas(\"transparent\", width2, height1);\n                            this.compositeCtx = this.ctx;\n                            this.transparentCanvas = transparentCanvas1.canvas;\n                            this.ctx = transparentCanvas1.context;\n                            this.ctx.save();\n                            this.ctx.transform(...(0, _display_utils1.getCurrentTransform)(this.compositeCtx));\n                        }\n                        this.ctx.save();\n                        resetCtxToDefault1(this.ctx);\n                        if (transform1) {\n                            this.ctx.transform(...transform1);\n                            this.outputScaleX = transform1[0];\n                            this.outputScaleY = transform1[0];\n                        }\n                        this.ctx.transform(...viewport1.transform);\n                        this.viewportScale = viewport1.scale;\n                        this.baseTransform = (0, _display_utils1.getCurrentTransform)(this.ctx);\n                    }\n                    executeOperatorList(operatorList1, executionStartIdx1, continueCallback1, stepper1) {\n                        const argsArray1 = operatorList1.argsArray;\n                        const fnArray1 = operatorList1.fnArray;\n                        let i1 = executionStartIdx1 || 0;\n                        const argsArrayLen1 = argsArray1.length;\n                        if (argsArrayLen1 === i1) {\n                            return i1;\n                        }\n                        const chunkOperations1 = argsArrayLen1 - i1 > EXECUTION_STEPS1 && typeof continueCallback1 === \"function\";\n                        const endTime1 = chunkOperations1 ? Date.now() + EXECUTION_TIME1 : 0;\n                        let steps1 = 0;\n                        const commonObjs1 = this.commonObjs;\n                        const objs1 = this.objs;\n                        let fnId1;\n                        while(true){\n                            if (stepper1 !== undefined && i1 === stepper1.nextBreakPoint) {\n                                stepper1.breakIt(i1, continueCallback1);\n                                return i1;\n                            }\n                            fnId1 = fnArray1[i1];\n                            if (fnId1 !== _util1.OPS.dependency) {\n                                this[fnId1].apply(this, argsArray1[i1]);\n                            } else {\n                                for (const depObjId1 of argsArray1[i1]){\n                                    const objsPool1 = depObjId1.startsWith(\"g_\") ? commonObjs1 : objs1;\n                                    if (!objsPool1.has(depObjId1)) {\n                                        objsPool1.get(depObjId1, continueCallback1);\n                                        return i1;\n                                    }\n                                }\n                            }\n                            i1++;\n                            if (i1 === argsArrayLen1) {\n                                return i1;\n                            }\n                            if (chunkOperations1 && ++steps1 > EXECUTION_STEPS1) {\n                                if (Date.now() > endTime1) {\n                                    continueCallback1();\n                                    return i1;\n                                }\n                                steps1 = 0;\n                            }\n                        }\n                    }\n                    #restoreInitialState() {\n                        while(this.stateStack.length || this.inSMaskMode){\n                            this.restore();\n                        }\n                        this.ctx.restore();\n                        if (this.transparentCanvas) {\n                            this.ctx = this.compositeCtx;\n                            this.ctx.save();\n                            this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n                            this.ctx.drawImage(this.transparentCanvas, 0, 0);\n                            this.ctx.restore();\n                            this.transparentCanvas = null;\n                        }\n                    }\n                    endDrawing() {\n                        this.#restoreInitialState();\n                        this.cachedCanvases.clear();\n                        this.cachedPatterns.clear();\n                        for (const cache1 of this._cachedBitmapsMap.values()){\n                            for (const canvas1 of cache1.values()){\n                                if (typeof HTMLCanvasElement !== \"undefined\" && canvas1 instanceof HTMLCanvasElement) {\n                                    canvas1.width = canvas1.height = 0;\n                                }\n                            }\n                            cache1.clear();\n                        }\n                        this._cachedBitmapsMap.clear();\n                        this.#drawFilter();\n                    }\n                    #drawFilter() {\n                        if (this.pageColors) {\n                            const hcmFilterId1 = this.filterFactory.addHCMFilter(this.pageColors.foreground, this.pageColors.background);\n                            if (hcmFilterId1 !== \"none\") {\n                                const savedFilter1 = this.ctx.filter;\n                                this.ctx.filter = hcmFilterId1;\n                                this.ctx.drawImage(this.ctx.canvas, 0, 0);\n                                this.ctx.filter = savedFilter1;\n                            }\n                        }\n                    }\n                    _scaleImage(img1, inverseTransform1) {\n                        const width2 = img1.width;\n                        const height1 = img1.height;\n                        let widthScale1 = Math.max(Math.hypot(inverseTransform1[0], inverseTransform1[1]), 1);\n                        let heightScale1 = Math.max(Math.hypot(inverseTransform1[2], inverseTransform1[3]), 1);\n                        let paintWidth1 = width2, paintHeight1 = height1;\n                        let tmpCanvasId1 = \"prescale1\";\n                        let tmpCanvas1, tmpCtx1;\n                        while(widthScale1 > 2 && paintWidth1 > 1 || heightScale1 > 2 && paintHeight1 > 1){\n                            let newWidth1 = paintWidth1, newHeight1 = paintHeight1;\n                            if (widthScale1 > 2 && paintWidth1 > 1) {\n                                newWidth1 = paintWidth1 >= 16384 ? Math.floor(paintWidth1 / 2) - 1 || 1 : Math.ceil(paintWidth1 / 2);\n                                widthScale1 /= paintWidth1 / newWidth1;\n                            }\n                            if (heightScale1 > 2 && paintHeight1 > 1) {\n                                newHeight1 = paintHeight1 >= 16384 ? Math.floor(paintHeight1 / 2) - 1 || 1 : Math.ceil(paintHeight1) / 2;\n                                heightScale1 /= paintHeight1 / newHeight1;\n                            }\n                            tmpCanvas1 = this.cachedCanvases.getCanvas(tmpCanvasId1, newWidth1, newHeight1);\n                            tmpCtx1 = tmpCanvas1.context;\n                            tmpCtx1.clearRect(0, 0, newWidth1, newHeight1);\n                            tmpCtx1.drawImage(img1, 0, 0, paintWidth1, paintHeight1, 0, 0, newWidth1, newHeight1);\n                            img1 = tmpCanvas1.canvas;\n                            paintWidth1 = newWidth1;\n                            paintHeight1 = newHeight1;\n                            tmpCanvasId1 = tmpCanvasId1 === \"prescale1\" ? \"prescale2\" : \"prescale1\";\n                        }\n                        return {\n                            img: img1,\n                            paintWidth: paintWidth1,\n                            paintHeight: paintHeight1\n                        };\n                    }\n                    _createMaskCanvas(img1) {\n                        const ctx1 = this.ctx;\n                        const { width: width2, height: height1 } = img1;\n                        const fillColor1 = this.current.fillColor;\n                        const isPatternFill1 = this.current.patternFill;\n                        const currentTransform1 = (0, _display_utils1.getCurrentTransform)(ctx1);\n                        let cache1, cacheKey1, scaled1, maskCanvas1;\n                        if ((img1.bitmap || img1.data) && img1.count > 1) {\n                            const mainKey1 = img1.bitmap || img1.data.buffer;\n                            cacheKey1 = JSON.stringify(isPatternFill1 ? currentTransform1 : [\n                                currentTransform1.slice(0, 4),\n                                fillColor1\n                            ]);\n                            cache1 = this._cachedBitmapsMap.get(mainKey1);\n                            if (!cache1) {\n                                cache1 = new Map();\n                                this._cachedBitmapsMap.set(mainKey1, cache1);\n                            }\n                            const cachedImage1 = cache1.get(cacheKey1);\n                            if (cachedImage1 && !isPatternFill1) {\n                                const offsetX1 = Math.round(Math.min(currentTransform1[0], currentTransform1[2]) + currentTransform1[4]);\n                                const offsetY1 = Math.round(Math.min(currentTransform1[1], currentTransform1[3]) + currentTransform1[5]);\n                                return {\n                                    canvas: cachedImage1,\n                                    offsetX: offsetX1,\n                                    offsetY: offsetY1\n                                };\n                            }\n                            scaled1 = cachedImage1;\n                        }\n                        if (!scaled1) {\n                            maskCanvas1 = this.cachedCanvases.getCanvas(\"maskCanvas\", width2, height1);\n                            putBinaryImageMask1(maskCanvas1.context, img1);\n                        }\n                        let maskToCanvas1 = _util1.Util.transform(currentTransform1, [\n                            1 / width2,\n                            0,\n                            0,\n                            -1 / height1,\n                            0,\n                            0\n                        ]);\n                        maskToCanvas1 = _util1.Util.transform(maskToCanvas1, [\n                            1,\n                            0,\n                            0,\n                            1,\n                            0,\n                            -height1\n                        ]);\n                        const cord11 = _util1.Util.applyTransform([\n                            0,\n                            0\n                        ], maskToCanvas1);\n                        const cord21 = _util1.Util.applyTransform([\n                            width2,\n                            height1\n                        ], maskToCanvas1);\n                        const rect3 = _util1.Util.normalizeRect([\n                            cord11[0],\n                            cord11[1],\n                            cord21[0],\n                            cord21[1]\n                        ]);\n                        const drawnWidth1 = Math.round(rect3[2] - rect3[0]) || 1;\n                        const drawnHeight1 = Math.round(rect3[3] - rect3[1]) || 1;\n                        const fillCanvas1 = this.cachedCanvases.getCanvas(\"fillCanvas\", drawnWidth1, drawnHeight1);\n                        const fillCtx1 = fillCanvas1.context;\n                        const offsetX1 = Math.min(cord11[0], cord21[0]);\n                        const offsetY1 = Math.min(cord11[1], cord21[1]);\n                        fillCtx1.translate(-offsetX1, -offsetY1);\n                        fillCtx1.transform(...maskToCanvas1);\n                        if (!scaled1) {\n                            scaled1 = this._scaleImage(maskCanvas1.canvas, (0, _display_utils1.getCurrentTransformInverse)(fillCtx1));\n                            scaled1 = scaled1.img;\n                            if (cache1 && isPatternFill1) {\n                                cache1.set(cacheKey1, scaled1);\n                            }\n                        }\n                        fillCtx1.imageSmoothingEnabled = getImageSmoothingEnabled1((0, _display_utils1.getCurrentTransform)(fillCtx1), img1.interpolate);\n                        drawImageAtIntegerCoords1(fillCtx1, scaled1, 0, 0, scaled1.width, scaled1.height, 0, 0, width2, height1);\n                        fillCtx1.globalCompositeOperation = \"source-in\";\n                        const inverse1 = _util1.Util.transform((0, _display_utils1.getCurrentTransformInverse)(fillCtx1), [\n                            1,\n                            0,\n                            0,\n                            1,\n                            -offsetX1,\n                            -offsetY1\n                        ]);\n                        fillCtx1.fillStyle = isPatternFill1 ? fillColor1.getPattern(ctx1, this, inverse1, _pattern_helper1.PathType.FILL) : fillColor1;\n                        fillCtx1.fillRect(0, 0, width2, height1);\n                        if (cache1 && !isPatternFill1) {\n                            this.cachedCanvases.delete(\"fillCanvas\");\n                            cache1.set(cacheKey1, fillCanvas1.canvas);\n                        }\n                        return {\n                            canvas: fillCanvas1.canvas,\n                            offsetX: Math.round(offsetX1),\n                            offsetY: Math.round(offsetY1)\n                        };\n                    }\n                    setLineWidth(width2) {\n                        if (width2 !== this.current.lineWidth) {\n                            this._cachedScaleForStroking[0] = -1;\n                        }\n                        this.current.lineWidth = width2;\n                        this.ctx.lineWidth = width2;\n                    }\n                    setLineCap(style1) {\n                        this.ctx.lineCap = LINE_CAP_STYLES1[style1];\n                    }\n                    setLineJoin(style1) {\n                        this.ctx.lineJoin = LINE_JOIN_STYLES1[style1];\n                    }\n                    setMiterLimit(limit1) {\n                        this.ctx.miterLimit = limit1;\n                    }\n                    setDash(dashArray1, dashPhase1) {\n                        const ctx1 = this.ctx;\n                        if (ctx1.setLineDash !== undefined) {\n                            ctx1.setLineDash(dashArray1);\n                            ctx1.lineDashOffset = dashPhase1;\n                        }\n                    }\n                    setRenderingIntent(intent1) {}\n                    setFlatness(flatness1) {}\n                    setGState(states1) {\n                        for (const [key1, value1] of states1){\n                            switch(key1){\n                                case \"LW\":\n                                    this.setLineWidth(value1);\n                                    break;\n                                case \"LC\":\n                                    this.setLineCap(value1);\n                                    break;\n                                case \"LJ\":\n                                    this.setLineJoin(value1);\n                                    break;\n                                case \"ML\":\n                                    this.setMiterLimit(value1);\n                                    break;\n                                case \"D\":\n                                    this.setDash(value1[0], value1[1]);\n                                    break;\n                                case \"RI\":\n                                    this.setRenderingIntent(value1);\n                                    break;\n                                case \"FL\":\n                                    this.setFlatness(value1);\n                                    break;\n                                case \"Font\":\n                                    this.setFont(value1[0], value1[1]);\n                                    break;\n                                case \"CA\":\n                                    this.current.strokeAlpha = value1;\n                                    break;\n                                case \"ca\":\n                                    this.current.fillAlpha = value1;\n                                    this.ctx.globalAlpha = value1;\n                                    break;\n                                case \"BM\":\n                                    this.ctx.globalCompositeOperation = value1;\n                                    break;\n                                case \"SMask\":\n                                    this.current.activeSMask = value1 ? this.tempSMask : null;\n                                    this.tempSMask = null;\n                                    this.checkSMaskState();\n                                    break;\n                                case \"TR\":\n                                    this.ctx.filter = this.current.transferMaps = this.filterFactory.addFilter(value1);\n                                    break;\n                            }\n                        }\n                    }\n                    get inSMaskMode() {\n                        return !!this.suspendedCtx;\n                    }\n                    checkSMaskState() {\n                        const inSMaskMode1 = this.inSMaskMode;\n                        if (this.current.activeSMask && !inSMaskMode1) {\n                            this.beginSMaskMode();\n                        } else if (!this.current.activeSMask && inSMaskMode1) {\n                            this.endSMaskMode();\n                        }\n                    }\n                    beginSMaskMode() {\n                        if (this.inSMaskMode) {\n                            throw new Error(\"beginSMaskMode called while already in smask mode\");\n                        }\n                        const drawnWidth1 = this.ctx.canvas.width;\n                        const drawnHeight1 = this.ctx.canvas.height;\n                        const cacheId1 = \"smaskGroupAt\" + this.groupLevel;\n                        const scratchCanvas1 = this.cachedCanvases.getCanvas(cacheId1, drawnWidth1, drawnHeight1);\n                        this.suspendedCtx = this.ctx;\n                        this.ctx = scratchCanvas1.context;\n                        const ctx1 = this.ctx;\n                        ctx1.setTransform(...(0, _display_utils1.getCurrentTransform)(this.suspendedCtx));\n                        copyCtxState1(this.suspendedCtx, ctx1);\n                        mirrorContextOperations1(ctx1, this.suspendedCtx);\n                        this.setGState([\n                            [\n                                \"BM\",\n                                \"source-over\"\n                            ],\n                            [\n                                \"ca\",\n                                1\n                            ],\n                            [\n                                \"CA\",\n                                1\n                            ]\n                        ]);\n                    }\n                    endSMaskMode() {\n                        if (!this.inSMaskMode) {\n                            throw new Error(\"endSMaskMode called while not in smask mode\");\n                        }\n                        this.ctx._removeMirroring();\n                        copyCtxState1(this.ctx, this.suspendedCtx);\n                        this.ctx = this.suspendedCtx;\n                        this.suspendedCtx = null;\n                    }\n                    compose(dirtyBox1) {\n                        if (!this.current.activeSMask) {\n                            return;\n                        }\n                        if (!dirtyBox1) {\n                            dirtyBox1 = [\n                                0,\n                                0,\n                                this.ctx.canvas.width,\n                                this.ctx.canvas.height\n                            ];\n                        } else {\n                            dirtyBox1[0] = Math.floor(dirtyBox1[0]);\n                            dirtyBox1[1] = Math.floor(dirtyBox1[1]);\n                            dirtyBox1[2] = Math.ceil(dirtyBox1[2]);\n                            dirtyBox1[3] = Math.ceil(dirtyBox1[3]);\n                        }\n                        const smask1 = this.current.activeSMask;\n                        const suspendedCtx1 = this.suspendedCtx;\n                        composeSMask1(suspendedCtx1, smask1, this.ctx, dirtyBox1);\n                        this.ctx.save();\n                        this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n                        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n                        this.ctx.restore();\n                    }\n                    save() {\n                        if (this.inSMaskMode) {\n                            copyCtxState1(this.ctx, this.suspendedCtx);\n                            this.suspendedCtx.save();\n                        } else {\n                            this.ctx.save();\n                        }\n                        const old1 = this.current;\n                        this.stateStack.push(old1);\n                        this.current = old1.clone();\n                    }\n                    restore() {\n                        if (this.stateStack.length === 0 && this.inSMaskMode) {\n                            this.endSMaskMode();\n                        }\n                        if (this.stateStack.length !== 0) {\n                            this.current = this.stateStack.pop();\n                            if (this.inSMaskMode) {\n                                this.suspendedCtx.restore();\n                                copyCtxState1(this.suspendedCtx, this.ctx);\n                            } else {\n                                this.ctx.restore();\n                            }\n                            this.checkSMaskState();\n                            this.pendingClip = null;\n                            this._cachedScaleForStroking[0] = -1;\n                            this._cachedGetSinglePixelWidth = null;\n                        }\n                    }\n                    transform(a1, b4, c4, d5, e1, f1) {\n                        this.ctx.transform(a1, b4, c4, d5, e1, f1);\n                        this._cachedScaleForStroking[0] = -1;\n                        this._cachedGetSinglePixelWidth = null;\n                    }\n                    constructPath(ops1, args1, minMax1) {\n                        const ctx1 = this.ctx;\n                        const current1 = this.current;\n                        let x4 = current1.x, y4 = current1.y;\n                        let startX1, startY1;\n                        const currentTransform1 = (0, _display_utils1.getCurrentTransform)(ctx1);\n                        const isScalingMatrix1 = currentTransform1[0] === 0 && currentTransform1[3] === 0 || currentTransform1[1] === 0 && currentTransform1[2] === 0;\n                        const minMaxForBezier1 = isScalingMatrix1 ? minMax1.slice(0) : null;\n                        for(let i1 = 0, j1 = 0, ii1 = ops1.length; i1 < ii1; i1++){\n                            switch(ops1[i1] | 0){\n                                case _util1.OPS.rectangle:\n                                    x4 = args1[j1++];\n                                    y4 = args1[j1++];\n                                    const width2 = args1[j1++];\n                                    const height1 = args1[j1++];\n                                    const xw1 = x4 + width2;\n                                    const yh1 = y4 + height1;\n                                    ctx1.moveTo(x4, y4);\n                                    if (width2 === 0 || height1 === 0) {\n                                        ctx1.lineTo(xw1, yh1);\n                                    } else {\n                                        ctx1.lineTo(xw1, y4);\n                                        ctx1.lineTo(xw1, yh1);\n                                        ctx1.lineTo(x4, yh1);\n                                    }\n                                    if (!isScalingMatrix1) {\n                                        current1.updateRectMinMax(currentTransform1, [\n                                            x4,\n                                            y4,\n                                            xw1,\n                                            yh1\n                                        ]);\n                                    }\n                                    ctx1.closePath();\n                                    break;\n                                case _util1.OPS.moveTo:\n                                    x4 = args1[j1++];\n                                    y4 = args1[j1++];\n                                    ctx1.moveTo(x4, y4);\n                                    if (!isScalingMatrix1) {\n                                        current1.updatePathMinMax(currentTransform1, x4, y4);\n                                    }\n                                    break;\n                                case _util1.OPS.lineTo:\n                                    x4 = args1[j1++];\n                                    y4 = args1[j1++];\n                                    ctx1.lineTo(x4, y4);\n                                    if (!isScalingMatrix1) {\n                                        current1.updatePathMinMax(currentTransform1, x4, y4);\n                                    }\n                                    break;\n                                case _util1.OPS.curveTo:\n                                    startX1 = x4;\n                                    startY1 = y4;\n                                    x4 = args1[j1 + 4];\n                                    y4 = args1[j1 + 5];\n                                    ctx1.bezierCurveTo(args1[j1], args1[j1 + 1], args1[j1 + 2], args1[j1 + 3], x4, y4);\n                                    current1.updateCurvePathMinMax(currentTransform1, startX1, startY1, args1[j1], args1[j1 + 1], args1[j1 + 2], args1[j1 + 3], x4, y4, minMaxForBezier1);\n                                    j1 += 6;\n                                    break;\n                                case _util1.OPS.curveTo2:\n                                    startX1 = x4;\n                                    startY1 = y4;\n                                    ctx1.bezierCurveTo(x4, y4, args1[j1], args1[j1 + 1], args1[j1 + 2], args1[j1 + 3]);\n                                    current1.updateCurvePathMinMax(currentTransform1, startX1, startY1, x4, y4, args1[j1], args1[j1 + 1], args1[j1 + 2], args1[j1 + 3], minMaxForBezier1);\n                                    x4 = args1[j1 + 2];\n                                    y4 = args1[j1 + 3];\n                                    j1 += 4;\n                                    break;\n                                case _util1.OPS.curveTo3:\n                                    startX1 = x4;\n                                    startY1 = y4;\n                                    x4 = args1[j1 + 2];\n                                    y4 = args1[j1 + 3];\n                                    ctx1.bezierCurveTo(args1[j1], args1[j1 + 1], x4, y4, x4, y4);\n                                    current1.updateCurvePathMinMax(currentTransform1, startX1, startY1, args1[j1], args1[j1 + 1], x4, y4, x4, y4, minMaxForBezier1);\n                                    j1 += 4;\n                                    break;\n                                case _util1.OPS.closePath:\n                                    ctx1.closePath();\n                                    break;\n                            }\n                        }\n                        if (isScalingMatrix1) {\n                            current1.updateScalingPathMinMax(currentTransform1, minMaxForBezier1);\n                        }\n                        current1.setCurrentPoint(x4, y4);\n                    }\n                    closePath() {\n                        this.ctx.closePath();\n                    }\n                    stroke(consumePath1 = true) {\n                        const ctx1 = this.ctx;\n                        const strokeColor1 = this.current.strokeColor;\n                        ctx1.globalAlpha = this.current.strokeAlpha;\n                        if (this.contentVisible) {\n                            if (typeof strokeColor1 === \"object\" && strokeColor1?.getPattern) {\n                                ctx1.save();\n                                ctx1.strokeStyle = strokeColor1.getPattern(ctx1, this, (0, _display_utils1.getCurrentTransformInverse)(ctx1), _pattern_helper1.PathType.STROKE);\n                                this.rescaleAndStroke(false);\n                                ctx1.restore();\n                            } else {\n                                this.rescaleAndStroke(true);\n                            }\n                        }\n                        if (consumePath1) {\n                            this.consumePath(this.current.getClippedPathBoundingBox());\n                        }\n                        ctx1.globalAlpha = this.current.fillAlpha;\n                    }\n                    closeStroke() {\n                        this.closePath();\n                        this.stroke();\n                    }\n                    fill(consumePath1 = true) {\n                        const ctx1 = this.ctx;\n                        const fillColor1 = this.current.fillColor;\n                        const isPatternFill1 = this.current.patternFill;\n                        let needRestore1 = false;\n                        if (isPatternFill1) {\n                            ctx1.save();\n                            ctx1.fillStyle = fillColor1.getPattern(ctx1, this, (0, _display_utils1.getCurrentTransformInverse)(ctx1), _pattern_helper1.PathType.FILL);\n                            needRestore1 = true;\n                        }\n                        const intersect1 = this.current.getClippedPathBoundingBox();\n                        if (this.contentVisible && intersect1 !== null) {\n                            if (this.pendingEOFill) {\n                                ctx1.fill(\"evenodd\");\n                                this.pendingEOFill = false;\n                            } else {\n                                ctx1.fill();\n                            }\n                        }\n                        if (needRestore1) {\n                            ctx1.restore();\n                        }\n                        if (consumePath1) {\n                            this.consumePath(intersect1);\n                        }\n                    }\n                    eoFill() {\n                        this.pendingEOFill = true;\n                        this.fill();\n                    }\n                    fillStroke() {\n                        this.fill(false);\n                        this.stroke(false);\n                        this.consumePath();\n                    }\n                    eoFillStroke() {\n                        this.pendingEOFill = true;\n                        this.fillStroke();\n                    }\n                    closeFillStroke() {\n                        this.closePath();\n                        this.fillStroke();\n                    }\n                    closeEOFillStroke() {\n                        this.pendingEOFill = true;\n                        this.closePath();\n                        this.fillStroke();\n                    }\n                    endPath() {\n                        this.consumePath();\n                    }\n                    clip() {\n                        this.pendingClip = NORMAL_CLIP1;\n                    }\n                    eoClip() {\n                        this.pendingClip = EO_CLIP1;\n                    }\n                    beginText() {\n                        this.current.textMatrix = _util1.IDENTITY_MATRIX;\n                        this.current.textMatrixScale = 1;\n                        this.current.x = this.current.lineX = 0;\n                        this.current.y = this.current.lineY = 0;\n                    }\n                    endText() {\n                        const paths1 = this.pendingTextPaths;\n                        const ctx1 = this.ctx;\n                        if (paths1 === undefined) {\n                            ctx1.beginPath();\n                            return;\n                        }\n                        ctx1.save();\n                        ctx1.beginPath();\n                        for (const path1 of paths1){\n                            ctx1.setTransform(...path1.transform);\n                            ctx1.translate(path1.x, path1.y);\n                            path1.addToPath(ctx1, path1.fontSize);\n                        }\n                        ctx1.restore();\n                        ctx1.clip();\n                        ctx1.beginPath();\n                        delete this.pendingTextPaths;\n                    }\n                    setCharSpacing(spacing1) {\n                        this.current.charSpacing = spacing1;\n                    }\n                    setWordSpacing(spacing1) {\n                        this.current.wordSpacing = spacing1;\n                    }\n                    setHScale(scale1) {\n                        this.current.textHScale = scale1 / 100;\n                    }\n                    setLeading(leading1) {\n                        this.current.leading = -leading1;\n                    }\n                    setFont(fontRefName1, size1) {\n                        const fontObj1 = this.commonObjs.get(fontRefName1);\n                        const current1 = this.current;\n                        if (!fontObj1) {\n                            throw new Error(`Can't find font for ${fontRefName1}`);\n                        }\n                        current1.fontMatrix = fontObj1.fontMatrix || _util1.FONT_IDENTITY_MATRIX;\n                        if (current1.fontMatrix[0] === 0 || current1.fontMatrix[3] === 0) {\n                            (0, _util1.warn)(\"Invalid font matrix for font \" + fontRefName1);\n                        }\n                        if (size1 < 0) {\n                            size1 = -size1;\n                            current1.fontDirection = -1;\n                        } else {\n                            current1.fontDirection = 1;\n                        }\n                        this.current.font = fontObj1;\n                        this.current.fontSize = size1;\n                        if (fontObj1.isType3Font) {\n                            return;\n                        }\n                        const name1 = fontObj1.loadedName || \"sans-serif\";\n                        const typeface1 = fontObj1.systemFontInfo?.css || `\"${name1}\", ${fontObj1.fallbackName}`;\n                        let bold1 = \"normal\";\n                        if (fontObj1.black) {\n                            bold1 = \"900\";\n                        } else if (fontObj1.bold) {\n                            bold1 = \"bold\";\n                        }\n                        const italic1 = fontObj1.italic ? \"italic\" : \"normal\";\n                        let browserFontSize1 = size1;\n                        if (size1 < MIN_FONT_SIZE1) {\n                            browserFontSize1 = MIN_FONT_SIZE1;\n                        } else if (size1 > MAX_FONT_SIZE1) {\n                            browserFontSize1 = MAX_FONT_SIZE1;\n                        }\n                        this.current.fontSizeScale = size1 / browserFontSize1;\n                        this.ctx.font = `${italic1} ${bold1} ${browserFontSize1}px ${typeface1}`;\n                    }\n                    setTextRenderingMode(mode1) {\n                        this.current.textRenderingMode = mode1;\n                    }\n                    setTextRise(rise1) {\n                        this.current.textRise = rise1;\n                    }\n                    moveText(x4, y4) {\n                        this.current.x = this.current.lineX += x4;\n                        this.current.y = this.current.lineY += y4;\n                    }\n                    setLeadingMoveText(x4, y4) {\n                        this.setLeading(-y4);\n                        this.moveText(x4, y4);\n                    }\n                    setTextMatrix(a1, b4, c4, d5, e1, f1) {\n                        this.current.textMatrix = [\n                            a1,\n                            b4,\n                            c4,\n                            d5,\n                            e1,\n                            f1\n                        ];\n                        this.current.textMatrixScale = Math.hypot(a1, b4);\n                        this.current.x = this.current.lineX = 0;\n                        this.current.y = this.current.lineY = 0;\n                    }\n                    nextLine() {\n                        this.moveText(0, this.current.leading);\n                    }\n                    paintChar(character1, x4, y4, patternTransform1) {\n                        const ctx1 = this.ctx;\n                        const current1 = this.current;\n                        const font1 = current1.font;\n                        const textRenderingMode1 = current1.textRenderingMode;\n                        const fontSize1 = current1.fontSize / current1.fontSizeScale;\n                        const fillStrokeMode1 = textRenderingMode1 & _util1.TextRenderingMode.FILL_STROKE_MASK;\n                        const isAddToPathSet1 = !!(textRenderingMode1 & _util1.TextRenderingMode.ADD_TO_PATH_FLAG);\n                        const patternFill1 = current1.patternFill && !font1.missingFile;\n                        let addToPath1;\n                        if (font1.disableFontFace || isAddToPathSet1 || patternFill1) {\n                            addToPath1 = font1.getPathGenerator(this.commonObjs, character1);\n                        }\n                        if (font1.disableFontFace || patternFill1) {\n                            ctx1.save();\n                            ctx1.translate(x4, y4);\n                            ctx1.beginPath();\n                            addToPath1(ctx1, fontSize1);\n                            if (patternTransform1) {\n                                ctx1.setTransform(...patternTransform1);\n                            }\n                            if (fillStrokeMode1 === _util1.TextRenderingMode.FILL || fillStrokeMode1 === _util1.TextRenderingMode.FILL_STROKE) {\n                                ctx1.fill();\n                            }\n                            if (fillStrokeMode1 === _util1.TextRenderingMode.STROKE || fillStrokeMode1 === _util1.TextRenderingMode.FILL_STROKE) {\n                                ctx1.stroke();\n                            }\n                            ctx1.restore();\n                        } else {\n                            if (fillStrokeMode1 === _util1.TextRenderingMode.FILL || fillStrokeMode1 === _util1.TextRenderingMode.FILL_STROKE) {\n                                ctx1.fillText(character1, x4, y4);\n                            }\n                            if (fillStrokeMode1 === _util1.TextRenderingMode.STROKE || fillStrokeMode1 === _util1.TextRenderingMode.FILL_STROKE) {\n                                ctx1.strokeText(character1, x4, y4);\n                            }\n                        }\n                        if (isAddToPathSet1) {\n                            const paths1 = this.pendingTextPaths ||= [];\n                            paths1.push({\n                                transform: (0, _display_utils1.getCurrentTransform)(ctx1),\n                                x: x4,\n                                y: y4,\n                                fontSize: fontSize1,\n                                addToPath: addToPath1\n                            });\n                        }\n                    }\n                    get isFontSubpixelAAEnabled() {\n                        const { context: ctx1 } = this.cachedCanvases.getCanvas(\"isFontSubpixelAAEnabled\", 10, 10);\n                        ctx1.scale(1.5, 1);\n                        ctx1.fillText(\"I\", 0, 10);\n                        const data1 = ctx1.getImageData(0, 0, 10, 10).data;\n                        let enabled1 = false;\n                        for(let i1 = 3; i1 < data1.length; i1 += 4){\n                            if (data1[i1] > 0 && data1[i1] < 255) {\n                                enabled1 = true;\n                                break;\n                            }\n                        }\n                        return (0, _util1.shadow)(this, \"isFontSubpixelAAEnabled\", enabled1);\n                    }\n                    showText(glyphs1) {\n                        const current1 = this.current;\n                        const font1 = current1.font;\n                        if (font1.isType3Font) {\n                            return this.showType3Text(glyphs1);\n                        }\n                        const fontSize1 = current1.fontSize;\n                        if (fontSize1 === 0) {\n                            return undefined;\n                        }\n                        const ctx1 = this.ctx;\n                        const fontSizeScale1 = current1.fontSizeScale;\n                        const charSpacing1 = current1.charSpacing;\n                        const wordSpacing1 = current1.wordSpacing;\n                        const fontDirection1 = current1.fontDirection;\n                        const textHScale1 = current1.textHScale * fontDirection1;\n                        const glyphsLength1 = glyphs1.length;\n                        const vertical1 = font1.vertical;\n                        const spacingDir1 = vertical1 ? 1 : -1;\n                        const defaultVMetrics1 = font1.defaultVMetrics;\n                        const widthAdvanceScale1 = fontSize1 * current1.fontMatrix[0];\n                        const simpleFillText1 = current1.textRenderingMode === _util1.TextRenderingMode.FILL && !font1.disableFontFace && !current1.patternFill;\n                        ctx1.save();\n                        ctx1.transform(...current1.textMatrix);\n                        ctx1.translate(current1.x, current1.y + current1.textRise);\n                        if (fontDirection1 > 0) {\n                            ctx1.scale(textHScale1, -1);\n                        } else {\n                            ctx1.scale(textHScale1, 1);\n                        }\n                        let patternTransform1;\n                        if (current1.patternFill) {\n                            ctx1.save();\n                            const pattern1 = current1.fillColor.getPattern(ctx1, this, (0, _display_utils1.getCurrentTransformInverse)(ctx1), _pattern_helper1.PathType.FILL);\n                            patternTransform1 = (0, _display_utils1.getCurrentTransform)(ctx1);\n                            ctx1.restore();\n                            ctx1.fillStyle = pattern1;\n                        }\n                        let lineWidth1 = current1.lineWidth;\n                        const scale1 = current1.textMatrixScale;\n                        if (scale1 === 0 || lineWidth1 === 0) {\n                            const fillStrokeMode1 = current1.textRenderingMode & _util1.TextRenderingMode.FILL_STROKE_MASK;\n                            if (fillStrokeMode1 === _util1.TextRenderingMode.STROKE || fillStrokeMode1 === _util1.TextRenderingMode.FILL_STROKE) {\n                                lineWidth1 = this.getSinglePixelWidth();\n                            }\n                        } else {\n                            lineWidth1 /= scale1;\n                        }\n                        if (fontSizeScale1 !== 1.0) {\n                            ctx1.scale(fontSizeScale1, fontSizeScale1);\n                            lineWidth1 /= fontSizeScale1;\n                        }\n                        ctx1.lineWidth = lineWidth1;\n                        if (font1.isInvalidPDFjsFont) {\n                            const chars1 = [];\n                            let width2 = 0;\n                            for (const glyph1 of glyphs1){\n                                chars1.push(glyph1.unicode);\n                                width2 += glyph1.width;\n                            }\n                            ctx1.fillText(chars1.join(\"\"), 0, 0);\n                            current1.x += width2 * widthAdvanceScale1 * textHScale1;\n                            ctx1.restore();\n                            this.compose();\n                            return undefined;\n                        }\n                        let x4 = 0, i1;\n                        for(i1 = 0; i1 < glyphsLength1; ++i1){\n                            const glyph1 = glyphs1[i1];\n                            if (typeof glyph1 === \"number\") {\n                                x4 += spacingDir1 * glyph1 * fontSize1 / 1000;\n                                continue;\n                            }\n                            let restoreNeeded1 = false;\n                            const spacing1 = (glyph1.isSpace ? wordSpacing1 : 0) + charSpacing1;\n                            const character1 = glyph1.fontChar;\n                            const accent1 = glyph1.accent;\n                            let scaledX1, scaledY1;\n                            let width2 = glyph1.width;\n                            if (vertical1) {\n                                const vmetric1 = glyph1.vmetric || defaultVMetrics1;\n                                const vx1 = -(glyph1.vmetric ? vmetric1[1] : width2 * 0.5) * widthAdvanceScale1;\n                                const vy1 = vmetric1[2] * widthAdvanceScale1;\n                                width2 = vmetric1 ? -vmetric1[0] : width2;\n                                scaledX1 = vx1 / fontSizeScale1;\n                                scaledY1 = (x4 + vy1) / fontSizeScale1;\n                            } else {\n                                scaledX1 = x4 / fontSizeScale1;\n                                scaledY1 = 0;\n                            }\n                            if (font1.remeasure && width2 > 0) {\n                                const measuredWidth1 = ctx1.measureText(character1).width * 1000 / fontSize1 * fontSizeScale1;\n                                if (width2 < measuredWidth1 && this.isFontSubpixelAAEnabled) {\n                                    const characterScaleX1 = width2 / measuredWidth1;\n                                    restoreNeeded1 = true;\n                                    ctx1.save();\n                                    ctx1.scale(characterScaleX1, 1);\n                                    scaledX1 /= characterScaleX1;\n                                } else if (width2 !== measuredWidth1) {\n                                    scaledX1 += (width2 - measuredWidth1) / 2000 * fontSize1 / fontSizeScale1;\n                                }\n                            }\n                            if (this.contentVisible && (glyph1.isInFont || font1.missingFile)) {\n                                if (simpleFillText1 && !accent1) {\n                                    ctx1.fillText(character1, scaledX1, scaledY1);\n                                } else {\n                                    this.paintChar(character1, scaledX1, scaledY1, patternTransform1);\n                                    if (accent1) {\n                                        const scaledAccentX1 = scaledX1 + fontSize1 * accent1.offset.x / fontSizeScale1;\n                                        const scaledAccentY1 = scaledY1 - fontSize1 * accent1.offset.y / fontSizeScale1;\n                                        this.paintChar(accent1.fontChar, scaledAccentX1, scaledAccentY1, patternTransform1);\n                                    }\n                                }\n                            }\n                            const charWidth1 = vertical1 ? width2 * widthAdvanceScale1 - spacing1 * fontDirection1 : width2 * widthAdvanceScale1 + spacing1 * fontDirection1;\n                            x4 += charWidth1;\n                            if (restoreNeeded1) {\n                                ctx1.restore();\n                            }\n                        }\n                        if (vertical1) {\n                            current1.y -= x4;\n                        } else {\n                            current1.x += x4 * textHScale1;\n                        }\n                        ctx1.restore();\n                        this.compose();\n                        return undefined;\n                    }\n                    showType3Text(glyphs1) {\n                        const ctx1 = this.ctx;\n                        const current1 = this.current;\n                        const font1 = current1.font;\n                        const fontSize1 = current1.fontSize;\n                        const fontDirection1 = current1.fontDirection;\n                        const spacingDir1 = font1.vertical ? 1 : -1;\n                        const charSpacing1 = current1.charSpacing;\n                        const wordSpacing1 = current1.wordSpacing;\n                        const textHScale1 = current1.textHScale * fontDirection1;\n                        const fontMatrix1 = current1.fontMatrix || _util1.FONT_IDENTITY_MATRIX;\n                        const glyphsLength1 = glyphs1.length;\n                        const isTextInvisible1 = current1.textRenderingMode === _util1.TextRenderingMode.INVISIBLE;\n                        let i1, glyph1, width2, spacingLength1;\n                        if (isTextInvisible1 || fontSize1 === 0) {\n                            return;\n                        }\n                        this._cachedScaleForStroking[0] = -1;\n                        this._cachedGetSinglePixelWidth = null;\n                        ctx1.save();\n                        ctx1.transform(...current1.textMatrix);\n                        ctx1.translate(current1.x, current1.y);\n                        ctx1.scale(textHScale1, fontDirection1);\n                        for(i1 = 0; i1 < glyphsLength1; ++i1){\n                            glyph1 = glyphs1[i1];\n                            if (typeof glyph1 === \"number\") {\n                                spacingLength1 = spacingDir1 * glyph1 * fontSize1 / 1000;\n                                this.ctx.translate(spacingLength1, 0);\n                                current1.x += spacingLength1 * textHScale1;\n                                continue;\n                            }\n                            const spacing1 = (glyph1.isSpace ? wordSpacing1 : 0) + charSpacing1;\n                            const operatorList1 = font1.charProcOperatorList[glyph1.operatorListId];\n                            if (!operatorList1) {\n                                (0, _util1.warn)(`Type3 character \"${glyph1.operatorListId}\" is not available.`);\n                                continue;\n                            }\n                            if (this.contentVisible) {\n                                this.processingType3 = glyph1;\n                                this.save();\n                                ctx1.scale(fontSize1, fontSize1);\n                                ctx1.transform(...fontMatrix1);\n                                this.executeOperatorList(operatorList1);\n                                this.restore();\n                            }\n                            const transformed1 = _util1.Util.applyTransform([\n                                glyph1.width,\n                                0\n                            ], fontMatrix1);\n                            width2 = transformed1[0] * fontSize1 + spacing1;\n                            ctx1.translate(width2, 0);\n                            current1.x += width2 * textHScale1;\n                        }\n                        ctx1.restore();\n                        this.processingType3 = null;\n                    }\n                    setCharWidth(xWidth1, yWidth1) {}\n                    setCharWidthAndBounds(xWidth1, yWidth1, llx1, lly1, urx1, ury1) {\n                        this.ctx.rect(llx1, lly1, urx1 - llx1, ury1 - lly1);\n                        this.ctx.clip();\n                        this.endPath();\n                    }\n                    getColorN_Pattern(IR1) {\n                        let pattern1;\n                        if (IR1[0] === \"TilingPattern\") {\n                            const color1 = IR1[1];\n                            const baseTransform1 = this.baseTransform || (0, _display_utils1.getCurrentTransform)(this.ctx);\n                            const canvasGraphicsFactory1 = {\n                                createCanvasGraphics: (ctx1)=>{\n                                    return new CanvasGraphics1(ctx1, this.commonObjs, this.objs, this.canvasFactory, this.filterFactory, {\n                                        optionalContentConfig: this.optionalContentConfig,\n                                        markedContentStack: this.markedContentStack\n                                    });\n                                }\n                            };\n                            pattern1 = new _pattern_helper1.TilingPattern(IR1, color1, this.ctx, canvasGraphicsFactory1, baseTransform1);\n                        } else {\n                            pattern1 = this._getPattern(IR1[1], IR1[2]);\n                        }\n                        return pattern1;\n                    }\n                    setStrokeColorN() {\n                        this.current.strokeColor = this.getColorN_Pattern(arguments);\n                    }\n                    setFillColorN() {\n                        this.current.fillColor = this.getColorN_Pattern(arguments);\n                        this.current.patternFill = true;\n                    }\n                    setStrokeRGBColor(r1, g1, b4) {\n                        const color1 = _util1.Util.makeHexColor(r1, g1, b4);\n                        this.ctx.strokeStyle = color1;\n                        this.current.strokeColor = color1;\n                    }\n                    setFillRGBColor(r1, g1, b4) {\n                        const color1 = _util1.Util.makeHexColor(r1, g1, b4);\n                        this.ctx.fillStyle = color1;\n                        this.current.fillColor = color1;\n                        this.current.patternFill = false;\n                    }\n                    _getPattern(objId1, matrix1 = null) {\n                        let pattern1;\n                        if (this.cachedPatterns.has(objId1)) {\n                            pattern1 = this.cachedPatterns.get(objId1);\n                        } else {\n                            pattern1 = (0, _pattern_helper1.getShadingPattern)(this.getObject(objId1));\n                            this.cachedPatterns.set(objId1, pattern1);\n                        }\n                        if (matrix1) {\n                            pattern1.matrix = matrix1;\n                        }\n                        return pattern1;\n                    }\n                    shadingFill(objId1) {\n                        if (!this.contentVisible) {\n                            return;\n                        }\n                        const ctx1 = this.ctx;\n                        this.save();\n                        const pattern1 = this._getPattern(objId1);\n                        ctx1.fillStyle = pattern1.getPattern(ctx1, this, (0, _display_utils1.getCurrentTransformInverse)(ctx1), _pattern_helper1.PathType.SHADING);\n                        const inv1 = (0, _display_utils1.getCurrentTransformInverse)(ctx1);\n                        if (inv1) {\n                            const { width: width2, height: height1 } = ctx1.canvas;\n                            const [x01, y01, x11, y11] = _util1.Util.getAxialAlignedBoundingBox([\n                                0,\n                                0,\n                                width2,\n                                height1\n                            ], inv1);\n                            this.ctx.fillRect(x01, y01, x11 - x01, y11 - y01);\n                        } else {\n                            this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);\n                        }\n                        this.compose(this.current.getClippedPathBoundingBox());\n                        this.restore();\n                    }\n                    beginInlineImage() {\n                        (0, _util1.unreachable)(\"Should not call beginInlineImage\");\n                    }\n                    beginImageData() {\n                        (0, _util1.unreachable)(\"Should not call beginImageData\");\n                    }\n                    paintFormXObjectBegin(matrix1, bbox1) {\n                        if (!this.contentVisible) {\n                            return;\n                        }\n                        this.save();\n                        this.baseTransformStack.push(this.baseTransform);\n                        if (Array.isArray(matrix1) && matrix1.length === 6) {\n                            this.transform(...matrix1);\n                        }\n                        this.baseTransform = (0, _display_utils1.getCurrentTransform)(this.ctx);\n                        if (bbox1) {\n                            const width2 = bbox1[2] - bbox1[0];\n                            const height1 = bbox1[3] - bbox1[1];\n                            this.ctx.rect(bbox1[0], bbox1[1], width2, height1);\n                            this.current.updateRectMinMax((0, _display_utils1.getCurrentTransform)(this.ctx), bbox1);\n                            this.clip();\n                            this.endPath();\n                        }\n                    }\n                    paintFormXObjectEnd() {\n                        if (!this.contentVisible) {\n                            return;\n                        }\n                        this.restore();\n                        this.baseTransform = this.baseTransformStack.pop();\n                    }\n                    beginGroup(group1) {\n                        if (!this.contentVisible) {\n                            return;\n                        }\n                        this.save();\n                        if (this.inSMaskMode) {\n                            this.endSMaskMode();\n                            this.current.activeSMask = null;\n                        }\n                        const currentCtx1 = this.ctx;\n                        if (!group1.isolated) {\n                            (0, _util1.info)(\"TODO: Support non-isolated groups.\");\n                        }\n                        if (group1.knockout) {\n                            (0, _util1.warn)(\"Knockout groups not supported.\");\n                        }\n                        const currentTransform1 = (0, _display_utils1.getCurrentTransform)(currentCtx1);\n                        if (group1.matrix) {\n                            currentCtx1.transform(...group1.matrix);\n                        }\n                        if (!group1.bbox) {\n                            throw new Error(\"Bounding box is required.\");\n                        }\n                        let bounds1 = _util1.Util.getAxialAlignedBoundingBox(group1.bbox, (0, _display_utils1.getCurrentTransform)(currentCtx1));\n                        const canvasBounds1 = [\n                            0,\n                            0,\n                            currentCtx1.canvas.width,\n                            currentCtx1.canvas.height\n                        ];\n                        bounds1 = _util1.Util.intersect(bounds1, canvasBounds1) || [\n                            0,\n                            0,\n                            0,\n                            0\n                        ];\n                        const offsetX1 = Math.floor(bounds1[0]);\n                        const offsetY1 = Math.floor(bounds1[1]);\n                        let drawnWidth1 = Math.max(Math.ceil(bounds1[2]) - offsetX1, 1);\n                        let drawnHeight1 = Math.max(Math.ceil(bounds1[3]) - offsetY1, 1);\n                        let scaleX1 = 1, scaleY1 = 1;\n                        if (drawnWidth1 > MAX_GROUP_SIZE1) {\n                            scaleX1 = drawnWidth1 / MAX_GROUP_SIZE1;\n                            drawnWidth1 = MAX_GROUP_SIZE1;\n                        }\n                        if (drawnHeight1 > MAX_GROUP_SIZE1) {\n                            scaleY1 = drawnHeight1 / MAX_GROUP_SIZE1;\n                            drawnHeight1 = MAX_GROUP_SIZE1;\n                        }\n                        this.current.startNewPathAndClipBox([\n                            0,\n                            0,\n                            drawnWidth1,\n                            drawnHeight1\n                        ]);\n                        let cacheId1 = \"groupAt\" + this.groupLevel;\n                        if (group1.smask) {\n                            cacheId1 += \"_smask_\" + this.smaskCounter++ % 2;\n                        }\n                        const scratchCanvas1 = this.cachedCanvases.getCanvas(cacheId1, drawnWidth1, drawnHeight1);\n                        const groupCtx1 = scratchCanvas1.context;\n                        groupCtx1.scale(1 / scaleX1, 1 / scaleY1);\n                        groupCtx1.translate(-offsetX1, -offsetY1);\n                        groupCtx1.transform(...currentTransform1);\n                        if (group1.smask) {\n                            this.smaskStack.push({\n                                canvas: scratchCanvas1.canvas,\n                                context: groupCtx1,\n                                offsetX: offsetX1,\n                                offsetY: offsetY1,\n                                scaleX: scaleX1,\n                                scaleY: scaleY1,\n                                subtype: group1.smask.subtype,\n                                backdrop: group1.smask.backdrop,\n                                transferMap: group1.smask.transferMap || null,\n                                startTransformInverse: null\n                            });\n                        } else {\n                            currentCtx1.setTransform(1, 0, 0, 1, 0, 0);\n                            currentCtx1.translate(offsetX1, offsetY1);\n                            currentCtx1.scale(scaleX1, scaleY1);\n                            currentCtx1.save();\n                        }\n                        copyCtxState1(currentCtx1, groupCtx1);\n                        this.ctx = groupCtx1;\n                        this.setGState([\n                            [\n                                \"BM\",\n                                \"source-over\"\n                            ],\n                            [\n                                \"ca\",\n                                1\n                            ],\n                            [\n                                \"CA\",\n                                1\n                            ]\n                        ]);\n                        this.groupStack.push(currentCtx1);\n                        this.groupLevel++;\n                    }\n                    endGroup(group1) {\n                        if (!this.contentVisible) {\n                            return;\n                        }\n                        this.groupLevel--;\n                        const groupCtx1 = this.ctx;\n                        const ctx1 = this.groupStack.pop();\n                        this.ctx = ctx1;\n                        this.ctx.imageSmoothingEnabled = false;\n                        if (group1.smask) {\n                            this.tempSMask = this.smaskStack.pop();\n                            this.restore();\n                        } else {\n                            this.ctx.restore();\n                            const currentMtx1 = (0, _display_utils1.getCurrentTransform)(this.ctx);\n                            this.restore();\n                            this.ctx.save();\n                            this.ctx.setTransform(...currentMtx1);\n                            const dirtyBox1 = _util1.Util.getAxialAlignedBoundingBox([\n                                0,\n                                0,\n                                groupCtx1.canvas.width,\n                                groupCtx1.canvas.height\n                            ], currentMtx1);\n                            this.ctx.drawImage(groupCtx1.canvas, 0, 0);\n                            this.ctx.restore();\n                            this.compose(dirtyBox1);\n                        }\n                    }\n                    beginAnnotation(id1, rect3, transform1, matrix1, hasOwnCanvas1) {\n                        this.#restoreInitialState();\n                        resetCtxToDefault1(this.ctx);\n                        this.ctx.save();\n                        this.save();\n                        if (this.baseTransform) {\n                            this.ctx.setTransform(...this.baseTransform);\n                        }\n                        if (Array.isArray(rect3) && rect3.length === 4) {\n                            const width2 = rect3[2] - rect3[0];\n                            const height1 = rect3[3] - rect3[1];\n                            if (hasOwnCanvas1 && this.annotationCanvasMap) {\n                                transform1 = transform1.slice();\n                                transform1[4] -= rect3[0];\n                                transform1[5] -= rect3[1];\n                                rect3 = rect3.slice();\n                                rect3[0] = rect3[1] = 0;\n                                rect3[2] = width2;\n                                rect3[3] = height1;\n                                const [scaleX1, scaleY1] = _util1.Util.singularValueDecompose2dScale((0, _display_utils1.getCurrentTransform)(this.ctx));\n                                const { viewportScale: viewportScale1 } = this;\n                                const canvasWidth1 = Math.ceil(width2 * this.outputScaleX * viewportScale1);\n                                const canvasHeight1 = Math.ceil(height1 * this.outputScaleY * viewportScale1);\n                                this.annotationCanvas = this.canvasFactory.create(canvasWidth1, canvasHeight1);\n                                const { canvas: canvas1, context: context1 } = this.annotationCanvas;\n                                this.annotationCanvasMap.set(id1, canvas1);\n                                this.annotationCanvas.savedCtx = this.ctx;\n                                this.ctx = context1;\n                                this.ctx.save();\n                                this.ctx.setTransform(scaleX1, 0, 0, -scaleY1, 0, height1 * scaleY1);\n                                resetCtxToDefault1(this.ctx);\n                            } else {\n                                resetCtxToDefault1(this.ctx);\n                                this.ctx.rect(rect3[0], rect3[1], width2, height1);\n                                this.ctx.clip();\n                                this.endPath();\n                            }\n                        }\n                        this.current = new CanvasExtraState1(this.ctx.canvas.width, this.ctx.canvas.height);\n                        this.transform(...transform1);\n                        this.transform(...matrix1);\n                    }\n                    endAnnotation() {\n                        if (this.annotationCanvas) {\n                            this.ctx.restore();\n                            this.#drawFilter();\n                            this.ctx = this.annotationCanvas.savedCtx;\n                            delete this.annotationCanvas.savedCtx;\n                            delete this.annotationCanvas;\n                        }\n                    }\n                    paintImageMaskXObject(img1) {\n                        if (!this.contentVisible) {\n                            return;\n                        }\n                        const count1 = img1.count;\n                        img1 = this.getObject(img1.data, img1);\n                        img1.count = count1;\n                        const ctx1 = this.ctx;\n                        const glyph1 = this.processingType3;\n                        if (glyph1) {\n                            if (glyph1.compiled === undefined) {\n                                glyph1.compiled = compileType3Glyph1(img1);\n                            }\n                            if (glyph1.compiled) {\n                                glyph1.compiled(ctx1);\n                                return;\n                            }\n                        }\n                        const mask1 = this._createMaskCanvas(img1);\n                        const maskCanvas1 = mask1.canvas;\n                        ctx1.save();\n                        ctx1.setTransform(1, 0, 0, 1, 0, 0);\n                        ctx1.drawImage(maskCanvas1, mask1.offsetX, mask1.offsetY);\n                        ctx1.restore();\n                        this.compose();\n                    }\n                    paintImageMaskXObjectRepeat(img1, scaleX1, skewX1 = 0, skewY1 = 0, scaleY1, positions1) {\n                        if (!this.contentVisible) {\n                            return;\n                        }\n                        img1 = this.getObject(img1.data, img1);\n                        const ctx1 = this.ctx;\n                        ctx1.save();\n                        const currentTransform1 = (0, _display_utils1.getCurrentTransform)(ctx1);\n                        ctx1.transform(scaleX1, skewX1, skewY1, scaleY1, 0, 0);\n                        const mask1 = this._createMaskCanvas(img1);\n                        ctx1.setTransform(1, 0, 0, 1, mask1.offsetX - currentTransform1[4], mask1.offsetY - currentTransform1[5]);\n                        for(let i1 = 0, ii1 = positions1.length; i1 < ii1; i1 += 2){\n                            const trans1 = _util1.Util.transform(currentTransform1, [\n                                scaleX1,\n                                skewX1,\n                                skewY1,\n                                scaleY1,\n                                positions1[i1],\n                                positions1[i1 + 1]\n                            ]);\n                            const [x4, y4] = _util1.Util.applyTransform([\n                                0,\n                                0\n                            ], trans1);\n                            ctx1.drawImage(mask1.canvas, x4, y4);\n                        }\n                        ctx1.restore();\n                        this.compose();\n                    }\n                    paintImageMaskXObjectGroup(images1) {\n                        if (!this.contentVisible) {\n                            return;\n                        }\n                        const ctx1 = this.ctx;\n                        const fillColor1 = this.current.fillColor;\n                        const isPatternFill1 = this.current.patternFill;\n                        for (const image1 of images1){\n                            const { data: data1, width: width2, height: height1, transform: transform1 } = image1;\n                            const maskCanvas1 = this.cachedCanvases.getCanvas(\"maskCanvas\", width2, height1);\n                            const maskCtx1 = maskCanvas1.context;\n                            maskCtx1.save();\n                            const img1 = this.getObject(data1, image1);\n                            putBinaryImageMask1(maskCtx1, img1);\n                            maskCtx1.globalCompositeOperation = \"source-in\";\n                            maskCtx1.fillStyle = isPatternFill1 ? fillColor1.getPattern(maskCtx1, this, (0, _display_utils1.getCurrentTransformInverse)(ctx1), _pattern_helper1.PathType.FILL) : fillColor1;\n                            maskCtx1.fillRect(0, 0, width2, height1);\n                            maskCtx1.restore();\n                            ctx1.save();\n                            ctx1.transform(...transform1);\n                            ctx1.scale(1, -1);\n                            drawImageAtIntegerCoords1(ctx1, maskCanvas1.canvas, 0, 0, width2, height1, 0, -1, 1, 1);\n                            ctx1.restore();\n                        }\n                        this.compose();\n                    }\n                    paintImageXObject(objId1) {\n                        if (!this.contentVisible) {\n                            return;\n                        }\n                        const imgData1 = this.getObject(objId1);\n                        if (!imgData1) {\n                            (0, _util1.warn)(\"Dependent image isn't ready yet\");\n                            return;\n                        }\n                        this.paintInlineImageXObject(imgData1);\n                    }\n                    paintImageXObjectRepeat(objId1, scaleX1, scaleY1, positions1) {\n                        if (!this.contentVisible) {\n                            return;\n                        }\n                        const imgData1 = this.getObject(objId1);\n                        if (!imgData1) {\n                            (0, _util1.warn)(\"Dependent image isn't ready yet\");\n                            return;\n                        }\n                        const width2 = imgData1.width;\n                        const height1 = imgData1.height;\n                        const map1 = [];\n                        for(let i1 = 0, ii1 = positions1.length; i1 < ii1; i1 += 2){\n                            map1.push({\n                                transform: [\n                                    scaleX1,\n                                    0,\n                                    0,\n                                    scaleY1,\n                                    positions1[i1],\n                                    positions1[i1 + 1]\n                                ],\n                                x: 0,\n                                y: 0,\n                                w: width2,\n                                h: height1\n                            });\n                        }\n                        this.paintInlineImageXObjectGroup(imgData1, map1);\n                    }\n                    applyTransferMapsToCanvas(ctx1) {\n                        if (this.current.transferMaps !== \"none\") {\n                            ctx1.filter = this.current.transferMaps;\n                            ctx1.drawImage(ctx1.canvas, 0, 0);\n                            ctx1.filter = \"none\";\n                        }\n                        return ctx1.canvas;\n                    }\n                    applyTransferMapsToBitmap(imgData1) {\n                        if (this.current.transferMaps === \"none\") {\n                            return imgData1.bitmap;\n                        }\n                        const { bitmap: bitmap1, width: width2, height: height1 } = imgData1;\n                        const tmpCanvas1 = this.cachedCanvases.getCanvas(\"inlineImage\", width2, height1);\n                        const tmpCtx1 = tmpCanvas1.context;\n                        tmpCtx1.filter = this.current.transferMaps;\n                        tmpCtx1.drawImage(bitmap1, 0, 0);\n                        tmpCtx1.filter = \"none\";\n                        return tmpCanvas1.canvas;\n                    }\n                    paintInlineImageXObject(imgData1) {\n                        if (!this.contentVisible) {\n                            return;\n                        }\n                        const width2 = imgData1.width;\n                        const height1 = imgData1.height;\n                        const ctx1 = this.ctx;\n                        this.save();\n                        if (!_util1.isNodeJS) {\n                            const { filter: filter1 } = ctx1;\n                            if (filter1 !== \"none\" && filter1 !== \"\") {\n                                ctx1.filter = \"none\";\n                            }\n                        }\n                        ctx1.scale(1 / width2, -1 / height1);\n                        let imgToPaint1;\n                        if (imgData1.bitmap) {\n                            imgToPaint1 = this.applyTransferMapsToBitmap(imgData1);\n                        } else if (typeof HTMLElement === \"function\" && imgData1 instanceof HTMLElement || !imgData1.data) {\n                            imgToPaint1 = imgData1;\n                        } else {\n                            const tmpCanvas1 = this.cachedCanvases.getCanvas(\"inlineImage\", width2, height1);\n                            const tmpCtx1 = tmpCanvas1.context;\n                            putBinaryImageData1(tmpCtx1, imgData1);\n                            imgToPaint1 = this.applyTransferMapsToCanvas(tmpCtx1);\n                        }\n                        const scaled1 = this._scaleImage(imgToPaint1, (0, _display_utils1.getCurrentTransformInverse)(ctx1));\n                        ctx1.imageSmoothingEnabled = getImageSmoothingEnabled1((0, _display_utils1.getCurrentTransform)(ctx1), imgData1.interpolate);\n                        drawImageAtIntegerCoords1(ctx1, scaled1.img, 0, 0, scaled1.paintWidth, scaled1.paintHeight, 0, -height1, width2, height1);\n                        this.compose();\n                        this.restore();\n                    }\n                    paintInlineImageXObjectGroup(imgData1, map1) {\n                        if (!this.contentVisible) {\n                            return;\n                        }\n                        const ctx1 = this.ctx;\n                        let imgToPaint1;\n                        if (imgData1.bitmap) {\n                            imgToPaint1 = imgData1.bitmap;\n                        } else {\n                            const w1 = imgData1.width;\n                            const h3 = imgData1.height;\n                            const tmpCanvas1 = this.cachedCanvases.getCanvas(\"inlineImage\", w1, h3);\n                            const tmpCtx1 = tmpCanvas1.context;\n                            putBinaryImageData1(tmpCtx1, imgData1);\n                            imgToPaint1 = this.applyTransferMapsToCanvas(tmpCtx1);\n                        }\n                        for (const entry1 of map1){\n                            ctx1.save();\n                            ctx1.transform(...entry1.transform);\n                            ctx1.scale(1, -1);\n                            drawImageAtIntegerCoords1(ctx1, imgToPaint1, entry1.x, entry1.y, entry1.w, entry1.h, 0, -1, 1, 1);\n                            ctx1.restore();\n                        }\n                        this.compose();\n                    }\n                    paintSolidColorImageMask() {\n                        if (!this.contentVisible) {\n                            return;\n                        }\n                        this.ctx.fillRect(0, 0, 1, 1);\n                        this.compose();\n                    }\n                    markPoint(tag1) {}\n                    markPointProps(tag1, properties1) {}\n                    beginMarkedContent(tag1) {\n                        this.markedContentStack.push({\n                            visible: true\n                        });\n                    }\n                    beginMarkedContentProps(tag1, properties1) {\n                        if (tag1 === \"OC\") {\n                            this.markedContentStack.push({\n                                visible: this.optionalContentConfig.isVisible(properties1)\n                            });\n                        } else {\n                            this.markedContentStack.push({\n                                visible: true\n                            });\n                        }\n                        this.contentVisible = this.isContentVisible();\n                    }\n                    endMarkedContent() {\n                        this.markedContentStack.pop();\n                        this.contentVisible = this.isContentVisible();\n                    }\n                    beginCompat() {}\n                    endCompat() {}\n                    consumePath(clipBox1) {\n                        const isEmpty1 = this.current.isEmptyClip();\n                        if (this.pendingClip) {\n                            this.current.updateClipFromPath();\n                        }\n                        if (!this.pendingClip) {\n                            this.compose(clipBox1);\n                        }\n                        const ctx1 = this.ctx;\n                        if (this.pendingClip) {\n                            if (!isEmpty1) {\n                                if (this.pendingClip === EO_CLIP1) {\n                                    ctx1.clip(\"evenodd\");\n                                } else {\n                                    ctx1.clip();\n                                }\n                            }\n                            this.pendingClip = null;\n                        }\n                        this.current.startNewPathAndClipBox(this.current.clipBox);\n                        ctx1.beginPath();\n                    }\n                    getSinglePixelWidth() {\n                        if (!this._cachedGetSinglePixelWidth) {\n                            const m3 = (0, _display_utils1.getCurrentTransform)(this.ctx);\n                            if (m3[1] === 0 && m3[2] === 0) {\n                                this._cachedGetSinglePixelWidth = 1 / Math.min(Math.abs(m3[0]), Math.abs(m3[3]));\n                            } else {\n                                const absDet1 = Math.abs(m3[0] * m3[3] - m3[2] * m3[1]);\n                                const normX1 = Math.hypot(m3[0], m3[2]);\n                                const normY1 = Math.hypot(m3[1], m3[3]);\n                                this._cachedGetSinglePixelWidth = Math.max(normX1, normY1) / absDet1;\n                            }\n                        }\n                        return this._cachedGetSinglePixelWidth;\n                    }\n                    getScaleForStroking() {\n                        if (this._cachedScaleForStroking[0] === -1) {\n                            const { lineWidth: lineWidth1 } = this.current;\n                            const { a: a1, b: b4, c: c4, d: d5 } = this.ctx.getTransform();\n                            let scaleX1, scaleY1;\n                            if (b4 === 0 && c4 === 0) {\n                                const normX1 = Math.abs(a1);\n                                const normY1 = Math.abs(d5);\n                                if (normX1 === normY1) {\n                                    if (lineWidth1 === 0) {\n                                        scaleX1 = scaleY1 = 1 / normX1;\n                                    } else {\n                                        const scaledLineWidth1 = normX1 * lineWidth1;\n                                        scaleX1 = scaleY1 = scaledLineWidth1 < 1 ? 1 / scaledLineWidth1 : 1;\n                                    }\n                                } else if (lineWidth1 === 0) {\n                                    scaleX1 = 1 / normX1;\n                                    scaleY1 = 1 / normY1;\n                                } else {\n                                    const scaledXLineWidth1 = normX1 * lineWidth1;\n                                    const scaledYLineWidth1 = normY1 * lineWidth1;\n                                    scaleX1 = scaledXLineWidth1 < 1 ? 1 / scaledXLineWidth1 : 1;\n                                    scaleY1 = scaledYLineWidth1 < 1 ? 1 / scaledYLineWidth1 : 1;\n                                }\n                            } else {\n                                const absDet1 = Math.abs(a1 * d5 - b4 * c4);\n                                const normX1 = Math.hypot(a1, b4);\n                                const normY1 = Math.hypot(c4, d5);\n                                if (lineWidth1 === 0) {\n                                    scaleX1 = normY1 / absDet1;\n                                    scaleY1 = normX1 / absDet1;\n                                } else {\n                                    const baseArea1 = lineWidth1 * absDet1;\n                                    scaleX1 = normY1 > baseArea1 ? normY1 / baseArea1 : 1;\n                                    scaleY1 = normX1 > baseArea1 ? normX1 / baseArea1 : 1;\n                                }\n                            }\n                            this._cachedScaleForStroking[0] = scaleX1;\n                            this._cachedScaleForStroking[1] = scaleY1;\n                        }\n                        return this._cachedScaleForStroking;\n                    }\n                    rescaleAndStroke(saveRestore1) {\n                        const { ctx: ctx1 } = this;\n                        const { lineWidth: lineWidth1 } = this.current;\n                        const [scaleX1, scaleY1] = this.getScaleForStroking();\n                        ctx1.lineWidth = lineWidth1 || 1;\n                        if (scaleX1 === 1 && scaleY1 === 1) {\n                            ctx1.stroke();\n                            return;\n                        }\n                        const dashes1 = ctx1.getLineDash();\n                        if (saveRestore1) {\n                            ctx1.save();\n                        }\n                        ctx1.scale(scaleX1, scaleY1);\n                        if (dashes1.length > 0) {\n                            const scale1 = Math.max(scaleX1, scaleY1);\n                            ctx1.setLineDash(dashes1.map((x4)=>x4 / scale1));\n                            ctx1.lineDashOffset /= scale1;\n                        }\n                        ctx1.stroke();\n                        if (saveRestore1) {\n                            ctx1.restore();\n                        }\n                    }\n                    isContentVisible() {\n                        for(let i1 = this.markedContentStack.length - 1; i1 >= 0; i1--){\n                            if (!this.markedContentStack[i1].visible) {\n                                return false;\n                            }\n                        }\n                        return true;\n                    }\n                }\n                exports1.CanvasGraphics = CanvasGraphics1;\n                for(const op1 in _util1.OPS){\n                    if (CanvasGraphics1.prototype[op1] !== undefined) {\n                        CanvasGraphics1.prototype[_util1.OPS[op1]] = CanvasGraphics1.prototype[op1];\n                    }\n                }\n            /***/ },\n            /* 12 */ /***/ (__unused_webpack_module1, exports1, __w_pdfjs_require__1)=>{\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                exports1.TilingPattern = exports1.PathType = void 0;\n                exports1.getShadingPattern = getShadingPattern1;\n                var _util1 = __w_pdfjs_require__1(1);\n                var _display_utils1 = __w_pdfjs_require__1(6);\n                const PathType1 = {\n                    FILL: \"Fill\",\n                    STROKE: \"Stroke\",\n                    SHADING: \"Shading\"\n                };\n                exports1.PathType = PathType1;\n                function applyBoundingBox1(ctx1, bbox1) {\n                    if (!bbox1) {\n                        return;\n                    }\n                    const width2 = bbox1[2] - bbox1[0];\n                    const height1 = bbox1[3] - bbox1[1];\n                    const region1 = new Path2D();\n                    region1.rect(bbox1[0], bbox1[1], width2, height1);\n                    ctx1.clip(region1);\n                }\n                class BaseShadingPattern1 {\n                    constructor(){\n                        if (this.constructor === BaseShadingPattern1) {\n                            (0, _util1.unreachable)(\"Cannot initialize BaseShadingPattern.\");\n                        }\n                    }\n                    getPattern() {\n                        (0, _util1.unreachable)(\"Abstract method `getPattern` called.\");\n                    }\n                }\n                class RadialAxialShadingPattern1 extends BaseShadingPattern1 {\n                    constructor(IR1){\n                        super();\n                        this._type = IR1[1];\n                        this._bbox = IR1[2];\n                        this._colorStops = IR1[3];\n                        this._p0 = IR1[4];\n                        this._p1 = IR1[5];\n                        this._r0 = IR1[6];\n                        this._r1 = IR1[7];\n                        this.matrix = null;\n                    }\n                    _createGradient(ctx1) {\n                        let grad1;\n                        if (this._type === \"axial\") {\n                            grad1 = ctx1.createLinearGradient(this._p0[0], this._p0[1], this._p1[0], this._p1[1]);\n                        } else if (this._type === \"radial\") {\n                            grad1 = ctx1.createRadialGradient(this._p0[0], this._p0[1], this._r0, this._p1[0], this._p1[1], this._r1);\n                        }\n                        for (const colorStop1 of this._colorStops){\n                            grad1.addColorStop(colorStop1[0], colorStop1[1]);\n                        }\n                        return grad1;\n                    }\n                    getPattern(ctx1, owner1, inverse1, pathType1) {\n                        let pattern1;\n                        if (pathType1 === PathType1.STROKE || pathType1 === PathType1.FILL) {\n                            const ownerBBox1 = owner1.current.getClippedPathBoundingBox(pathType1, (0, _display_utils1.getCurrentTransform)(ctx1)) || [\n                                0,\n                                0,\n                                0,\n                                0\n                            ];\n                            const width2 = Math.ceil(ownerBBox1[2] - ownerBBox1[0]) || 1;\n                            const height1 = Math.ceil(ownerBBox1[3] - ownerBBox1[1]) || 1;\n                            const tmpCanvas1 = owner1.cachedCanvases.getCanvas(\"pattern\", width2, height1, true);\n                            const tmpCtx1 = tmpCanvas1.context;\n                            tmpCtx1.clearRect(0, 0, tmpCtx1.canvas.width, tmpCtx1.canvas.height);\n                            tmpCtx1.beginPath();\n                            tmpCtx1.rect(0, 0, tmpCtx1.canvas.width, tmpCtx1.canvas.height);\n                            tmpCtx1.translate(-ownerBBox1[0], -ownerBBox1[1]);\n                            inverse1 = _util1.Util.transform(inverse1, [\n                                1,\n                                0,\n                                0,\n                                1,\n                                ownerBBox1[0],\n                                ownerBBox1[1]\n                            ]);\n                            tmpCtx1.transform(...owner1.baseTransform);\n                            if (this.matrix) {\n                                tmpCtx1.transform(...this.matrix);\n                            }\n                            applyBoundingBox1(tmpCtx1, this._bbox);\n                            tmpCtx1.fillStyle = this._createGradient(tmpCtx1);\n                            tmpCtx1.fill();\n                            pattern1 = ctx1.createPattern(tmpCanvas1.canvas, \"no-repeat\");\n                            const domMatrix1 = new DOMMatrix(inverse1);\n                            pattern1.setTransform(domMatrix1);\n                        } else {\n                            applyBoundingBox1(ctx1, this._bbox);\n                            pattern1 = this._createGradient(ctx1);\n                        }\n                        return pattern1;\n                    }\n                }\n                function drawTriangle1(data1, context1, p12, p22, p32, c11, c21, c31) {\n                    const coords1 = context1.coords, colors1 = context1.colors;\n                    const bytes1 = data1.data, rowSize1 = data1.width * 4;\n                    let tmp1;\n                    if (coords1[p12 + 1] > coords1[p22 + 1]) {\n                        tmp1 = p12;\n                        p12 = p22;\n                        p22 = tmp1;\n                        tmp1 = c11;\n                        c11 = c21;\n                        c21 = tmp1;\n                    }\n                    if (coords1[p22 + 1] > coords1[p32 + 1]) {\n                        tmp1 = p22;\n                        p22 = p32;\n                        p32 = tmp1;\n                        tmp1 = c21;\n                        c21 = c31;\n                        c31 = tmp1;\n                    }\n                    if (coords1[p12 + 1] > coords1[p22 + 1]) {\n                        tmp1 = p12;\n                        p12 = p22;\n                        p22 = tmp1;\n                        tmp1 = c11;\n                        c11 = c21;\n                        c21 = tmp1;\n                    }\n                    const x11 = (coords1[p12] + context1.offsetX) * context1.scaleX;\n                    const y11 = (coords1[p12 + 1] + context1.offsetY) * context1.scaleY;\n                    const x21 = (coords1[p22] + context1.offsetX) * context1.scaleX;\n                    const y21 = (coords1[p22 + 1] + context1.offsetY) * context1.scaleY;\n                    const x31 = (coords1[p32] + context1.offsetX) * context1.scaleX;\n                    const y31 = (coords1[p32 + 1] + context1.offsetY) * context1.scaleY;\n                    if (y11 >= y31) {\n                        return;\n                    }\n                    const c1r1 = colors1[c11], c1g1 = colors1[c11 + 1], c1b1 = colors1[c11 + 2];\n                    const c2r1 = colors1[c21], c2g1 = colors1[c21 + 1], c2b1 = colors1[c21 + 2];\n                    const c3r1 = colors1[c31], c3g1 = colors1[c31 + 1], c3b1 = colors1[c31 + 2];\n                    const minY1 = Math.round(y11), maxY1 = Math.round(y31);\n                    let xa1, car1, cag1, cab1;\n                    let xb1, cbr1, cbg1, cbb1;\n                    for(let y4 = minY1; y4 <= maxY1; y4++){\n                        if (y4 < y21) {\n                            const k3 = y4 < y11 ? 0 : (y11 - y4) / (y11 - y21);\n                            xa1 = x11 - (x11 - x21) * k3;\n                            car1 = c1r1 - (c1r1 - c2r1) * k3;\n                            cag1 = c1g1 - (c1g1 - c2g1) * k3;\n                            cab1 = c1b1 - (c1b1 - c2b1) * k3;\n                        } else {\n                            let k3;\n                            if (y4 > y31) {\n                                k3 = 1;\n                            } else if (y21 === y31) {\n                                k3 = 0;\n                            } else {\n                                k3 = (y21 - y4) / (y21 - y31);\n                            }\n                            xa1 = x21 - (x21 - x31) * k3;\n                            car1 = c2r1 - (c2r1 - c3r1) * k3;\n                            cag1 = c2g1 - (c2g1 - c3g1) * k3;\n                            cab1 = c2b1 - (c2b1 - c3b1) * k3;\n                        }\n                        let k3;\n                        if (y4 < y11) {\n                            k3 = 0;\n                        } else if (y4 > y31) {\n                            k3 = 1;\n                        } else {\n                            k3 = (y11 - y4) / (y11 - y31);\n                        }\n                        xb1 = x11 - (x11 - x31) * k3;\n                        cbr1 = c1r1 - (c1r1 - c3r1) * k3;\n                        cbg1 = c1g1 - (c1g1 - c3g1) * k3;\n                        cbb1 = c1b1 - (c1b1 - c3b1) * k3;\n                        const x1_1 = Math.round(Math.min(xa1, xb1));\n                        const x2_1 = Math.round(Math.max(xa1, xb1));\n                        let j1 = rowSize1 * y4 + x1_1 * 4;\n                        for(let x4 = x1_1; x4 <= x2_1; x4++){\n                            k3 = (xa1 - x4) / (xa1 - xb1);\n                            if (k3 < 0) {\n                                k3 = 0;\n                            } else if (k3 > 1) {\n                                k3 = 1;\n                            }\n                            bytes1[j1++] = car1 - (car1 - cbr1) * k3 | 0;\n                            bytes1[j1++] = cag1 - (cag1 - cbg1) * k3 | 0;\n                            bytes1[j1++] = cab1 - (cab1 - cbb1) * k3 | 0;\n                            bytes1[j1++] = 255;\n                        }\n                    }\n                }\n                function drawFigure1(data1, figure1, context1) {\n                    const ps1 = figure1.coords;\n                    const cs1 = figure1.colors;\n                    let i1, ii1;\n                    switch(figure1.type){\n                        case \"lattice\":\n                            const verticesPerRow1 = figure1.verticesPerRow;\n                            const rows1 = Math.floor(ps1.length / verticesPerRow1) - 1;\n                            const cols1 = verticesPerRow1 - 1;\n                            for(i1 = 0; i1 < rows1; i1++){\n                                let q1 = i1 * verticesPerRow1;\n                                for(let j1 = 0; j1 < cols1; j1++, q1++){\n                                    drawTriangle1(data1, context1, ps1[q1], ps1[q1 + 1], ps1[q1 + verticesPerRow1], cs1[q1], cs1[q1 + 1], cs1[q1 + verticesPerRow1]);\n                                    drawTriangle1(data1, context1, ps1[q1 + verticesPerRow1 + 1], ps1[q1 + 1], ps1[q1 + verticesPerRow1], cs1[q1 + verticesPerRow1 + 1], cs1[q1 + 1], cs1[q1 + verticesPerRow1]);\n                                }\n                            }\n                            break;\n                        case \"triangles\":\n                            for(i1 = 0, ii1 = ps1.length; i1 < ii1; i1 += 3){\n                                drawTriangle1(data1, context1, ps1[i1], ps1[i1 + 1], ps1[i1 + 2], cs1[i1], cs1[i1 + 1], cs1[i1 + 2]);\n                            }\n                            break;\n                        default:\n                            throw new Error(\"illegal figure\");\n                    }\n                }\n                class MeshShadingPattern1 extends BaseShadingPattern1 {\n                    constructor(IR1){\n                        super();\n                        this._coords = IR1[2];\n                        this._colors = IR1[3];\n                        this._figures = IR1[4];\n                        this._bounds = IR1[5];\n                        this._bbox = IR1[7];\n                        this._background = IR1[8];\n                        this.matrix = null;\n                    }\n                    _createMeshCanvas(combinedScale1, backgroundColor1, cachedCanvases1) {\n                        const EXPECTED_SCALE1 = 1.1;\n                        const MAX_PATTERN_SIZE1 = 3000;\n                        const BORDER_SIZE1 = 2;\n                        const offsetX1 = Math.floor(this._bounds[0]);\n                        const offsetY1 = Math.floor(this._bounds[1]);\n                        const boundsWidth1 = Math.ceil(this._bounds[2]) - offsetX1;\n                        const boundsHeight1 = Math.ceil(this._bounds[3]) - offsetY1;\n                        const width2 = Math.min(Math.ceil(Math.abs(boundsWidth1 * combinedScale1[0] * EXPECTED_SCALE1)), MAX_PATTERN_SIZE1);\n                        const height1 = Math.min(Math.ceil(Math.abs(boundsHeight1 * combinedScale1[1] * EXPECTED_SCALE1)), MAX_PATTERN_SIZE1);\n                        const scaleX1 = boundsWidth1 / width2;\n                        const scaleY1 = boundsHeight1 / height1;\n                        const context1 = {\n                            coords: this._coords,\n                            colors: this._colors,\n                            offsetX: -offsetX1,\n                            offsetY: -offsetY1,\n                            scaleX: 1 / scaleX1,\n                            scaleY: 1 / scaleY1\n                        };\n                        const paddedWidth1 = width2 + BORDER_SIZE1 * 2;\n                        const paddedHeight1 = height1 + BORDER_SIZE1 * 2;\n                        const tmpCanvas1 = cachedCanvases1.getCanvas(\"mesh\", paddedWidth1, paddedHeight1, false);\n                        const tmpCtx1 = tmpCanvas1.context;\n                        const data1 = tmpCtx1.createImageData(width2, height1);\n                        if (backgroundColor1) {\n                            const bytes1 = data1.data;\n                            for(let i1 = 0, ii1 = bytes1.length; i1 < ii1; i1 += 4){\n                                bytes1[i1] = backgroundColor1[0];\n                                bytes1[i1 + 1] = backgroundColor1[1];\n                                bytes1[i1 + 2] = backgroundColor1[2];\n                                bytes1[i1 + 3] = 255;\n                            }\n                        }\n                        for (const figure1 of this._figures){\n                            drawFigure1(data1, figure1, context1);\n                        }\n                        tmpCtx1.putImageData(data1, BORDER_SIZE1, BORDER_SIZE1);\n                        const canvas1 = tmpCanvas1.canvas;\n                        return {\n                            canvas: canvas1,\n                            offsetX: offsetX1 - BORDER_SIZE1 * scaleX1,\n                            offsetY: offsetY1 - BORDER_SIZE1 * scaleY1,\n                            scaleX: scaleX1,\n                            scaleY: scaleY1\n                        };\n                    }\n                    getPattern(ctx1, owner1, inverse1, pathType1) {\n                        applyBoundingBox1(ctx1, this._bbox);\n                        let scale1;\n                        if (pathType1 === PathType1.SHADING) {\n                            scale1 = _util1.Util.singularValueDecompose2dScale((0, _display_utils1.getCurrentTransform)(ctx1));\n                        } else {\n                            scale1 = _util1.Util.singularValueDecompose2dScale(owner1.baseTransform);\n                            if (this.matrix) {\n                                const matrixScale1 = _util1.Util.singularValueDecompose2dScale(this.matrix);\n                                scale1 = [\n                                    scale1[0] * matrixScale1[0],\n                                    scale1[1] * matrixScale1[1]\n                                ];\n                            }\n                        }\n                        const temporaryPatternCanvas1 = this._createMeshCanvas(scale1, pathType1 === PathType1.SHADING ? null : this._background, owner1.cachedCanvases);\n                        if (pathType1 !== PathType1.SHADING) {\n                            ctx1.setTransform(...owner1.baseTransform);\n                            if (this.matrix) {\n                                ctx1.transform(...this.matrix);\n                            }\n                        }\n                        ctx1.translate(temporaryPatternCanvas1.offsetX, temporaryPatternCanvas1.offsetY);\n                        ctx1.scale(temporaryPatternCanvas1.scaleX, temporaryPatternCanvas1.scaleY);\n                        return ctx1.createPattern(temporaryPatternCanvas1.canvas, \"no-repeat\");\n                    }\n                }\n                class DummyShadingPattern1 extends BaseShadingPattern1 {\n                    getPattern() {\n                        return \"hotpink\";\n                    }\n                }\n                function getShadingPattern1(IR1) {\n                    switch(IR1[0]){\n                        case \"RadialAxial\":\n                            return new RadialAxialShadingPattern1(IR1);\n                        case \"Mesh\":\n                            return new MeshShadingPattern1(IR1);\n                        case \"Dummy\":\n                            return new DummyShadingPattern1();\n                    }\n                    throw new Error(`Unknown IR type: ${IR1[0]}`);\n                }\n                const PaintType1 = {\n                    COLORED: 1,\n                    UNCOLORED: 2\n                };\n                class TilingPattern1 {\n                    static{\n                        this.MAX_PATTERN_SIZE = 3000;\n                    }\n                    constructor(IR1, color1, ctx1, canvasGraphicsFactory1, baseTransform1){\n                        this.operatorList = IR1[2];\n                        this.matrix = IR1[3] || [\n                            1,\n                            0,\n                            0,\n                            1,\n                            0,\n                            0\n                        ];\n                        this.bbox = IR1[4];\n                        this.xstep = IR1[5];\n                        this.ystep = IR1[6];\n                        this.paintType = IR1[7];\n                        this.tilingType = IR1[8];\n                        this.color = color1;\n                        this.ctx = ctx1;\n                        this.canvasGraphicsFactory = canvasGraphicsFactory1;\n                        this.baseTransform = baseTransform1;\n                    }\n                    createPatternCanvas(owner1) {\n                        const operatorList1 = this.operatorList;\n                        const bbox1 = this.bbox;\n                        const xstep1 = this.xstep;\n                        const ystep1 = this.ystep;\n                        const paintType1 = this.paintType;\n                        const tilingType1 = this.tilingType;\n                        const color1 = this.color;\n                        const canvasGraphicsFactory1 = this.canvasGraphicsFactory;\n                        (0, _util1.info)(\"TilingType: \" + tilingType1);\n                        const x01 = bbox1[0], y01 = bbox1[1], x11 = bbox1[2], y11 = bbox1[3];\n                        const matrixScale1 = _util1.Util.singularValueDecompose2dScale(this.matrix);\n                        const curMatrixScale1 = _util1.Util.singularValueDecompose2dScale(this.baseTransform);\n                        const combinedScale1 = [\n                            matrixScale1[0] * curMatrixScale1[0],\n                            matrixScale1[1] * curMatrixScale1[1]\n                        ];\n                        const dimx1 = this.getSizeAndScale(xstep1, this.ctx.canvas.width, combinedScale1[0]);\n                        const dimy1 = this.getSizeAndScale(ystep1, this.ctx.canvas.height, combinedScale1[1]);\n                        const tmpCanvas1 = owner1.cachedCanvases.getCanvas(\"pattern\", dimx1.size, dimy1.size, true);\n                        const tmpCtx1 = tmpCanvas1.context;\n                        const graphics1 = canvasGraphicsFactory1.createCanvasGraphics(tmpCtx1);\n                        graphics1.groupLevel = owner1.groupLevel;\n                        this.setFillAndStrokeStyleToContext(graphics1, paintType1, color1);\n                        let adjustedX01 = x01;\n                        let adjustedY01 = y01;\n                        let adjustedX11 = x11;\n                        let adjustedY11 = y11;\n                        if (x01 < 0) {\n                            adjustedX01 = 0;\n                            adjustedX11 += Math.abs(x01);\n                        }\n                        if (y01 < 0) {\n                            adjustedY01 = 0;\n                            adjustedY11 += Math.abs(y01);\n                        }\n                        tmpCtx1.translate(-(dimx1.scale * adjustedX01), -(dimy1.scale * adjustedY01));\n                        graphics1.transform(dimx1.scale, 0, 0, dimy1.scale, 0, 0);\n                        tmpCtx1.save();\n                        this.clipBbox(graphics1, adjustedX01, adjustedY01, adjustedX11, adjustedY11);\n                        graphics1.baseTransform = (0, _display_utils1.getCurrentTransform)(graphics1.ctx);\n                        graphics1.executeOperatorList(operatorList1);\n                        graphics1.endDrawing();\n                        return {\n                            canvas: tmpCanvas1.canvas,\n                            scaleX: dimx1.scale,\n                            scaleY: dimy1.scale,\n                            offsetX: adjustedX01,\n                            offsetY: adjustedY01\n                        };\n                    }\n                    getSizeAndScale(step1, realOutputSize1, scale1) {\n                        step1 = Math.abs(step1);\n                        const maxSize1 = Math.max(TilingPattern1.MAX_PATTERN_SIZE, realOutputSize1);\n                        let size1 = Math.ceil(step1 * scale1);\n                        if (size1 >= maxSize1) {\n                            size1 = maxSize1;\n                        } else {\n                            scale1 = size1 / step1;\n                        }\n                        return {\n                            scale: scale1,\n                            size: size1\n                        };\n                    }\n                    clipBbox(graphics1, x01, y01, x11, y11) {\n                        const bboxWidth1 = x11 - x01;\n                        const bboxHeight1 = y11 - y01;\n                        graphics1.ctx.rect(x01, y01, bboxWidth1, bboxHeight1);\n                        graphics1.current.updateRectMinMax((0, _display_utils1.getCurrentTransform)(graphics1.ctx), [\n                            x01,\n                            y01,\n                            x11,\n                            y11\n                        ]);\n                        graphics1.clip();\n                        graphics1.endPath();\n                    }\n                    setFillAndStrokeStyleToContext(graphics1, paintType1, color1) {\n                        const context1 = graphics1.ctx, current1 = graphics1.current;\n                        switch(paintType1){\n                            case PaintType1.COLORED:\n                                const ctx1 = this.ctx;\n                                context1.fillStyle = ctx1.fillStyle;\n                                context1.strokeStyle = ctx1.strokeStyle;\n                                current1.fillColor = ctx1.fillStyle;\n                                current1.strokeColor = ctx1.strokeStyle;\n                                break;\n                            case PaintType1.UNCOLORED:\n                                const cssColor1 = _util1.Util.makeHexColor(color1[0], color1[1], color1[2]);\n                                context1.fillStyle = cssColor1;\n                                context1.strokeStyle = cssColor1;\n                                current1.fillColor = cssColor1;\n                                current1.strokeColor = cssColor1;\n                                break;\n                            default:\n                                throw new _util1.FormatError(`Unsupported paint type: ${paintType1}`);\n                        }\n                    }\n                    getPattern(ctx1, owner1, inverse1, pathType1) {\n                        let matrix1 = inverse1;\n                        if (pathType1 !== PathType1.SHADING) {\n                            matrix1 = _util1.Util.transform(matrix1, owner1.baseTransform);\n                            if (this.matrix) {\n                                matrix1 = _util1.Util.transform(matrix1, this.matrix);\n                            }\n                        }\n                        const temporaryPatternCanvas1 = this.createPatternCanvas(owner1);\n                        let domMatrix1 = new DOMMatrix(matrix1);\n                        domMatrix1 = domMatrix1.translate(temporaryPatternCanvas1.offsetX, temporaryPatternCanvas1.offsetY);\n                        domMatrix1 = domMatrix1.scale(1 / temporaryPatternCanvas1.scaleX, 1 / temporaryPatternCanvas1.scaleY);\n                        const pattern1 = ctx1.createPattern(temporaryPatternCanvas1.canvas, \"repeat\");\n                        pattern1.setTransform(domMatrix1);\n                        return pattern1;\n                    }\n                }\n                exports1.TilingPattern = TilingPattern1;\n            /***/ },\n            /* 13 */ /***/ (__unused_webpack_module1, exports1, __w_pdfjs_require__1)=>{\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                exports1.convertBlackAndWhiteToRGBA = convertBlackAndWhiteToRGBA1;\n                exports1.convertToRGBA = convertToRGBA1;\n                exports1.grayToRGBA = grayToRGBA1;\n                var _util1 = __w_pdfjs_require__1(1);\n                function convertToRGBA1(params1) {\n                    switch(params1.kind){\n                        case _util1.ImageKind.GRAYSCALE_1BPP:\n                            return convertBlackAndWhiteToRGBA1(params1);\n                        case _util1.ImageKind.RGB_24BPP:\n                            return convertRGBToRGBA1(params1);\n                    }\n                    return null;\n                }\n                function convertBlackAndWhiteToRGBA1({ src: src1, srcPos: srcPos1 = 0, dest: dest1, width: width2, height: height1, nonBlackColor: nonBlackColor1 = 0xffffffff, inverseDecode: inverseDecode1 = false }) {\n                    const black1 = _util1.FeatureTest.isLittleEndian ? 0xff000000 : 0x000000ff;\n                    const [zeroMapping1, oneMapping1] = inverseDecode1 ? [\n                        nonBlackColor1,\n                        black1\n                    ] : [\n                        black1,\n                        nonBlackColor1\n                    ];\n                    const widthInSource1 = width2 >> 3;\n                    const widthRemainder1 = width2 & 7;\n                    const srcLength1 = src1.length;\n                    dest1 = new Uint32Array(dest1.buffer);\n                    let destPos1 = 0;\n                    for(let i1 = 0; i1 < height1; i1++){\n                        for(const max1 = srcPos1 + widthInSource1; srcPos1 < max1; srcPos1++){\n                            const elem1 = srcPos1 < srcLength1 ? src1[srcPos1] : 255;\n                            dest1[destPos1++] = elem1 & 128 ? oneMapping1 : zeroMapping1;\n                            dest1[destPos1++] = elem1 & 64 ? oneMapping1 : zeroMapping1;\n                            dest1[destPos1++] = elem1 & 32 ? oneMapping1 : zeroMapping1;\n                            dest1[destPos1++] = elem1 & 16 ? oneMapping1 : zeroMapping1;\n                            dest1[destPos1++] = elem1 & 8 ? oneMapping1 : zeroMapping1;\n                            dest1[destPos1++] = elem1 & 4 ? oneMapping1 : zeroMapping1;\n                            dest1[destPos1++] = elem1 & 2 ? oneMapping1 : zeroMapping1;\n                            dest1[destPos1++] = elem1 & 1 ? oneMapping1 : zeroMapping1;\n                        }\n                        if (widthRemainder1 === 0) {\n                            continue;\n                        }\n                        const elem1 = srcPos1 < srcLength1 ? src1[srcPos1++] : 255;\n                        for(let j1 = 0; j1 < widthRemainder1; j1++){\n                            dest1[destPos1++] = elem1 & 1 << 7 - j1 ? oneMapping1 : zeroMapping1;\n                        }\n                    }\n                    return {\n                        srcPos: srcPos1,\n                        destPos: destPos1\n                    };\n                }\n                function convertRGBToRGBA1({ src: src1, srcPos: srcPos1 = 0, dest: dest1, destPos: destPos1 = 0, width: width2, height: height1 }) {\n                    let i1 = 0;\n                    const len321 = src1.length >> 2;\n                    const src321 = new Uint32Array(src1.buffer, srcPos1, len321);\n                    if (_util1.FeatureTest.isLittleEndian) {\n                        for(; i1 < len321 - 2; i1 += 3, destPos1 += 4){\n                            const s11 = src321[i1];\n                            const s21 = src321[i1 + 1];\n                            const s31 = src321[i1 + 2];\n                            dest1[destPos1] = s11 | 0xff000000;\n                            dest1[destPos1 + 1] = s11 >>> 24 | s21 << 8 | 0xff000000;\n                            dest1[destPos1 + 2] = s21 >>> 16 | s31 << 16 | 0xff000000;\n                            dest1[destPos1 + 3] = s31 >>> 8 | 0xff000000;\n                        }\n                        for(let j1 = i1 * 4, jj1 = src1.length; j1 < jj1; j1 += 3){\n                            dest1[destPos1++] = src1[j1] | src1[j1 + 1] << 8 | src1[j1 + 2] << 16 | 0xff000000;\n                        }\n                    } else {\n                        for(; i1 < len321 - 2; i1 += 3, destPos1 += 4){\n                            const s11 = src321[i1];\n                            const s21 = src321[i1 + 1];\n                            const s31 = src321[i1 + 2];\n                            dest1[destPos1] = s11 | 0xff;\n                            dest1[destPos1 + 1] = s11 << 24 | s21 >>> 8 | 0xff;\n                            dest1[destPos1 + 2] = s21 << 16 | s31 >>> 16 | 0xff;\n                            dest1[destPos1 + 3] = s31 << 8 | 0xff;\n                        }\n                        for(let j1 = i1 * 4, jj1 = src1.length; j1 < jj1; j1 += 3){\n                            dest1[destPos1++] = src1[j1] << 24 | src1[j1 + 1] << 16 | src1[j1 + 2] << 8 | 0xff;\n                        }\n                    }\n                    return {\n                        srcPos: srcPos1,\n                        destPos: destPos1\n                    };\n                }\n                function grayToRGBA1(src1, dest1) {\n                    if (_util1.FeatureTest.isLittleEndian) {\n                        for(let i1 = 0, ii1 = src1.length; i1 < ii1; i1++){\n                            dest1[i1] = src1[i1] * 0x10101 | 0xff000000;\n                        }\n                    } else {\n                        for(let i1 = 0, ii1 = src1.length; i1 < ii1; i1++){\n                            dest1[i1] = src1[i1] * 0x1010100 | 0x000000ff;\n                        }\n                    }\n                }\n            /***/ },\n            /* 14 */ /***/ (__unused_webpack_module1, exports1)=>{\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                exports1.GlobalWorkerOptions = void 0;\n                const GlobalWorkerOptions1 = Object.create(null);\n                exports1.GlobalWorkerOptions = GlobalWorkerOptions1;\n                GlobalWorkerOptions1.workerPort = null;\n                GlobalWorkerOptions1.workerSrc = \"\";\n            /***/ },\n            /* 15 */ /***/ (__unused_webpack_module1, exports1, __w_pdfjs_require__1)=>{\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                exports1.MessageHandler = void 0;\n                var _util1 = __w_pdfjs_require__1(1);\n                const CallbackKind1 = {\n                    UNKNOWN: 0,\n                    DATA: 1,\n                    ERROR: 2\n                };\n                const StreamKind1 = {\n                    UNKNOWN: 0,\n                    CANCEL: 1,\n                    CANCEL_COMPLETE: 2,\n                    CLOSE: 3,\n                    ENQUEUE: 4,\n                    ERROR: 5,\n                    PULL: 6,\n                    PULL_COMPLETE: 7,\n                    START_COMPLETE: 8\n                };\n                function wrapReason1(reason1) {\n                    if (!(reason1 instanceof Error || typeof reason1 === \"object\" && reason1 !== null)) {\n                        (0, _util1.unreachable)('wrapReason: Expected \"reason\" to be a (possibly cloned) Error.');\n                    }\n                    switch(reason1.name){\n                        case \"AbortException\":\n                            return new _util1.AbortException(reason1.message);\n                        case \"MissingPDFException\":\n                            return new _util1.MissingPDFException(reason1.message);\n                        case \"PasswordException\":\n                            return new _util1.PasswordException(reason1.message, reason1.code);\n                        case \"UnexpectedResponseException\":\n                            return new _util1.UnexpectedResponseException(reason1.message, reason1.status);\n                        case \"UnknownErrorException\":\n                            return new _util1.UnknownErrorException(reason1.message, reason1.details);\n                        default:\n                            return new _util1.UnknownErrorException(reason1.message, reason1.toString());\n                    }\n                }\n                class MessageHandler1 {\n                    constructor(sourceName1, targetName1, comObj1){\n                        this.sourceName = sourceName1;\n                        this.targetName = targetName1;\n                        this.comObj = comObj1;\n                        this.callbackId = 1;\n                        this.streamId = 1;\n                        this.streamSinks = Object.create(null);\n                        this.streamControllers = Object.create(null);\n                        this.callbackCapabilities = Object.create(null);\n                        this.actionHandler = Object.create(null);\n                        this._onComObjOnMessage = (event1)=>{\n                            const data1 = event1.data;\n                            if (data1.targetName !== this.sourceName) {\n                                return;\n                            }\n                            if (data1.stream) {\n                                this.#processStreamMessage(data1);\n                                return;\n                            }\n                            if (data1.callback) {\n                                const callbackId1 = data1.callbackId;\n                                const capability1 = this.callbackCapabilities[callbackId1];\n                                if (!capability1) {\n                                    throw new Error(`Cannot resolve callback ${callbackId1}`);\n                                }\n                                delete this.callbackCapabilities[callbackId1];\n                                if (data1.callback === CallbackKind1.DATA) {\n                                    capability1.resolve(data1.data);\n                                } else if (data1.callback === CallbackKind1.ERROR) {\n                                    capability1.reject(wrapReason1(data1.reason));\n                                } else {\n                                    throw new Error(\"Unexpected callback case\");\n                                }\n                                return;\n                            }\n                            const action1 = this.actionHandler[data1.action];\n                            if (!action1) {\n                                throw new Error(`Unknown action from worker: ${data1.action}`);\n                            }\n                            if (data1.callbackId) {\n                                const cbSourceName1 = this.sourceName;\n                                const cbTargetName1 = data1.sourceName;\n                                new Promise(function(resolve1) {\n                                    resolve1(action1(data1.data));\n                                }).then(function(result1) {\n                                    comObj1.postMessage({\n                                        sourceName: cbSourceName1,\n                                        targetName: cbTargetName1,\n                                        callback: CallbackKind1.DATA,\n                                        callbackId: data1.callbackId,\n                                        data: result1\n                                    });\n                                }, function(reason1) {\n                                    comObj1.postMessage({\n                                        sourceName: cbSourceName1,\n                                        targetName: cbTargetName1,\n                                        callback: CallbackKind1.ERROR,\n                                        callbackId: data1.callbackId,\n                                        reason: wrapReason1(reason1)\n                                    });\n                                });\n                                return;\n                            }\n                            if (data1.streamId) {\n                                this.#createStreamSink(data1);\n                                return;\n                            }\n                            action1(data1.data);\n                        };\n                        comObj1.addEventListener(\"message\", this._onComObjOnMessage);\n                    }\n                    on(actionName1, handler1) {\n                        const ah1 = this.actionHandler;\n                        if (ah1[actionName1]) {\n                            throw new Error(`There is already an actionName called \"${actionName1}\"`);\n                        }\n                        ah1[actionName1] = handler1;\n                    }\n                    send(actionName1, data1, transfers1) {\n                        this.comObj.postMessage({\n                            sourceName: this.sourceName,\n                            targetName: this.targetName,\n                            action: actionName1,\n                            data: data1\n                        }, transfers1);\n                    }\n                    sendWithPromise(actionName1, data1, transfers1) {\n                        const callbackId1 = this.callbackId++;\n                        const capability1 = new _util1.PromiseCapability();\n                        this.callbackCapabilities[callbackId1] = capability1;\n                        try {\n                            this.comObj.postMessage({\n                                sourceName: this.sourceName,\n                                targetName: this.targetName,\n                                action: actionName1,\n                                callbackId: callbackId1,\n                                data: data1\n                            }, transfers1);\n                        } catch (ex1) {\n                            capability1.reject(ex1);\n                        }\n                        return capability1.promise;\n                    }\n                    sendWithStream(actionName1, data1, queueingStrategy1, transfers1) {\n                        const streamId1 = this.streamId++, sourceName1 = this.sourceName, targetName1 = this.targetName, comObj1 = this.comObj;\n                        return new ReadableStream({\n                            start: (controller1)=>{\n                                const startCapability1 = new _util1.PromiseCapability();\n                                this.streamControllers[streamId1] = {\n                                    controller: controller1,\n                                    startCall: startCapability1,\n                                    pullCall: null,\n                                    cancelCall: null,\n                                    isClosed: false\n                                };\n                                comObj1.postMessage({\n                                    sourceName: sourceName1,\n                                    targetName: targetName1,\n                                    action: actionName1,\n                                    streamId: streamId1,\n                                    data: data1,\n                                    desiredSize: controller1.desiredSize\n                                }, transfers1);\n                                return startCapability1.promise;\n                            },\n                            pull: (controller1)=>{\n                                const pullCapability1 = new _util1.PromiseCapability();\n                                this.streamControllers[streamId1].pullCall = pullCapability1;\n                                comObj1.postMessage({\n                                    sourceName: sourceName1,\n                                    targetName: targetName1,\n                                    stream: StreamKind1.PULL,\n                                    streamId: streamId1,\n                                    desiredSize: controller1.desiredSize\n                                });\n                                return pullCapability1.promise;\n                            },\n                            cancel: (reason1)=>{\n                                (0, _util1.assert)(reason1 instanceof Error, \"cancel must have a valid reason\");\n                                const cancelCapability1 = new _util1.PromiseCapability();\n                                this.streamControllers[streamId1].cancelCall = cancelCapability1;\n                                this.streamControllers[streamId1].isClosed = true;\n                                comObj1.postMessage({\n                                    sourceName: sourceName1,\n                                    targetName: targetName1,\n                                    stream: StreamKind1.CANCEL,\n                                    streamId: streamId1,\n                                    reason: wrapReason1(reason1)\n                                });\n                                return cancelCapability1.promise;\n                            }\n                        }, queueingStrategy1);\n                    }\n                    #createStreamSink(data1) {\n                        const streamId1 = data1.streamId, sourceName1 = this.sourceName, targetName1 = data1.sourceName, comObj1 = this.comObj;\n                        const self1 = this, action1 = this.actionHandler[data1.action];\n                        const streamSink1 = {\n                            enqueue (chunk3, size1 = 1, transfers1) {\n                                if (this.isCancelled) {\n                                    return;\n                                }\n                                const lastDesiredSize1 = this.desiredSize;\n                                this.desiredSize -= size1;\n                                if (lastDesiredSize1 > 0 && this.desiredSize <= 0) {\n                                    this.sinkCapability = new _util1.PromiseCapability();\n                                    this.ready = this.sinkCapability.promise;\n                                }\n                                comObj1.postMessage({\n                                    sourceName: sourceName1,\n                                    targetName: targetName1,\n                                    stream: StreamKind1.ENQUEUE,\n                                    streamId: streamId1,\n                                    chunk: chunk3\n                                }, transfers1);\n                            },\n                            close () {\n                                if (this.isCancelled) {\n                                    return;\n                                }\n                                this.isCancelled = true;\n                                comObj1.postMessage({\n                                    sourceName: sourceName1,\n                                    targetName: targetName1,\n                                    stream: StreamKind1.CLOSE,\n                                    streamId: streamId1\n                                });\n                                delete self1.streamSinks[streamId1];\n                            },\n                            error (reason1) {\n                                (0, _util1.assert)(reason1 instanceof Error, \"error must have a valid reason\");\n                                if (this.isCancelled) {\n                                    return;\n                                }\n                                this.isCancelled = true;\n                                comObj1.postMessage({\n                                    sourceName: sourceName1,\n                                    targetName: targetName1,\n                                    stream: StreamKind1.ERROR,\n                                    streamId: streamId1,\n                                    reason: wrapReason1(reason1)\n                                });\n                            },\n                            sinkCapability: new _util1.PromiseCapability(),\n                            onPull: null,\n                            onCancel: null,\n                            isCancelled: false,\n                            desiredSize: data1.desiredSize,\n                            ready: null\n                        };\n                        streamSink1.sinkCapability.resolve();\n                        streamSink1.ready = streamSink1.sinkCapability.promise;\n                        this.streamSinks[streamId1] = streamSink1;\n                        new Promise(function(resolve1) {\n                            resolve1(action1(data1.data, streamSink1));\n                        }).then(function() {\n                            comObj1.postMessage({\n                                sourceName: sourceName1,\n                                targetName: targetName1,\n                                stream: StreamKind1.START_COMPLETE,\n                                streamId: streamId1,\n                                success: true\n                            });\n                        }, function(reason1) {\n                            comObj1.postMessage({\n                                sourceName: sourceName1,\n                                targetName: targetName1,\n                                stream: StreamKind1.START_COMPLETE,\n                                streamId: streamId1,\n                                reason: wrapReason1(reason1)\n                            });\n                        });\n                    }\n                    #processStreamMessage(data1) {\n                        const streamId1 = data1.streamId, sourceName1 = this.sourceName, targetName1 = data1.sourceName, comObj1 = this.comObj;\n                        const streamController1 = this.streamControllers[streamId1], streamSink1 = this.streamSinks[streamId1];\n                        switch(data1.stream){\n                            case StreamKind1.START_COMPLETE:\n                                if (data1.success) {\n                                    streamController1.startCall.resolve();\n                                } else {\n                                    streamController1.startCall.reject(wrapReason1(data1.reason));\n                                }\n                                break;\n                            case StreamKind1.PULL_COMPLETE:\n                                if (data1.success) {\n                                    streamController1.pullCall.resolve();\n                                } else {\n                                    streamController1.pullCall.reject(wrapReason1(data1.reason));\n                                }\n                                break;\n                            case StreamKind1.PULL:\n                                if (!streamSink1) {\n                                    comObj1.postMessage({\n                                        sourceName: sourceName1,\n                                        targetName: targetName1,\n                                        stream: StreamKind1.PULL_COMPLETE,\n                                        streamId: streamId1,\n                                        success: true\n                                    });\n                                    break;\n                                }\n                                if (streamSink1.desiredSize <= 0 && data1.desiredSize > 0) {\n                                    streamSink1.sinkCapability.resolve();\n                                }\n                                streamSink1.desiredSize = data1.desiredSize;\n                                new Promise(function(resolve1) {\n                                    resolve1(streamSink1.onPull?.());\n                                }).then(function() {\n                                    comObj1.postMessage({\n                                        sourceName: sourceName1,\n                                        targetName: targetName1,\n                                        stream: StreamKind1.PULL_COMPLETE,\n                                        streamId: streamId1,\n                                        success: true\n                                    });\n                                }, function(reason1) {\n                                    comObj1.postMessage({\n                                        sourceName: sourceName1,\n                                        targetName: targetName1,\n                                        stream: StreamKind1.PULL_COMPLETE,\n                                        streamId: streamId1,\n                                        reason: wrapReason1(reason1)\n                                    });\n                                });\n                                break;\n                            case StreamKind1.ENQUEUE:\n                                (0, _util1.assert)(streamController1, \"enqueue should have stream controller\");\n                                if (streamController1.isClosed) {\n                                    break;\n                                }\n                                streamController1.controller.enqueue(data1.chunk);\n                                break;\n                            case StreamKind1.CLOSE:\n                                (0, _util1.assert)(streamController1, \"close should have stream controller\");\n                                if (streamController1.isClosed) {\n                                    break;\n                                }\n                                streamController1.isClosed = true;\n                                streamController1.controller.close();\n                                this.#deleteStreamController(streamController1, streamId1);\n                                break;\n                            case StreamKind1.ERROR:\n                                (0, _util1.assert)(streamController1, \"error should have stream controller\");\n                                streamController1.controller.error(wrapReason1(data1.reason));\n                                this.#deleteStreamController(streamController1, streamId1);\n                                break;\n                            case StreamKind1.CANCEL_COMPLETE:\n                                if (data1.success) {\n                                    streamController1.cancelCall.resolve();\n                                } else {\n                                    streamController1.cancelCall.reject(wrapReason1(data1.reason));\n                                }\n                                this.#deleteStreamController(streamController1, streamId1);\n                                break;\n                            case StreamKind1.CANCEL:\n                                if (!streamSink1) {\n                                    break;\n                                }\n                                new Promise(function(resolve1) {\n                                    resolve1(streamSink1.onCancel?.(wrapReason1(data1.reason)));\n                                }).then(function() {\n                                    comObj1.postMessage({\n                                        sourceName: sourceName1,\n                                        targetName: targetName1,\n                                        stream: StreamKind1.CANCEL_COMPLETE,\n                                        streamId: streamId1,\n                                        success: true\n                                    });\n                                }, function(reason1) {\n                                    comObj1.postMessage({\n                                        sourceName: sourceName1,\n                                        targetName: targetName1,\n                                        stream: StreamKind1.CANCEL_COMPLETE,\n                                        streamId: streamId1,\n                                        reason: wrapReason1(reason1)\n                                    });\n                                });\n                                streamSink1.sinkCapability.reject(wrapReason1(data1.reason));\n                                streamSink1.isCancelled = true;\n                                delete this.streamSinks[streamId1];\n                                break;\n                            default:\n                                throw new Error(\"Unexpected stream case\");\n                        }\n                    }\n                    async #deleteStreamController(streamController1, streamId1) {\n                        await Promise.allSettled([\n                            streamController1.startCall?.promise,\n                            streamController1.pullCall?.promise,\n                            streamController1.cancelCall?.promise\n                        ]);\n                        delete this.streamControllers[streamId1];\n                    }\n                    destroy() {\n                        this.comObj.removeEventListener(\"message\", this._onComObjOnMessage);\n                    }\n                }\n                exports1.MessageHandler = MessageHandler1;\n            /***/ },\n            /* 16 */ /***/ (__unused_webpack_module1, exports1, __w_pdfjs_require__1)=>{\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                exports1.Metadata = void 0;\n                var _util1 = __w_pdfjs_require__1(1);\n                class Metadata1 {\n                    #metadataMap;\n                    #data;\n                    constructor({ parsedData: parsedData1, rawData: rawData1 }){\n                        this.#metadataMap = parsedData1;\n                        this.#data = rawData1;\n                    }\n                    getRaw() {\n                        return this.#data;\n                    }\n                    get(name1) {\n                        return this.#metadataMap.get(name1) ?? null;\n                    }\n                    getAll() {\n                        return (0, _util1.objectFromMap)(this.#metadataMap);\n                    }\n                    has(name1) {\n                        return this.#metadataMap.has(name1);\n                    }\n                }\n                exports1.Metadata = Metadata1;\n            /***/ },\n            /* 17 */ /***/ (__unused_webpack_module1, exports1, __w_pdfjs_require__1)=>{\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                exports1.OptionalContentConfig = void 0;\n                var _util1 = __w_pdfjs_require__1(1);\n                var _murmurhash1 = __w_pdfjs_require__1(8);\n                const INTERNAL1 = Symbol(\"INTERNAL\");\n                class OptionalContentGroup1 {\n                    #visible;\n                    constructor(name1, intent1){\n                        this.#visible = true;\n                        this.name = name1;\n                        this.intent = intent1;\n                    }\n                    get visible() {\n                        return this.#visible;\n                    }\n                    _setVisible(internal1, visible1) {\n                        if (internal1 !== INTERNAL1) {\n                            (0, _util1.unreachable)(\"Internal method `_setVisible` called.\");\n                        }\n                        this.#visible = visible1;\n                    }\n                }\n                class OptionalContentConfig1 {\n                    #cachedGetHash;\n                    #groups;\n                    #initialHash;\n                    #order;\n                    constructor(data1){\n                        this.#cachedGetHash = null;\n                        this.#groups = new Map();\n                        this.#initialHash = null;\n                        this.#order = null;\n                        this.name = null;\n                        this.creator = null;\n                        if (data1 === null) {\n                            return;\n                        }\n                        this.name = data1.name;\n                        this.creator = data1.creator;\n                        this.#order = data1.order;\n                        for (const group1 of data1.groups){\n                            this.#groups.set(group1.id, new OptionalContentGroup1(group1.name, group1.intent));\n                        }\n                        if (data1.baseState === \"OFF\") {\n                            for (const group1 of this.#groups.values()){\n                                group1._setVisible(INTERNAL1, false);\n                            }\n                        }\n                        for (const on1 of data1.on){\n                            this.#groups.get(on1)._setVisible(INTERNAL1, true);\n                        }\n                        for (const off1 of data1.off){\n                            this.#groups.get(off1)._setVisible(INTERNAL1, false);\n                        }\n                        this.#initialHash = this.getHash();\n                    }\n                    #evaluateVisibilityExpression(array1) {\n                        const length1 = array1.length;\n                        if (length1 < 2) {\n                            return true;\n                        }\n                        const operator1 = array1[0];\n                        for(let i1 = 1; i1 < length1; i1++){\n                            const element1 = array1[i1];\n                            let state1;\n                            if (Array.isArray(element1)) {\n                                state1 = this.#evaluateVisibilityExpression(element1);\n                            } else if (this.#groups.has(element1)) {\n                                state1 = this.#groups.get(element1).visible;\n                            } else {\n                                (0, _util1.warn)(`Optional content group not found: ${element1}`);\n                                return true;\n                            }\n                            switch(operator1){\n                                case \"And\":\n                                    if (!state1) {\n                                        return false;\n                                    }\n                                    break;\n                                case \"Or\":\n                                    if (state1) {\n                                        return true;\n                                    }\n                                    break;\n                                case \"Not\":\n                                    return !state1;\n                                default:\n                                    return true;\n                            }\n                        }\n                        return operator1 === \"And\";\n                    }\n                    isVisible(group1) {\n                        if (this.#groups.size === 0) {\n                            return true;\n                        }\n                        if (!group1) {\n                            (0, _util1.warn)(\"Optional content group not defined.\");\n                            return true;\n                        }\n                        if (group1.type === \"OCG\") {\n                            if (!this.#groups.has(group1.id)) {\n                                (0, _util1.warn)(`Optional content group not found: ${group1.id}`);\n                                return true;\n                            }\n                            return this.#groups.get(group1.id).visible;\n                        } else if (group1.type === \"OCMD\") {\n                            if (group1.expression) {\n                                return this.#evaluateVisibilityExpression(group1.expression);\n                            }\n                            if (!group1.policy || group1.policy === \"AnyOn\") {\n                                for (const id1 of group1.ids){\n                                    if (!this.#groups.has(id1)) {\n                                        (0, _util1.warn)(`Optional content group not found: ${id1}`);\n                                        return true;\n                                    }\n                                    if (this.#groups.get(id1).visible) {\n                                        return true;\n                                    }\n                                }\n                                return false;\n                            } else if (group1.policy === \"AllOn\") {\n                                for (const id1 of group1.ids){\n                                    if (!this.#groups.has(id1)) {\n                                        (0, _util1.warn)(`Optional content group not found: ${id1}`);\n                                        return true;\n                                    }\n                                    if (!this.#groups.get(id1).visible) {\n                                        return false;\n                                    }\n                                }\n                                return true;\n                            } else if (group1.policy === \"AnyOff\") {\n                                for (const id1 of group1.ids){\n                                    if (!this.#groups.has(id1)) {\n                                        (0, _util1.warn)(`Optional content group not found: ${id1}`);\n                                        return true;\n                                    }\n                                    if (!this.#groups.get(id1).visible) {\n                                        return true;\n                                    }\n                                }\n                                return false;\n                            } else if (group1.policy === \"AllOff\") {\n                                for (const id1 of group1.ids){\n                                    if (!this.#groups.has(id1)) {\n                                        (0, _util1.warn)(`Optional content group not found: ${id1}`);\n                                        return true;\n                                    }\n                                    if (this.#groups.get(id1).visible) {\n                                        return false;\n                                    }\n                                }\n                                return true;\n                            }\n                            (0, _util1.warn)(`Unknown optional content policy ${group1.policy}.`);\n                            return true;\n                        }\n                        (0, _util1.warn)(`Unknown group type ${group1.type}.`);\n                        return true;\n                    }\n                    setVisibility(id1, visible1 = true) {\n                        if (!this.#groups.has(id1)) {\n                            (0, _util1.warn)(`Optional content group not found: ${id1}`);\n                            return;\n                        }\n                        this.#groups.get(id1)._setVisible(INTERNAL1, !!visible1);\n                        this.#cachedGetHash = null;\n                    }\n                    get hasInitialVisibility() {\n                        return this.#initialHash === null || this.getHash() === this.#initialHash;\n                    }\n                    getOrder() {\n                        if (!this.#groups.size) {\n                            return null;\n                        }\n                        if (this.#order) {\n                            return this.#order.slice();\n                        }\n                        return [\n                            ...this.#groups.keys()\n                        ];\n                    }\n                    getGroups() {\n                        return this.#groups.size > 0 ? (0, _util1.objectFromMap)(this.#groups) : null;\n                    }\n                    getGroup(id1) {\n                        return this.#groups.get(id1) || null;\n                    }\n                    getHash() {\n                        if (this.#cachedGetHash !== null) {\n                            return this.#cachedGetHash;\n                        }\n                        const hash1 = new _murmurhash1.MurmurHash3_64();\n                        for (const [id1, group1] of this.#groups){\n                            hash1.update(`${id1}:${group1.visible}`);\n                        }\n                        return this.#cachedGetHash = hash1.hexdigest();\n                    }\n                }\n                exports1.OptionalContentConfig = OptionalContentConfig1;\n            /***/ },\n            /* 18 */ /***/ (__unused_webpack_module1, exports1, __w_pdfjs_require__1)=>{\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                exports1.PDFDataTransportStream = void 0;\n                var _util1 = __w_pdfjs_require__1(1);\n                var _display_utils1 = __w_pdfjs_require__1(6);\n                class PDFDataTransportStream1 {\n                    constructor({ length: length1, initialData: initialData1, progressiveDone: progressiveDone1 = false, contentDispositionFilename: contentDispositionFilename1 = null, disableRange: disableRange1 = false, disableStream: disableStream1 = false }, pdfDataRangeTransport1){\n                        (0, _util1.assert)(pdfDataRangeTransport1, 'PDFDataTransportStream - missing required \"pdfDataRangeTransport\" argument.');\n                        this._queuedChunks = [];\n                        this._progressiveDone = progressiveDone1;\n                        this._contentDispositionFilename = contentDispositionFilename1;\n                        if (initialData1?.length > 0) {\n                            const buffer1 = initialData1 instanceof Uint8Array && initialData1.byteLength === initialData1.buffer.byteLength ? initialData1.buffer : new Uint8Array(initialData1).buffer;\n                            this._queuedChunks.push(buffer1);\n                        }\n                        this._pdfDataRangeTransport = pdfDataRangeTransport1;\n                        this._isStreamingSupported = !disableStream1;\n                        this._isRangeSupported = !disableRange1;\n                        this._contentLength = length1;\n                        this._fullRequestReader = null;\n                        this._rangeReaders = [];\n                        this._pdfDataRangeTransport.addRangeListener((begin1, chunk3)=>{\n                            this._onReceiveData({\n                                begin: begin1,\n                                chunk: chunk3\n                            });\n                        });\n                        this._pdfDataRangeTransport.addProgressListener((loaded1, total1)=>{\n                            this._onProgress({\n                                loaded: loaded1,\n                                total: total1\n                            });\n                        });\n                        this._pdfDataRangeTransport.addProgressiveReadListener((chunk3)=>{\n                            this._onReceiveData({\n                                chunk: chunk3\n                            });\n                        });\n                        this._pdfDataRangeTransport.addProgressiveDoneListener(()=>{\n                            this._onProgressiveDone();\n                        });\n                        this._pdfDataRangeTransport.transportReady();\n                    }\n                    _onReceiveData({ begin: begin1, chunk: chunk3 }) {\n                        const buffer1 = chunk3 instanceof Uint8Array && chunk3.byteLength === chunk3.buffer.byteLength ? chunk3.buffer : new Uint8Array(chunk3).buffer;\n                        if (begin1 === undefined) {\n                            if (this._fullRequestReader) {\n                                this._fullRequestReader._enqueue(buffer1);\n                            } else {\n                                this._queuedChunks.push(buffer1);\n                            }\n                        } else {\n                            const found1 = this._rangeReaders.some(function(rangeReader1) {\n                                if (rangeReader1._begin !== begin1) {\n                                    return false;\n                                }\n                                rangeReader1._enqueue(buffer1);\n                                return true;\n                            });\n                            (0, _util1.assert)(found1, \"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.\");\n                        }\n                    }\n                    get _progressiveDataLength() {\n                        return this._fullRequestReader?._loaded ?? 0;\n                    }\n                    _onProgress(evt1) {\n                        if (evt1.total === undefined) {\n                            this._rangeReaders[0]?.onProgress?.({\n                                loaded: evt1.loaded\n                            });\n                        } else {\n                            this._fullRequestReader?.onProgress?.({\n                                loaded: evt1.loaded,\n                                total: evt1.total\n                            });\n                        }\n                    }\n                    _onProgressiveDone() {\n                        this._fullRequestReader?.progressiveDone();\n                        this._progressiveDone = true;\n                    }\n                    _removeRangeReader(reader1) {\n                        const i1 = this._rangeReaders.indexOf(reader1);\n                        if (i1 >= 0) {\n                            this._rangeReaders.splice(i1, 1);\n                        }\n                    }\n                    getFullReader() {\n                        (0, _util1.assert)(!this._fullRequestReader, \"PDFDataTransportStream.getFullReader can only be called once.\");\n                        const queuedChunks1 = this._queuedChunks;\n                        this._queuedChunks = null;\n                        return new PDFDataTransportStreamReader1(this, queuedChunks1, this._progressiveDone, this._contentDispositionFilename);\n                    }\n                    getRangeReader(begin1, end1) {\n                        if (end1 <= this._progressiveDataLength) {\n                            return null;\n                        }\n                        const reader1 = new PDFDataTransportStreamRangeReader1(this, begin1, end1);\n                        this._pdfDataRangeTransport.requestDataRange(begin1, end1);\n                        this._rangeReaders.push(reader1);\n                        return reader1;\n                    }\n                    cancelAllRequests(reason1) {\n                        this._fullRequestReader?.cancel(reason1);\n                        for (const reader1 of this._rangeReaders.slice(0)){\n                            reader1.cancel(reason1);\n                        }\n                        this._pdfDataRangeTransport.abort();\n                    }\n                }\n                exports1.PDFDataTransportStream = PDFDataTransportStream1;\n                class PDFDataTransportStreamReader1 {\n                    constructor(stream1, queuedChunks1, progressiveDone1 = false, contentDispositionFilename1 = null){\n                        this._stream = stream1;\n                        this._done = progressiveDone1 || false;\n                        this._filename = (0, _display_utils1.isPdfFile)(contentDispositionFilename1) ? contentDispositionFilename1 : null;\n                        this._queuedChunks = queuedChunks1 || [];\n                        this._loaded = 0;\n                        for (const chunk3 of this._queuedChunks){\n                            this._loaded += chunk3.byteLength;\n                        }\n                        this._requests = [];\n                        this._headersReady = Promise.resolve();\n                        stream1._fullRequestReader = this;\n                        this.onProgress = null;\n                    }\n                    _enqueue(chunk3) {\n                        if (this._done) {\n                            return;\n                        }\n                        if (this._requests.length > 0) {\n                            const requestCapability1 = this._requests.shift();\n                            requestCapability1.resolve({\n                                value: chunk3,\n                                done: false\n                            });\n                        } else {\n                            this._queuedChunks.push(chunk3);\n                        }\n                        this._loaded += chunk3.byteLength;\n                    }\n                    get headersReady() {\n                        return this._headersReady;\n                    }\n                    get filename() {\n                        return this._filename;\n                    }\n                    get isRangeSupported() {\n                        return this._stream._isRangeSupported;\n                    }\n                    get isStreamingSupported() {\n                        return this._stream._isStreamingSupported;\n                    }\n                    get contentLength() {\n                        return this._stream._contentLength;\n                    }\n                    async read() {\n                        if (this._queuedChunks.length > 0) {\n                            const chunk3 = this._queuedChunks.shift();\n                            return {\n                                value: chunk3,\n                                done: false\n                            };\n                        }\n                        if (this._done) {\n                            return {\n                                value: undefined,\n                                done: true\n                            };\n                        }\n                        const requestCapability1 = new _util1.PromiseCapability();\n                        this._requests.push(requestCapability1);\n                        return requestCapability1.promise;\n                    }\n                    cancel(reason1) {\n                        this._done = true;\n                        for (const requestCapability1 of this._requests){\n                            requestCapability1.resolve({\n                                value: undefined,\n                                done: true\n                            });\n                        }\n                        this._requests.length = 0;\n                    }\n                    progressiveDone() {\n                        if (this._done) {\n                            return;\n                        }\n                        this._done = true;\n                    }\n                }\n                class PDFDataTransportStreamRangeReader1 {\n                    constructor(stream1, begin1, end1){\n                        this._stream = stream1;\n                        this._begin = begin1;\n                        this._end = end1;\n                        this._queuedChunk = null;\n                        this._requests = [];\n                        this._done = false;\n                        this.onProgress = null;\n                    }\n                    _enqueue(chunk3) {\n                        if (this._done) {\n                            return;\n                        }\n                        if (this._requests.length === 0) {\n                            this._queuedChunk = chunk3;\n                        } else {\n                            const requestsCapability1 = this._requests.shift();\n                            requestsCapability1.resolve({\n                                value: chunk3,\n                                done: false\n                            });\n                            for (const requestCapability1 of this._requests){\n                                requestCapability1.resolve({\n                                    value: undefined,\n                                    done: true\n                                });\n                            }\n                            this._requests.length = 0;\n                        }\n                        this._done = true;\n                        this._stream._removeRangeReader(this);\n                    }\n                    get isStreamingSupported() {\n                        return false;\n                    }\n                    async read() {\n                        if (this._queuedChunk) {\n                            const chunk3 = this._queuedChunk;\n                            this._queuedChunk = null;\n                            return {\n                                value: chunk3,\n                                done: false\n                            };\n                        }\n                        if (this._done) {\n                            return {\n                                value: undefined,\n                                done: true\n                            };\n                        }\n                        const requestCapability1 = new _util1.PromiseCapability();\n                        this._requests.push(requestCapability1);\n                        return requestCapability1.promise;\n                    }\n                    cancel(reason1) {\n                        this._done = true;\n                        for (const requestCapability1 of this._requests){\n                            requestCapability1.resolve({\n                                value: undefined,\n                                done: true\n                            });\n                        }\n                        this._requests.length = 0;\n                        this._stream._removeRangeReader(this);\n                    }\n                }\n            /***/ },\n            /* 19 */ /***/ (__unused_webpack_module1, exports1, __w_pdfjs_require__1)=>{\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                exports1.PDFFetchStream = void 0;\n                var _util1 = __w_pdfjs_require__1(1);\n                var _network_utils1 = __w_pdfjs_require__1(20);\n                ;\n                function createFetchOptions1(headers1, withCredentials1, abortController1) {\n                    return {\n                        method: \"GET\",\n                        headers: headers1,\n                        signal: abortController1.signal,\n                        mode: \"cors\",\n                        credentials: withCredentials1 ? \"include\" : \"same-origin\",\n                        redirect: \"follow\"\n                    };\n                }\n                function createHeaders1(httpHeaders1) {\n                    const headers1 = new Headers();\n                    for(const property1 in httpHeaders1){\n                        const value1 = httpHeaders1[property1];\n                        if (value1 === undefined) {\n                            continue;\n                        }\n                        headers1.append(property1, value1);\n                    }\n                    return headers1;\n                }\n                function getArrayBuffer1(val1) {\n                    if (val1 instanceof Uint8Array) {\n                        return val1.buffer;\n                    }\n                    if (val1 instanceof ArrayBuffer) {\n                        return val1;\n                    }\n                    (0, _util1.warn)(`getArrayBuffer - unexpected data format: ${val1}`);\n                    return new Uint8Array(val1).buffer;\n                }\n                class PDFFetchStream1 {\n                    constructor(source1){\n                        this.source = source1;\n                        this.isHttp = /^https?:/i.test(source1.url);\n                        this.httpHeaders = this.isHttp && source1.httpHeaders || {};\n                        this._fullRequestReader = null;\n                        this._rangeRequestReaders = [];\n                    }\n                    get _progressiveDataLength() {\n                        return this._fullRequestReader?._loaded ?? 0;\n                    }\n                    getFullReader() {\n                        (0, _util1.assert)(!this._fullRequestReader, \"PDFFetchStream.getFullReader can only be called once.\");\n                        this._fullRequestReader = new PDFFetchStreamReader1(this);\n                        return this._fullRequestReader;\n                    }\n                    getRangeReader(begin1, end1) {\n                        if (end1 <= this._progressiveDataLength) {\n                            return null;\n                        }\n                        const reader1 = new PDFFetchStreamRangeReader1(this, begin1, end1);\n                        this._rangeRequestReaders.push(reader1);\n                        return reader1;\n                    }\n                    cancelAllRequests(reason1) {\n                        this._fullRequestReader?.cancel(reason1);\n                        for (const reader1 of this._rangeRequestReaders.slice(0)){\n                            reader1.cancel(reason1);\n                        }\n                    }\n                }\n                exports1.PDFFetchStream = PDFFetchStream1;\n                class PDFFetchStreamReader1 {\n                    constructor(stream1){\n                        this._stream = stream1;\n                        this._reader = null;\n                        this._loaded = 0;\n                        this._filename = null;\n                        const source1 = stream1.source;\n                        this._withCredentials = source1.withCredentials || false;\n                        this._contentLength = source1.length;\n                        this._headersCapability = new _util1.PromiseCapability();\n                        this._disableRange = source1.disableRange || false;\n                        this._rangeChunkSize = source1.rangeChunkSize;\n                        if (!this._rangeChunkSize && !this._disableRange) {\n                            this._disableRange = true;\n                        }\n                        this._abortController = new AbortController();\n                        this._isStreamingSupported = !source1.disableStream;\n                        this._isRangeSupported = !source1.disableRange;\n                        this._headers = createHeaders1(this._stream.httpHeaders);\n                        const url1 = source1.url;\n                        fetch(url1, createFetchOptions1(this._headers, this._withCredentials, this._abortController)).then((response1)=>{\n                            if (!(0, _network_utils1.validateResponseStatus)(response1.status)) {\n                                throw (0, _network_utils1.createResponseStatusError)(response1.status, url1);\n                            }\n                            this._reader = response1.body.getReader();\n                            this._headersCapability.resolve();\n                            const getResponseHeader1 = (name1)=>{\n                                return response1.headers.get(name1);\n                            };\n                            const { allowRangeRequests: allowRangeRequests1, suggestedLength: suggestedLength1 } = (0, _network_utils1.validateRangeRequestCapabilities)({\n                                getResponseHeader: getResponseHeader1,\n                                isHttp: this._stream.isHttp,\n                                rangeChunkSize: this._rangeChunkSize,\n                                disableRange: this._disableRange\n                            });\n                            this._isRangeSupported = allowRangeRequests1;\n                            this._contentLength = suggestedLength1 || this._contentLength;\n                            this._filename = (0, _network_utils1.extractFilenameFromHeader)(getResponseHeader1);\n                            if (!this._isStreamingSupported && this._isRangeSupported) {\n                                this.cancel(new _util1.AbortException(\"Streaming is disabled.\"));\n                            }\n                        }).catch(this._headersCapability.reject);\n                        this.onProgress = null;\n                    }\n                    get headersReady() {\n                        return this._headersCapability.promise;\n                    }\n                    get filename() {\n                        return this._filename;\n                    }\n                    get contentLength() {\n                        return this._contentLength;\n                    }\n                    get isRangeSupported() {\n                        return this._isRangeSupported;\n                    }\n                    get isStreamingSupported() {\n                        return this._isStreamingSupported;\n                    }\n                    async read() {\n                        await this._headersCapability.promise;\n                        const { value: value1, done: done1 } = await this._reader.read();\n                        if (done1) {\n                            return {\n                                value: value1,\n                                done: done1\n                            };\n                        }\n                        this._loaded += value1.byteLength;\n                        this.onProgress?.({\n                            loaded: this._loaded,\n                            total: this._contentLength\n                        });\n                        return {\n                            value: getArrayBuffer1(value1),\n                            done: false\n                        };\n                    }\n                    cancel(reason1) {\n                        this._reader?.cancel(reason1);\n                        this._abortController.abort();\n                    }\n                }\n                class PDFFetchStreamRangeReader1 {\n                    constructor(stream1, begin1, end1){\n                        this._stream = stream1;\n                        this._reader = null;\n                        this._loaded = 0;\n                        const source1 = stream1.source;\n                        this._withCredentials = source1.withCredentials || false;\n                        this._readCapability = new _util1.PromiseCapability();\n                        this._isStreamingSupported = !source1.disableStream;\n                        this._abortController = new AbortController();\n                        this._headers = createHeaders1(this._stream.httpHeaders);\n                        this._headers.append(\"Range\", `bytes=${begin1}-${end1 - 1}`);\n                        const url1 = source1.url;\n                        fetch(url1, createFetchOptions1(this._headers, this._withCredentials, this._abortController)).then((response1)=>{\n                            if (!(0, _network_utils1.validateResponseStatus)(response1.status)) {\n                                throw (0, _network_utils1.createResponseStatusError)(response1.status, url1);\n                            }\n                            this._readCapability.resolve();\n                            this._reader = response1.body.getReader();\n                        }).catch(this._readCapability.reject);\n                        this.onProgress = null;\n                    }\n                    get isStreamingSupported() {\n                        return this._isStreamingSupported;\n                    }\n                    async read() {\n                        await this._readCapability.promise;\n                        const { value: value1, done: done1 } = await this._reader.read();\n                        if (done1) {\n                            return {\n                                value: value1,\n                                done: done1\n                            };\n                        }\n                        this._loaded += value1.byteLength;\n                        this.onProgress?.({\n                            loaded: this._loaded\n                        });\n                        return {\n                            value: getArrayBuffer1(value1),\n                            done: false\n                        };\n                    }\n                    cancel(reason1) {\n                        this._reader?.cancel(reason1);\n                        this._abortController.abort();\n                    }\n                }\n            /***/ },\n            /* 20 */ /***/ (__unused_webpack_module1, exports1, __w_pdfjs_require__1)=>{\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                exports1.createResponseStatusError = createResponseStatusError1;\n                exports1.extractFilenameFromHeader = extractFilenameFromHeader1;\n                exports1.validateRangeRequestCapabilities = validateRangeRequestCapabilities1;\n                exports1.validateResponseStatus = validateResponseStatus1;\n                var _util1 = __w_pdfjs_require__1(1);\n                var _content_disposition1 = __w_pdfjs_require__1(21);\n                var _display_utils1 = __w_pdfjs_require__1(6);\n                function validateRangeRequestCapabilities1({ getResponseHeader: getResponseHeader1, isHttp: isHttp1, rangeChunkSize: rangeChunkSize1, disableRange: disableRange1 }) {\n                    const returnValues1 = {\n                        allowRangeRequests: false,\n                        suggestedLength: undefined\n                    };\n                    const length1 = parseInt(getResponseHeader1(\"Content-Length\"), 10);\n                    if (!Number.isInteger(length1)) {\n                        return returnValues1;\n                    }\n                    returnValues1.suggestedLength = length1;\n                    if (length1 <= 2 * rangeChunkSize1) {\n                        return returnValues1;\n                    }\n                    if (disableRange1 || !isHttp1) {\n                        return returnValues1;\n                    }\n                    if (getResponseHeader1(\"Accept-Ranges\") !== \"bytes\") {\n                        return returnValues1;\n                    }\n                    const contentEncoding1 = getResponseHeader1(\"Content-Encoding\") || \"identity\";\n                    if (contentEncoding1 !== \"identity\") {\n                        return returnValues1;\n                    }\n                    returnValues1.allowRangeRequests = true;\n                    return returnValues1;\n                }\n                function extractFilenameFromHeader1(getResponseHeader1) {\n                    const contentDisposition1 = getResponseHeader1(\"Content-Disposition\");\n                    if (contentDisposition1) {\n                        let filename1 = (0, _content_disposition1.getFilenameFromContentDispositionHeader)(contentDisposition1);\n                        if (filename1.includes(\"%\")) {\n                            try {\n                                filename1 = decodeURIComponent(filename1);\n                            } catch  {}\n                        }\n                        if ((0, _display_utils1.isPdfFile)(filename1)) {\n                            return filename1;\n                        }\n                    }\n                    return null;\n                }\n                function createResponseStatusError1(status1, url1) {\n                    if (status1 === 404 || status1 === 0 && url1.startsWith(\"file:\")) {\n                        return new _util1.MissingPDFException('Missing PDF \"' + url1 + '\".');\n                    }\n                    return new _util1.UnexpectedResponseException(`Unexpected server response (${status1}) while retrieving PDF \"${url1}\".`, status1);\n                }\n                function validateResponseStatus1(status1) {\n                    return status1 === 200 || status1 === 206;\n                }\n            /***/ },\n            /* 21 */ /***/ (__unused_webpack_module1, exports1, __w_pdfjs_require__1)=>{\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                exports1.getFilenameFromContentDispositionHeader = getFilenameFromContentDispositionHeader1;\n                var _util1 = __w_pdfjs_require__1(1);\n                function getFilenameFromContentDispositionHeader1(contentDisposition1) {\n                    let needsEncodingFixup1 = true;\n                    let tmp1 = toParamRegExp1(\"filename\\\\*\", \"i\").exec(contentDisposition1);\n                    if (tmp1) {\n                        tmp1 = tmp1[1];\n                        let filename1 = rfc2616unquote1(tmp1);\n                        filename1 = unescape(filename1);\n                        filename1 = rfc5987decode1(filename1);\n                        filename1 = rfc2047decode1(filename1);\n                        return fixupEncoding1(filename1);\n                    }\n                    tmp1 = rfc2231getparam1(contentDisposition1);\n                    if (tmp1) {\n                        const filename1 = rfc2047decode1(tmp1);\n                        return fixupEncoding1(filename1);\n                    }\n                    tmp1 = toParamRegExp1(\"filename\", \"i\").exec(contentDisposition1);\n                    if (tmp1) {\n                        tmp1 = tmp1[1];\n                        let filename1 = rfc2616unquote1(tmp1);\n                        filename1 = rfc2047decode1(filename1);\n                        return fixupEncoding1(filename1);\n                    }\n                    function toParamRegExp1(attributePattern1, flags1) {\n                        return new RegExp(\"(?:^|;)\\\\s*\" + attributePattern1 + \"\\\\s*=\\\\s*\" + \"(\" + '[^\";\\\\s][^;\\\\s]*' + \"|\" + '\"(?:[^\"\\\\\\\\]|\\\\\\\\\"?)+\"?' + \")\", flags1);\n                    }\n                    function textdecode1(encoding1, value1) {\n                        if (encoding1) {\n                            if (!/^[\\x00-\\xFF]+$/.test(value1)) {\n                                return value1;\n                            }\n                            try {\n                                const decoder1 = new TextDecoder(encoding1, {\n                                    fatal: true\n                                });\n                                const buffer1 = (0, _util1.stringToBytes)(value1);\n                                value1 = decoder1.decode(buffer1);\n                                needsEncodingFixup1 = false;\n                            } catch  {}\n                        }\n                        return value1;\n                    }\n                    function fixupEncoding1(value1) {\n                        if (needsEncodingFixup1 && /[\\x80-\\xff]/.test(value1)) {\n                            value1 = textdecode1(\"utf-8\", value1);\n                            if (needsEncodingFixup1) {\n                                value1 = textdecode1(\"iso-8859-1\", value1);\n                            }\n                        }\n                        return value1;\n                    }\n                    function rfc2231getparam1(contentDispositionStr1) {\n                        const matches1 = [];\n                        let match1;\n                        const iter1 = toParamRegExp1(\"filename\\\\*((?!0\\\\d)\\\\d+)(\\\\*?)\", \"ig\");\n                        while((match1 = iter1.exec(contentDispositionStr1)) !== null){\n                            let [, n1, quot1, part1] = match1;\n                            n1 = parseInt(n1, 10);\n                            if (n1 in matches1) {\n                                if (n1 === 0) {\n                                    break;\n                                }\n                                continue;\n                            }\n                            matches1[n1] = [\n                                quot1,\n                                part1\n                            ];\n                        }\n                        const parts1 = [];\n                        for(let n1 = 0; n1 < matches1.length; ++n1){\n                            if (!(n1 in matches1)) {\n                                break;\n                            }\n                            let [quot1, part1] = matches1[n1];\n                            part1 = rfc2616unquote1(part1);\n                            if (quot1) {\n                                part1 = unescape(part1);\n                                if (n1 === 0) {\n                                    part1 = rfc5987decode1(part1);\n                                }\n                            }\n                            parts1.push(part1);\n                        }\n                        return parts1.join(\"\");\n                    }\n                    function rfc2616unquote1(value1) {\n                        if (value1.startsWith('\"')) {\n                            const parts1 = value1.slice(1).split('\\\\\"');\n                            for(let i1 = 0; i1 < parts1.length; ++i1){\n                                const quotindex1 = parts1[i1].indexOf('\"');\n                                if (quotindex1 !== -1) {\n                                    parts1[i1] = parts1[i1].slice(0, quotindex1);\n                                    parts1.length = i1 + 1;\n                                }\n                                parts1[i1] = parts1[i1].replaceAll(/\\\\(.)/g, \"$1\");\n                            }\n                            value1 = parts1.join('\"');\n                        }\n                        return value1;\n                    }\n                    function rfc5987decode1(extvalue1) {\n                        const encodingend1 = extvalue1.indexOf(\"'\");\n                        if (encodingend1 === -1) {\n                            return extvalue1;\n                        }\n                        const encoding1 = extvalue1.slice(0, encodingend1);\n                        const langvalue1 = extvalue1.slice(encodingend1 + 1);\n                        const value1 = langvalue1.replace(/^[^']*'/, \"\");\n                        return textdecode1(encoding1, value1);\n                    }\n                    function rfc2047decode1(value1) {\n                        if (!value1.startsWith(\"=?\") || /[\\x00-\\x19\\x80-\\xff]/.test(value1)) {\n                            return value1;\n                        }\n                        return value1.replaceAll(/=\\?([\\w-]*)\\?([QqBb])\\?((?:[^?]|\\?(?!=))*)\\?=/g, function(matches1, charset1, encoding1, text1) {\n                            if (encoding1 === \"q\" || encoding1 === \"Q\") {\n                                text1 = text1.replaceAll(\"_\", \" \");\n                                text1 = text1.replaceAll(/=([0-9a-fA-F]{2})/g, function(match1, hex1) {\n                                    return String.fromCharCode(parseInt(hex1, 16));\n                                });\n                                return textdecode1(charset1, text1);\n                            }\n                            try {\n                                text1 = atob(text1);\n                            } catch  {}\n                            return textdecode1(charset1, text1);\n                        });\n                    }\n                    return \"\";\n                }\n            /***/ },\n            /* 22 */ /***/ (__unused_webpack_module1, exports1, __w_pdfjs_require__1)=>{\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                exports1.PDFNetworkStream = void 0;\n                var _util1 = __w_pdfjs_require__1(1);\n                var _network_utils1 = __w_pdfjs_require__1(20);\n                ;\n                const OK_RESPONSE1 = 200;\n                const PARTIAL_CONTENT_RESPONSE1 = 206;\n                function getArrayBuffer1(xhr1) {\n                    const data1 = xhr1.response;\n                    if (typeof data1 !== \"string\") {\n                        return data1;\n                    }\n                    return (0, _util1.stringToBytes)(data1).buffer;\n                }\n                class NetworkManager1 {\n                    constructor(url1, args1 = {}){\n                        this.url = url1;\n                        this.isHttp = /^https?:/i.test(url1);\n                        this.httpHeaders = this.isHttp && args1.httpHeaders || Object.create(null);\n                        this.withCredentials = args1.withCredentials || false;\n                        this.currXhrId = 0;\n                        this.pendingRequests = Object.create(null);\n                    }\n                    requestRange(begin1, end1, listeners1) {\n                        const args1 = {\n                            begin: begin1,\n                            end: end1\n                        };\n                        for(const prop1 in listeners1){\n                            args1[prop1] = listeners1[prop1];\n                        }\n                        return this.request(args1);\n                    }\n                    requestFull(listeners1) {\n                        return this.request(listeners1);\n                    }\n                    request(args1) {\n                        const xhr1 = new XMLHttpRequest();\n                        const xhrId1 = this.currXhrId++;\n                        const pendingRequest1 = this.pendingRequests[xhrId1] = {\n                            xhr: xhr1\n                        };\n                        xhr1.open(\"GET\", this.url);\n                        xhr1.withCredentials = this.withCredentials;\n                        for(const property1 in this.httpHeaders){\n                            const value1 = this.httpHeaders[property1];\n                            if (value1 === undefined) {\n                                continue;\n                            }\n                            xhr1.setRequestHeader(property1, value1);\n                        }\n                        if (this.isHttp && \"begin\" in args1 && \"end\" in args1) {\n                            xhr1.setRequestHeader(\"Range\", `bytes=${args1.begin}-${args1.end - 1}`);\n                            pendingRequest1.expectedStatus = PARTIAL_CONTENT_RESPONSE1;\n                        } else {\n                            pendingRequest1.expectedStatus = OK_RESPONSE1;\n                        }\n                        xhr1.responseType = \"arraybuffer\";\n                        if (args1.onError) {\n                            xhr1.onerror = function(evt1) {\n                                args1.onError(xhr1.status);\n                            };\n                        }\n                        xhr1.onreadystatechange = this.onStateChange.bind(this, xhrId1);\n                        xhr1.onprogress = this.onProgress.bind(this, xhrId1);\n                        pendingRequest1.onHeadersReceived = args1.onHeadersReceived;\n                        pendingRequest1.onDone = args1.onDone;\n                        pendingRequest1.onError = args1.onError;\n                        pendingRequest1.onProgress = args1.onProgress;\n                        xhr1.send(null);\n                        return xhrId1;\n                    }\n                    onProgress(xhrId1, evt1) {\n                        const pendingRequest1 = this.pendingRequests[xhrId1];\n                        if (!pendingRequest1) {\n                            return;\n                        }\n                        pendingRequest1.onProgress?.(evt1);\n                    }\n                    onStateChange(xhrId1, evt1) {\n                        const pendingRequest1 = this.pendingRequests[xhrId1];\n                        if (!pendingRequest1) {\n                            return;\n                        }\n                        const xhr1 = pendingRequest1.xhr;\n                        if (xhr1.readyState >= 2 && pendingRequest1.onHeadersReceived) {\n                            pendingRequest1.onHeadersReceived();\n                            delete pendingRequest1.onHeadersReceived;\n                        }\n                        if (xhr1.readyState !== 4) {\n                            return;\n                        }\n                        if (!(xhrId1 in this.pendingRequests)) {\n                            return;\n                        }\n                        delete this.pendingRequests[xhrId1];\n                        if (xhr1.status === 0 && this.isHttp) {\n                            pendingRequest1.onError?.(xhr1.status);\n                            return;\n                        }\n                        const xhrStatus1 = xhr1.status || OK_RESPONSE1;\n                        const ok_response_on_range_request1 = xhrStatus1 === OK_RESPONSE1 && pendingRequest1.expectedStatus === PARTIAL_CONTENT_RESPONSE1;\n                        if (!ok_response_on_range_request1 && xhrStatus1 !== pendingRequest1.expectedStatus) {\n                            pendingRequest1.onError?.(xhr1.status);\n                            return;\n                        }\n                        const chunk3 = getArrayBuffer1(xhr1);\n                        if (xhrStatus1 === PARTIAL_CONTENT_RESPONSE1) {\n                            const rangeHeader1 = xhr1.getResponseHeader(\"Content-Range\");\n                            const matches1 = /bytes (\\d+)-(\\d+)\\/(\\d+)/.exec(rangeHeader1);\n                            pendingRequest1.onDone({\n                                begin: parseInt(matches1[1], 10),\n                                chunk: chunk3\n                            });\n                        } else if (chunk3) {\n                            pendingRequest1.onDone({\n                                begin: 0,\n                                chunk: chunk3\n                            });\n                        } else {\n                            pendingRequest1.onError?.(xhr1.status);\n                        }\n                    }\n                    getRequestXhr(xhrId1) {\n                        return this.pendingRequests[xhrId1].xhr;\n                    }\n                    isPendingRequest(xhrId1) {\n                        return xhrId1 in this.pendingRequests;\n                    }\n                    abortRequest(xhrId1) {\n                        const xhr1 = this.pendingRequests[xhrId1].xhr;\n                        delete this.pendingRequests[xhrId1];\n                        xhr1.abort();\n                    }\n                }\n                class PDFNetworkStream1 {\n                    constructor(source1){\n                        this._source = source1;\n                        this._manager = new NetworkManager1(source1.url, {\n                            httpHeaders: source1.httpHeaders,\n                            withCredentials: source1.withCredentials\n                        });\n                        this._rangeChunkSize = source1.rangeChunkSize;\n                        this._fullRequestReader = null;\n                        this._rangeRequestReaders = [];\n                    }\n                    _onRangeRequestReaderClosed(reader1) {\n                        const i1 = this._rangeRequestReaders.indexOf(reader1);\n                        if (i1 >= 0) {\n                            this._rangeRequestReaders.splice(i1, 1);\n                        }\n                    }\n                    getFullReader() {\n                        (0, _util1.assert)(!this._fullRequestReader, \"PDFNetworkStream.getFullReader can only be called once.\");\n                        this._fullRequestReader = new PDFNetworkStreamFullRequestReader1(this._manager, this._source);\n                        return this._fullRequestReader;\n                    }\n                    getRangeReader(begin1, end1) {\n                        const reader1 = new PDFNetworkStreamRangeRequestReader1(this._manager, begin1, end1);\n                        reader1.onClosed = this._onRangeRequestReaderClosed.bind(this);\n                        this._rangeRequestReaders.push(reader1);\n                        return reader1;\n                    }\n                    cancelAllRequests(reason1) {\n                        this._fullRequestReader?.cancel(reason1);\n                        for (const reader1 of this._rangeRequestReaders.slice(0)){\n                            reader1.cancel(reason1);\n                        }\n                    }\n                }\n                exports1.PDFNetworkStream = PDFNetworkStream1;\n                class PDFNetworkStreamFullRequestReader1 {\n                    constructor(manager1, source1){\n                        this._manager = manager1;\n                        const args1 = {\n                            onHeadersReceived: this._onHeadersReceived.bind(this),\n                            onDone: this._onDone.bind(this),\n                            onError: this._onError.bind(this),\n                            onProgress: this._onProgress.bind(this)\n                        };\n                        this._url = source1.url;\n                        this._fullRequestId = manager1.requestFull(args1);\n                        this._headersReceivedCapability = new _util1.PromiseCapability();\n                        this._disableRange = source1.disableRange || false;\n                        this._contentLength = source1.length;\n                        this._rangeChunkSize = source1.rangeChunkSize;\n                        if (!this._rangeChunkSize && !this._disableRange) {\n                            this._disableRange = true;\n                        }\n                        this._isStreamingSupported = false;\n                        this._isRangeSupported = false;\n                        this._cachedChunks = [];\n                        this._requests = [];\n                        this._done = false;\n                        this._storedError = undefined;\n                        this._filename = null;\n                        this.onProgress = null;\n                    }\n                    _onHeadersReceived() {\n                        const fullRequestXhrId1 = this._fullRequestId;\n                        const fullRequestXhr1 = this._manager.getRequestXhr(fullRequestXhrId1);\n                        const getResponseHeader1 = (name1)=>{\n                            return fullRequestXhr1.getResponseHeader(name1);\n                        };\n                        const { allowRangeRequests: allowRangeRequests1, suggestedLength: suggestedLength1 } = (0, _network_utils1.validateRangeRequestCapabilities)({\n                            getResponseHeader: getResponseHeader1,\n                            isHttp: this._manager.isHttp,\n                            rangeChunkSize: this._rangeChunkSize,\n                            disableRange: this._disableRange\n                        });\n                        if (allowRangeRequests1) {\n                            this._isRangeSupported = true;\n                        }\n                        this._contentLength = suggestedLength1 || this._contentLength;\n                        this._filename = (0, _network_utils1.extractFilenameFromHeader)(getResponseHeader1);\n                        if (this._isRangeSupported) {\n                            this._manager.abortRequest(fullRequestXhrId1);\n                        }\n                        this._headersReceivedCapability.resolve();\n                    }\n                    _onDone(data1) {\n                        if (data1) {\n                            if (this._requests.length > 0) {\n                                const requestCapability1 = this._requests.shift();\n                                requestCapability1.resolve({\n                                    value: data1.chunk,\n                                    done: false\n                                });\n                            } else {\n                                this._cachedChunks.push(data1.chunk);\n                            }\n                        }\n                        this._done = true;\n                        if (this._cachedChunks.length > 0) {\n                            return;\n                        }\n                        for (const requestCapability1 of this._requests){\n                            requestCapability1.resolve({\n                                value: undefined,\n                                done: true\n                            });\n                        }\n                        this._requests.length = 0;\n                    }\n                    _onError(status1) {\n                        this._storedError = (0, _network_utils1.createResponseStatusError)(status1, this._url);\n                        this._headersReceivedCapability.reject(this._storedError);\n                        for (const requestCapability1 of this._requests){\n                            requestCapability1.reject(this._storedError);\n                        }\n                        this._requests.length = 0;\n                        this._cachedChunks.length = 0;\n                    }\n                    _onProgress(evt1) {\n                        this.onProgress?.({\n                            loaded: evt1.loaded,\n                            total: evt1.lengthComputable ? evt1.total : this._contentLength\n                        });\n                    }\n                    get filename() {\n                        return this._filename;\n                    }\n                    get isRangeSupported() {\n                        return this._isRangeSupported;\n                    }\n                    get isStreamingSupported() {\n                        return this._isStreamingSupported;\n                    }\n                    get contentLength() {\n                        return this._contentLength;\n                    }\n                    get headersReady() {\n                        return this._headersReceivedCapability.promise;\n                    }\n                    async read() {\n                        if (this._storedError) {\n                            throw this._storedError;\n                        }\n                        if (this._cachedChunks.length > 0) {\n                            const chunk3 = this._cachedChunks.shift();\n                            return {\n                                value: chunk3,\n                                done: false\n                            };\n                        }\n                        if (this._done) {\n                            return {\n                                value: undefined,\n                                done: true\n                            };\n                        }\n                        const requestCapability1 = new _util1.PromiseCapability();\n                        this._requests.push(requestCapability1);\n                        return requestCapability1.promise;\n                    }\n                    cancel(reason1) {\n                        this._done = true;\n                        this._headersReceivedCapability.reject(reason1);\n                        for (const requestCapability1 of this._requests){\n                            requestCapability1.resolve({\n                                value: undefined,\n                                done: true\n                            });\n                        }\n                        this._requests.length = 0;\n                        if (this._manager.isPendingRequest(this._fullRequestId)) {\n                            this._manager.abortRequest(this._fullRequestId);\n                        }\n                        this._fullRequestReader = null;\n                    }\n                }\n                class PDFNetworkStreamRangeRequestReader1 {\n                    constructor(manager1, begin1, end1){\n                        this._manager = manager1;\n                        const args1 = {\n                            onDone: this._onDone.bind(this),\n                            onError: this._onError.bind(this),\n                            onProgress: this._onProgress.bind(this)\n                        };\n                        this._url = manager1.url;\n                        this._requestId = manager1.requestRange(begin1, end1, args1);\n                        this._requests = [];\n                        this._queuedChunk = null;\n                        this._done = false;\n                        this._storedError = undefined;\n                        this.onProgress = null;\n                        this.onClosed = null;\n                    }\n                    _close() {\n                        this.onClosed?.(this);\n                    }\n                    _onDone(data1) {\n                        const chunk3 = data1.chunk;\n                        if (this._requests.length > 0) {\n                            const requestCapability1 = this._requests.shift();\n                            requestCapability1.resolve({\n                                value: chunk3,\n                                done: false\n                            });\n                        } else {\n                            this._queuedChunk = chunk3;\n                        }\n                        this._done = true;\n                        for (const requestCapability1 of this._requests){\n                            requestCapability1.resolve({\n                                value: undefined,\n                                done: true\n                            });\n                        }\n                        this._requests.length = 0;\n                        this._close();\n                    }\n                    _onError(status1) {\n                        this._storedError = (0, _network_utils1.createResponseStatusError)(status1, this._url);\n                        for (const requestCapability1 of this._requests){\n                            requestCapability1.reject(this._storedError);\n                        }\n                        this._requests.length = 0;\n                        this._queuedChunk = null;\n                    }\n                    _onProgress(evt1) {\n                        if (!this.isStreamingSupported) {\n                            this.onProgress?.({\n                                loaded: evt1.loaded\n                            });\n                        }\n                    }\n                    get isStreamingSupported() {\n                        return false;\n                    }\n                    async read() {\n                        if (this._storedError) {\n                            throw this._storedError;\n                        }\n                        if (this._queuedChunk !== null) {\n                            const chunk3 = this._queuedChunk;\n                            this._queuedChunk = null;\n                            return {\n                                value: chunk3,\n                                done: false\n                            };\n                        }\n                        if (this._done) {\n                            return {\n                                value: undefined,\n                                done: true\n                            };\n                        }\n                        const requestCapability1 = new _util1.PromiseCapability();\n                        this._requests.push(requestCapability1);\n                        return requestCapability1.promise;\n                    }\n                    cancel(reason1) {\n                        this._done = true;\n                        for (const requestCapability1 of this._requests){\n                            requestCapability1.resolve({\n                                value: undefined,\n                                done: true\n                            });\n                        }\n                        this._requests.length = 0;\n                        if (this._manager.isPendingRequest(this._requestId)) {\n                            this._manager.abortRequest(this._requestId);\n                        }\n                        this._close();\n                    }\n                }\n            /***/ },\n            /* 23 */ /***/ (__unused_webpack_module1, exports1, __w_pdfjs_require__1)=>{\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                exports1.PDFNodeStream = void 0;\n                var _util1 = __w_pdfjs_require__1(1);\n                var _network_utils1 = __w_pdfjs_require__1(20);\n                ;\n                const fileUriRegex1 = /^file:\\/\\/\\/[a-zA-Z]:\\//;\n                function parseUrl1(sourceUrl1) {\n                    const url1 = __webpack_require__(/*! url */ \"url\");\n                    const parsedUrl1 = url1.parse(sourceUrl1);\n                    if (parsedUrl1.protocol === \"file:\" || parsedUrl1.host) {\n                        return parsedUrl1;\n                    }\n                    if (/^[a-z]:[/\\\\]/i.test(sourceUrl1)) {\n                        return url1.parse(`file:///${sourceUrl1}`);\n                    }\n                    if (!parsedUrl1.host) {\n                        parsedUrl1.protocol = \"file:\";\n                    }\n                    return parsedUrl1;\n                }\n                class PDFNodeStream1 {\n                    constructor(source1){\n                        this.source = source1;\n                        this.url = parseUrl1(source1.url);\n                        this.isHttp = this.url.protocol === \"http:\" || this.url.protocol === \"https:\";\n                        this.isFsUrl = this.url.protocol === \"file:\";\n                        this.httpHeaders = this.isHttp && source1.httpHeaders || {};\n                        this._fullRequestReader = null;\n                        this._rangeRequestReaders = [];\n                    }\n                    get _progressiveDataLength() {\n                        return this._fullRequestReader?._loaded ?? 0;\n                    }\n                    getFullReader() {\n                        (0, _util1.assert)(!this._fullRequestReader, \"PDFNodeStream.getFullReader can only be called once.\");\n                        this._fullRequestReader = this.isFsUrl ? new PDFNodeStreamFsFullReader1(this) : new PDFNodeStreamFullReader1(this);\n                        return this._fullRequestReader;\n                    }\n                    getRangeReader(start1, end1) {\n                        if (end1 <= this._progressiveDataLength) {\n                            return null;\n                        }\n                        const rangeReader1 = this.isFsUrl ? new PDFNodeStreamFsRangeReader1(this, start1, end1) : new PDFNodeStreamRangeReader1(this, start1, end1);\n                        this._rangeRequestReaders.push(rangeReader1);\n                        return rangeReader1;\n                    }\n                    cancelAllRequests(reason1) {\n                        this._fullRequestReader?.cancel(reason1);\n                        for (const reader1 of this._rangeRequestReaders.slice(0)){\n                            reader1.cancel(reason1);\n                        }\n                    }\n                }\n                exports1.PDFNodeStream = PDFNodeStream1;\n                class BaseFullReader1 {\n                    constructor(stream1){\n                        this._url = stream1.url;\n                        this._done = false;\n                        this._storedError = null;\n                        this.onProgress = null;\n                        const source1 = stream1.source;\n                        this._contentLength = source1.length;\n                        this._loaded = 0;\n                        this._filename = null;\n                        this._disableRange = source1.disableRange || false;\n                        this._rangeChunkSize = source1.rangeChunkSize;\n                        if (!this._rangeChunkSize && !this._disableRange) {\n                            this._disableRange = true;\n                        }\n                        this._isStreamingSupported = !source1.disableStream;\n                        this._isRangeSupported = !source1.disableRange;\n                        this._readableStream = null;\n                        this._readCapability = new _util1.PromiseCapability();\n                        this._headersCapability = new _util1.PromiseCapability();\n                    }\n                    get headersReady() {\n                        return this._headersCapability.promise;\n                    }\n                    get filename() {\n                        return this._filename;\n                    }\n                    get contentLength() {\n                        return this._contentLength;\n                    }\n                    get isRangeSupported() {\n                        return this._isRangeSupported;\n                    }\n                    get isStreamingSupported() {\n                        return this._isStreamingSupported;\n                    }\n                    async read() {\n                        await this._readCapability.promise;\n                        if (this._done) {\n                            return {\n                                value: undefined,\n                                done: true\n                            };\n                        }\n                        if (this._storedError) {\n                            throw this._storedError;\n                        }\n                        const chunk3 = this._readableStream.read();\n                        if (chunk3 === null) {\n                            this._readCapability = new _util1.PromiseCapability();\n                            return this.read();\n                        }\n                        this._loaded += chunk3.length;\n                        this.onProgress?.({\n                            loaded: this._loaded,\n                            total: this._contentLength\n                        });\n                        const buffer1 = new Uint8Array(chunk3).buffer;\n                        return {\n                            value: buffer1,\n                            done: false\n                        };\n                    }\n                    cancel(reason1) {\n                        if (!this._readableStream) {\n                            this._error(reason1);\n                            return;\n                        }\n                        this._readableStream.destroy(reason1);\n                    }\n                    _error(reason1) {\n                        this._storedError = reason1;\n                        this._readCapability.resolve();\n                    }\n                    _setReadableStream(readableStream1) {\n                        this._readableStream = readableStream1;\n                        readableStream1.on(\"readable\", ()=>{\n                            this._readCapability.resolve();\n                        });\n                        readableStream1.on(\"end\", ()=>{\n                            readableStream1.destroy();\n                            this._done = true;\n                            this._readCapability.resolve();\n                        });\n                        readableStream1.on(\"error\", (reason1)=>{\n                            this._error(reason1);\n                        });\n                        if (!this._isStreamingSupported && this._isRangeSupported) {\n                            this._error(new _util1.AbortException(\"streaming is disabled\"));\n                        }\n                        if (this._storedError) {\n                            this._readableStream.destroy(this._storedError);\n                        }\n                    }\n                }\n                class BaseRangeReader1 {\n                    constructor(stream1){\n                        this._url = stream1.url;\n                        this._done = false;\n                        this._storedError = null;\n                        this.onProgress = null;\n                        this._loaded = 0;\n                        this._readableStream = null;\n                        this._readCapability = new _util1.PromiseCapability();\n                        const source1 = stream1.source;\n                        this._isStreamingSupported = !source1.disableStream;\n                    }\n                    get isStreamingSupported() {\n                        return this._isStreamingSupported;\n                    }\n                    async read() {\n                        await this._readCapability.promise;\n                        if (this._done) {\n                            return {\n                                value: undefined,\n                                done: true\n                            };\n                        }\n                        if (this._storedError) {\n                            throw this._storedError;\n                        }\n                        const chunk3 = this._readableStream.read();\n                        if (chunk3 === null) {\n                            this._readCapability = new _util1.PromiseCapability();\n                            return this.read();\n                        }\n                        this._loaded += chunk3.length;\n                        this.onProgress?.({\n                            loaded: this._loaded\n                        });\n                        const buffer1 = new Uint8Array(chunk3).buffer;\n                        return {\n                            value: buffer1,\n                            done: false\n                        };\n                    }\n                    cancel(reason1) {\n                        if (!this._readableStream) {\n                            this._error(reason1);\n                            return;\n                        }\n                        this._readableStream.destroy(reason1);\n                    }\n                    _error(reason1) {\n                        this._storedError = reason1;\n                        this._readCapability.resolve();\n                    }\n                    _setReadableStream(readableStream1) {\n                        this._readableStream = readableStream1;\n                        readableStream1.on(\"readable\", ()=>{\n                            this._readCapability.resolve();\n                        });\n                        readableStream1.on(\"end\", ()=>{\n                            readableStream1.destroy();\n                            this._done = true;\n                            this._readCapability.resolve();\n                        });\n                        readableStream1.on(\"error\", (reason1)=>{\n                            this._error(reason1);\n                        });\n                        if (this._storedError) {\n                            this._readableStream.destroy(this._storedError);\n                        }\n                    }\n                }\n                function createRequestOptions1(parsedUrl1, headers1) {\n                    return {\n                        protocol: parsedUrl1.protocol,\n                        auth: parsedUrl1.auth,\n                        host: parsedUrl1.hostname,\n                        port: parsedUrl1.port,\n                        path: parsedUrl1.path,\n                        method: \"GET\",\n                        headers: headers1\n                    };\n                }\n                class PDFNodeStreamFullReader1 extends BaseFullReader1 {\n                    constructor(stream1){\n                        super(stream1);\n                        const handleResponse1 = (response1)=>{\n                            if (response1.statusCode === 404) {\n                                const error1 = new _util1.MissingPDFException(`Missing PDF \"${this._url}\".`);\n                                this._storedError = error1;\n                                this._headersCapability.reject(error1);\n                                return;\n                            }\n                            this._headersCapability.resolve();\n                            this._setReadableStream(response1);\n                            const getResponseHeader1 = (name1)=>{\n                                return this._readableStream.headers[name1.toLowerCase()];\n                            };\n                            const { allowRangeRequests: allowRangeRequests1, suggestedLength: suggestedLength1 } = (0, _network_utils1.validateRangeRequestCapabilities)({\n                                getResponseHeader: getResponseHeader1,\n                                isHttp: stream1.isHttp,\n                                rangeChunkSize: this._rangeChunkSize,\n                                disableRange: this._disableRange\n                            });\n                            this._isRangeSupported = allowRangeRequests1;\n                            this._contentLength = suggestedLength1 || this._contentLength;\n                            this._filename = (0, _network_utils1.extractFilenameFromHeader)(getResponseHeader1);\n                        };\n                        this._request = null;\n                        if (this._url.protocol === \"http:\") {\n                            const http1 = __webpack_require__(/*! http */ \"http\");\n                            this._request = http1.request(createRequestOptions1(this._url, stream1.httpHeaders), handleResponse1);\n                        } else {\n                            const https1 = __webpack_require__(/*! https */ \"https\");\n                            this._request = https1.request(createRequestOptions1(this._url, stream1.httpHeaders), handleResponse1);\n                        }\n                        this._request.on(\"error\", (reason1)=>{\n                            this._storedError = reason1;\n                            this._headersCapability.reject(reason1);\n                        });\n                        this._request.end();\n                    }\n                }\n                class PDFNodeStreamRangeReader1 extends BaseRangeReader1 {\n                    constructor(stream1, start1, end1){\n                        super(stream1);\n                        this._httpHeaders = {};\n                        for(const property1 in stream1.httpHeaders){\n                            const value1 = stream1.httpHeaders[property1];\n                            if (value1 === undefined) {\n                                continue;\n                            }\n                            this._httpHeaders[property1] = value1;\n                        }\n                        this._httpHeaders.Range = `bytes=${start1}-${end1 - 1}`;\n                        const handleResponse1 = (response1)=>{\n                            if (response1.statusCode === 404) {\n                                const error1 = new _util1.MissingPDFException(`Missing PDF \"${this._url}\".`);\n                                this._storedError = error1;\n                                return;\n                            }\n                            this._setReadableStream(response1);\n                        };\n                        this._request = null;\n                        if (this._url.protocol === \"http:\") {\n                            const http1 = __webpack_require__(/*! http */ \"http\");\n                            this._request = http1.request(createRequestOptions1(this._url, this._httpHeaders), handleResponse1);\n                        } else {\n                            const https1 = __webpack_require__(/*! https */ \"https\");\n                            this._request = https1.request(createRequestOptions1(this._url, this._httpHeaders), handleResponse1);\n                        }\n                        this._request.on(\"error\", (reason1)=>{\n                            this._storedError = reason1;\n                        });\n                        this._request.end();\n                    }\n                }\n                class PDFNodeStreamFsFullReader1 extends BaseFullReader1 {\n                    constructor(stream1){\n                        super(stream1);\n                        let path1 = decodeURIComponent(this._url.path);\n                        if (fileUriRegex1.test(this._url.href)) {\n                            path1 = path1.replace(/^\\//, \"\");\n                        }\n                        const fs1 = __webpack_require__(/*! fs */ \"fs\");\n                        fs1.lstat(path1, (error1, stat1)=>{\n                            if (error1) {\n                                if (error1.code === \"ENOENT\") {\n                                    error1 = new _util1.MissingPDFException(`Missing PDF \"${path1}\".`);\n                                }\n                                this._storedError = error1;\n                                this._headersCapability.reject(error1);\n                                return;\n                            }\n                            this._contentLength = stat1.size;\n                            this._setReadableStream(fs1.createReadStream(path1));\n                            this._headersCapability.resolve();\n                        });\n                    }\n                }\n                class PDFNodeStreamFsRangeReader1 extends BaseRangeReader1 {\n                    constructor(stream1, start1, end1){\n                        super(stream1);\n                        let path1 = decodeURIComponent(this._url.path);\n                        if (fileUriRegex1.test(this._url.href)) {\n                            path1 = path1.replace(/^\\//, \"\");\n                        }\n                        const fs1 = __webpack_require__(/*! fs */ \"fs\");\n                        this._setReadableStream(fs1.createReadStream(path1, {\n                            start: start1,\n                            end: end1 - 1\n                        }));\n                    }\n                }\n            /***/ },\n            /* 24 */ /***/ (__unused_webpack_module1, exports1, __w_pdfjs_require__1)=>{\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                exports1.SVGGraphics = void 0;\n                var _display_utils1 = __w_pdfjs_require__1(6);\n                var _util1 = __w_pdfjs_require__1(1);\n                ;\n                const SVG_DEFAULTS1 = {\n                    fontStyle: \"normal\",\n                    fontWeight: \"normal\",\n                    fillColor: \"#000000\"\n                };\n                const XML_NS1 = \"http://www.w3.org/XML/1998/namespace\";\n                const XLINK_NS1 = \"http://www.w3.org/1999/xlink\";\n                const LINE_CAP_STYLES1 = [\n                    \"butt\",\n                    \"round\",\n                    \"square\"\n                ];\n                const LINE_JOIN_STYLES1 = [\n                    \"miter\",\n                    \"round\",\n                    \"bevel\"\n                ];\n                const createObjectURL1 = function(data1, contentType1 = \"\", forceDataSchema1 = false) {\n                    if (URL.createObjectURL && typeof Blob !== \"undefined\" && !forceDataSchema1) {\n                        return URL.createObjectURL(new Blob([\n                            data1\n                        ], {\n                            type: contentType1\n                        }));\n                    }\n                    const digits1 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n                    let buffer1 = `data:${contentType1};base64,`;\n                    for(let i1 = 0, ii1 = data1.length; i1 < ii1; i1 += 3){\n                        const b11 = data1[i1] & 0xff;\n                        const b21 = data1[i1 + 1] & 0xff;\n                        const b31 = data1[i1 + 2] & 0xff;\n                        const d11 = b11 >> 2, d21 = (b11 & 3) << 4 | b21 >> 4;\n                        const d31 = i1 + 1 < ii1 ? (b21 & 0xf) << 2 | b31 >> 6 : 64;\n                        const d41 = i1 + 2 < ii1 ? b31 & 0x3f : 64;\n                        buffer1 += digits1[d11] + digits1[d21] + digits1[d31] + digits1[d41];\n                    }\n                    return buffer1;\n                };\n                const convertImgDataToPng1 = function() {\n                    const PNG_HEADER1 = new Uint8Array([\n                        0x89,\n                        0x50,\n                        0x4e,\n                        0x47,\n                        0x0d,\n                        0x0a,\n                        0x1a,\n                        0x0a\n                    ]);\n                    const CHUNK_WRAPPER_SIZE1 = 12;\n                    const crcTable1 = new Int32Array(256);\n                    for(let i1 = 0; i1 < 256; i1++){\n                        let c4 = i1;\n                        for(let h3 = 0; h3 < 8; h3++){\n                            c4 = c4 & 1 ? 0xedb88320 ^ c4 >> 1 & 0x7fffffff : c4 >> 1 & 0x7fffffff;\n                        }\n                        crcTable1[i1] = c4;\n                    }\n                    function crc321(data1, start1, end1) {\n                        let crc1 = -1;\n                        for(let i1 = start1; i1 < end1; i1++){\n                            const a1 = (crc1 ^ data1[i1]) & 0xff;\n                            const b4 = crcTable1[a1];\n                            crc1 = crc1 >>> 8 ^ b4;\n                        }\n                        return crc1 ^ -1;\n                    }\n                    function writePngChunk1(type1, body1, data1, offset1) {\n                        let p5 = offset1;\n                        const len1 = body1.length;\n                        data1[p5] = len1 >> 24 & 0xff;\n                        data1[p5 + 1] = len1 >> 16 & 0xff;\n                        data1[p5 + 2] = len1 >> 8 & 0xff;\n                        data1[p5 + 3] = len1 & 0xff;\n                        p5 += 4;\n                        data1[p5] = type1.charCodeAt(0) & 0xff;\n                        data1[p5 + 1] = type1.charCodeAt(1) & 0xff;\n                        data1[p5 + 2] = type1.charCodeAt(2) & 0xff;\n                        data1[p5 + 3] = type1.charCodeAt(3) & 0xff;\n                        p5 += 4;\n                        data1.set(body1, p5);\n                        p5 += body1.length;\n                        const crc1 = crc321(data1, offset1 + 4, p5);\n                        data1[p5] = crc1 >> 24 & 0xff;\n                        data1[p5 + 1] = crc1 >> 16 & 0xff;\n                        data1[p5 + 2] = crc1 >> 8 & 0xff;\n                        data1[p5 + 3] = crc1 & 0xff;\n                    }\n                    function adler321(data1, start1, end1) {\n                        let a1 = 1;\n                        let b4 = 0;\n                        for(let i1 = start1; i1 < end1; ++i1){\n                            a1 = (a1 + (data1[i1] & 0xff)) % 65521;\n                            b4 = (b4 + a1) % 65521;\n                        }\n                        return b4 << 16 | a1;\n                    }\n                    function deflateSync1(literals1) {\n                        if (!_util1.isNodeJS) {\n                            return deflateSyncUncompressed1(literals1);\n                        }\n                        try {\n                            const input1 = parseInt(process.versions.node) >= 8 ? literals1 : Buffer.from(literals1);\n                            const output1 = (__webpack_require__(/*! zlib */ \"zlib\").deflateSync)(input1, {\n                                level: 9\n                            });\n                            return output1 instanceof Uint8Array ? output1 : new Uint8Array(output1);\n                        } catch (e1) {\n                            (0, _util1.warn)(\"Not compressing PNG because zlib.deflateSync is unavailable: \" + e1);\n                        }\n                        return deflateSyncUncompressed1(literals1);\n                    }\n                    function deflateSyncUncompressed1(literals1) {\n                        let len1 = literals1.length;\n                        const maxBlockLength1 = 0xffff;\n                        const deflateBlocks1 = Math.ceil(len1 / maxBlockLength1);\n                        const idat1 = new Uint8Array(2 + len1 + deflateBlocks1 * 5 + 4);\n                        let pi1 = 0;\n                        idat1[pi1++] = 0x78;\n                        idat1[pi1++] = 0x9c;\n                        let pos1 = 0;\n                        while(len1 > maxBlockLength1){\n                            idat1[pi1++] = 0x00;\n                            idat1[pi1++] = 0xff;\n                            idat1[pi1++] = 0xff;\n                            idat1[pi1++] = 0x00;\n                            idat1[pi1++] = 0x00;\n                            idat1.set(literals1.subarray(pos1, pos1 + maxBlockLength1), pi1);\n                            pi1 += maxBlockLength1;\n                            pos1 += maxBlockLength1;\n                            len1 -= maxBlockLength1;\n                        }\n                        idat1[pi1++] = 0x01;\n                        idat1[pi1++] = len1 & 0xff;\n                        idat1[pi1++] = len1 >> 8 & 0xff;\n                        idat1[pi1++] = ~len1 & 0xffff & 0xff;\n                        idat1[pi1++] = (~len1 & 0xffff) >> 8 & 0xff;\n                        idat1.set(literals1.subarray(pos1), pi1);\n                        pi1 += literals1.length - pos1;\n                        const adler1 = adler321(literals1, 0, literals1.length);\n                        idat1[pi1++] = adler1 >> 24 & 0xff;\n                        idat1[pi1++] = adler1 >> 16 & 0xff;\n                        idat1[pi1++] = adler1 >> 8 & 0xff;\n                        idat1[pi1++] = adler1 & 0xff;\n                        return idat1;\n                    }\n                    function encode1(imgData1, kind1, forceDataSchema1, isMask1) {\n                        const width2 = imgData1.width;\n                        const height1 = imgData1.height;\n                        let bitDepth1, colorType1, lineSize1;\n                        const bytes1 = imgData1.data;\n                        switch(kind1){\n                            case _util1.ImageKind.GRAYSCALE_1BPP:\n                                colorType1 = 0;\n                                bitDepth1 = 1;\n                                lineSize1 = width2 + 7 >> 3;\n                                break;\n                            case _util1.ImageKind.RGB_24BPP:\n                                colorType1 = 2;\n                                bitDepth1 = 8;\n                                lineSize1 = width2 * 3;\n                                break;\n                            case _util1.ImageKind.RGBA_32BPP:\n                                colorType1 = 6;\n                                bitDepth1 = 8;\n                                lineSize1 = width2 * 4;\n                                break;\n                            default:\n                                throw new Error(\"invalid format\");\n                        }\n                        const literals1 = new Uint8Array((1 + lineSize1) * height1);\n                        let offsetLiterals1 = 0, offsetBytes1 = 0;\n                        for(let y4 = 0; y4 < height1; ++y4){\n                            literals1[offsetLiterals1++] = 0;\n                            literals1.set(bytes1.subarray(offsetBytes1, offsetBytes1 + lineSize1), offsetLiterals1);\n                            offsetBytes1 += lineSize1;\n                            offsetLiterals1 += lineSize1;\n                        }\n                        if (kind1 === _util1.ImageKind.GRAYSCALE_1BPP && isMask1) {\n                            offsetLiterals1 = 0;\n                            for(let y4 = 0; y4 < height1; y4++){\n                                offsetLiterals1++;\n                                for(let i1 = 0; i1 < lineSize1; i1++){\n                                    literals1[offsetLiterals1++] ^= 0xff;\n                                }\n                            }\n                        }\n                        const ihdr1 = new Uint8Array([\n                            width2 >> 24 & 0xff,\n                            width2 >> 16 & 0xff,\n                            width2 >> 8 & 0xff,\n                            width2 & 0xff,\n                            height1 >> 24 & 0xff,\n                            height1 >> 16 & 0xff,\n                            height1 >> 8 & 0xff,\n                            height1 & 0xff,\n                            bitDepth1,\n                            colorType1,\n                            0x00,\n                            0x00,\n                            0x00\n                        ]);\n                        const idat1 = deflateSync1(literals1);\n                        const pngLength1 = PNG_HEADER1.length + CHUNK_WRAPPER_SIZE1 * 3 + ihdr1.length + idat1.length;\n                        const data1 = new Uint8Array(pngLength1);\n                        let offset1 = 0;\n                        data1.set(PNG_HEADER1, offset1);\n                        offset1 += PNG_HEADER1.length;\n                        writePngChunk1(\"IHDR\", ihdr1, data1, offset1);\n                        offset1 += CHUNK_WRAPPER_SIZE1 + ihdr1.length;\n                        writePngChunk1(\"IDATA\", idat1, data1, offset1);\n                        offset1 += CHUNK_WRAPPER_SIZE1 + idat1.length;\n                        writePngChunk1(\"IEND\", new Uint8Array(0), data1, offset1);\n                        return createObjectURL1(data1, \"image/png\", forceDataSchema1);\n                    }\n                    return function convertImgDataToPng1(imgData1, forceDataSchema1, isMask1) {\n                        const kind1 = imgData1.kind === undefined ? _util1.ImageKind.GRAYSCALE_1BPP : imgData1.kind;\n                        return encode1(imgData1, kind1, forceDataSchema1, isMask1);\n                    };\n                }();\n                class SVGExtraState1 {\n                    constructor(){\n                        this.fontSizeScale = 1;\n                        this.fontWeight = SVG_DEFAULTS1.fontWeight;\n                        this.fontSize = 0;\n                        this.textMatrix = _util1.IDENTITY_MATRIX;\n                        this.fontMatrix = _util1.FONT_IDENTITY_MATRIX;\n                        this.leading = 0;\n                        this.textRenderingMode = _util1.TextRenderingMode.FILL;\n                        this.textMatrixScale = 1;\n                        this.x = 0;\n                        this.y = 0;\n                        this.lineX = 0;\n                        this.lineY = 0;\n                        this.charSpacing = 0;\n                        this.wordSpacing = 0;\n                        this.textHScale = 1;\n                        this.textRise = 0;\n                        this.fillColor = SVG_DEFAULTS1.fillColor;\n                        this.strokeColor = \"#000000\";\n                        this.fillAlpha = 1;\n                        this.strokeAlpha = 1;\n                        this.lineWidth = 1;\n                        this.lineJoin = \"\";\n                        this.lineCap = \"\";\n                        this.miterLimit = 0;\n                        this.dashArray = [];\n                        this.dashPhase = 0;\n                        this.dependencies = [];\n                        this.activeClipUrl = null;\n                        this.clipGroup = null;\n                        this.maskId = \"\";\n                    }\n                    clone() {\n                        return Object.create(this);\n                    }\n                    setCurrentPoint(x4, y4) {\n                        this.x = x4;\n                        this.y = y4;\n                    }\n                }\n                function opListToTree1(opList1) {\n                    let opTree1 = [];\n                    const tmp1 = [];\n                    for (const opListElement1 of opList1){\n                        if (opListElement1.fn === \"save\") {\n                            opTree1.push({\n                                fnId: 92,\n                                fn: \"group\",\n                                items: []\n                            });\n                            tmp1.push(opTree1);\n                            opTree1 = opTree1.at(-1).items;\n                            continue;\n                        }\n                        if (opListElement1.fn === \"restore\") {\n                            opTree1 = tmp1.pop();\n                        } else {\n                            opTree1.push(opListElement1);\n                        }\n                    }\n                    return opTree1;\n                }\n                function pf1(value1) {\n                    if (Number.isInteger(value1)) {\n                        return value1.toString();\n                    }\n                    const s4 = value1.toFixed(10);\n                    let i1 = s4.length - 1;\n                    if (s4[i1] !== \"0\") {\n                        return s4;\n                    }\n                    do {\n                        i1--;\n                    }while (s4[i1] === \"0\");\n                    return s4.substring(0, s4[i1] === \".\" ? i1 : i1 + 1);\n                }\n                function pm1(m3) {\n                    if (m3[4] === 0 && m3[5] === 0) {\n                        if (m3[1] === 0 && m3[2] === 0) {\n                            if (m3[0] === 1 && m3[3] === 1) {\n                                return \"\";\n                            }\n                            return `scale(${pf1(m3[0])} ${pf1(m3[3])})`;\n                        }\n                        if (m3[0] === m3[3] && m3[1] === -m3[2]) {\n                            const a1 = Math.acos(m3[0]) * 180 / Math.PI;\n                            return `rotate(${pf1(a1)})`;\n                        }\n                    } else if (m3[0] === 1 && m3[1] === 0 && m3[2] === 0 && m3[3] === 1) {\n                        return `translate(${pf1(m3[4])} ${pf1(m3[5])})`;\n                    }\n                    return `matrix(${pf1(m3[0])} ${pf1(m3[1])} ${pf1(m3[2])} ${pf1(m3[3])} ${pf1(m3[4])} ` + `${pf1(m3[5])})`;\n                }\n                let clipCount1 = 0;\n                let maskCount1 = 0;\n                let shadingCount1 = 0;\n                class SVGGraphics1 {\n                    constructor(commonObjs1, objs1, forceDataSchema1 = false){\n                        (0, _display_utils1.deprecated)(\"The SVG back-end is no longer maintained and *may* be removed in the future.\");\n                        this.svgFactory = new _display_utils1.DOMSVGFactory();\n                        this.current = new SVGExtraState1();\n                        this.transformMatrix = _util1.IDENTITY_MATRIX;\n                        this.transformStack = [];\n                        this.extraStack = [];\n                        this.commonObjs = commonObjs1;\n                        this.objs = objs1;\n                        this.pendingClip = null;\n                        this.pendingEOFill = false;\n                        this.embedFonts = false;\n                        this.embeddedFonts = Object.create(null);\n                        this.cssStyle = null;\n                        this.forceDataSchema = !!forceDataSchema1;\n                        this._operatorIdMapping = [];\n                        for(const op1 in _util1.OPS){\n                            this._operatorIdMapping[_util1.OPS[op1]] = op1;\n                        }\n                    }\n                    getObject(data1, fallback1 = null) {\n                        if (typeof data1 === \"string\") {\n                            return data1.startsWith(\"g_\") ? this.commonObjs.get(data1) : this.objs.get(data1);\n                        }\n                        return fallback1;\n                    }\n                    save() {\n                        this.transformStack.push(this.transformMatrix);\n                        const old1 = this.current;\n                        this.extraStack.push(old1);\n                        this.current = old1.clone();\n                    }\n                    restore() {\n                        this.transformMatrix = this.transformStack.pop();\n                        this.current = this.extraStack.pop();\n                        this.pendingClip = null;\n                        this.tgrp = null;\n                    }\n                    group(items1) {\n                        this.save();\n                        this.executeOpTree(items1);\n                        this.restore();\n                    }\n                    loadDependencies(operatorList1) {\n                        const fnArray1 = operatorList1.fnArray;\n                        const argsArray1 = operatorList1.argsArray;\n                        for(let i1 = 0, ii1 = fnArray1.length; i1 < ii1; i1++){\n                            if (fnArray1[i1] !== _util1.OPS.dependency) {\n                                continue;\n                            }\n                            for (const obj1 of argsArray1[i1]){\n                                const objsPool1 = obj1.startsWith(\"g_\") ? this.commonObjs : this.objs;\n                                const promise1 = new Promise((resolve1)=>{\n                                    objsPool1.get(obj1, resolve1);\n                                });\n                                this.current.dependencies.push(promise1);\n                            }\n                        }\n                        return Promise.all(this.current.dependencies);\n                    }\n                    transform(a1, b4, c4, d5, e1, f1) {\n                        const transformMatrix1 = [\n                            a1,\n                            b4,\n                            c4,\n                            d5,\n                            e1,\n                            f1\n                        ];\n                        this.transformMatrix = _util1.Util.transform(this.transformMatrix, transformMatrix1);\n                        this.tgrp = null;\n                    }\n                    getSVG(operatorList1, viewport1) {\n                        this.viewport = viewport1;\n                        const svgElement1 = this._initialize(viewport1);\n                        return this.loadDependencies(operatorList1).then(()=>{\n                            this.transformMatrix = _util1.IDENTITY_MATRIX;\n                            this.executeOpTree(this.convertOpList(operatorList1));\n                            return svgElement1;\n                        });\n                    }\n                    convertOpList(operatorList1) {\n                        const operatorIdMapping1 = this._operatorIdMapping;\n                        const argsArray1 = operatorList1.argsArray;\n                        const fnArray1 = operatorList1.fnArray;\n                        const opList1 = [];\n                        for(let i1 = 0, ii1 = fnArray1.length; i1 < ii1; i1++){\n                            const fnId1 = fnArray1[i1];\n                            opList1.push({\n                                fnId: fnId1,\n                                fn: operatorIdMapping1[fnId1],\n                                args: argsArray1[i1]\n                            });\n                        }\n                        return opListToTree1(opList1);\n                    }\n                    executeOpTree(opTree1) {\n                        for (const opTreeElement1 of opTree1){\n                            const fn1 = opTreeElement1.fn;\n                            const fnId1 = opTreeElement1.fnId;\n                            const args1 = opTreeElement1.args;\n                            switch(fnId1 | 0){\n                                case _util1.OPS.beginText:\n                                    this.beginText();\n                                    break;\n                                case _util1.OPS.dependency:\n                                    break;\n                                case _util1.OPS.setLeading:\n                                    this.setLeading(args1);\n                                    break;\n                                case _util1.OPS.setLeadingMoveText:\n                                    this.setLeadingMoveText(args1[0], args1[1]);\n                                    break;\n                                case _util1.OPS.setFont:\n                                    this.setFont(args1);\n                                    break;\n                                case _util1.OPS.showText:\n                                    this.showText(args1[0]);\n                                    break;\n                                case _util1.OPS.showSpacedText:\n                                    this.showText(args1[0]);\n                                    break;\n                                case _util1.OPS.endText:\n                                    this.endText();\n                                    break;\n                                case _util1.OPS.moveText:\n                                    this.moveText(args1[0], args1[1]);\n                                    break;\n                                case _util1.OPS.setCharSpacing:\n                                    this.setCharSpacing(args1[0]);\n                                    break;\n                                case _util1.OPS.setWordSpacing:\n                                    this.setWordSpacing(args1[0]);\n                                    break;\n                                case _util1.OPS.setHScale:\n                                    this.setHScale(args1[0]);\n                                    break;\n                                case _util1.OPS.setTextMatrix:\n                                    this.setTextMatrix(args1[0], args1[1], args1[2], args1[3], args1[4], args1[5]);\n                                    break;\n                                case _util1.OPS.setTextRise:\n                                    this.setTextRise(args1[0]);\n                                    break;\n                                case _util1.OPS.setTextRenderingMode:\n                                    this.setTextRenderingMode(args1[0]);\n                                    break;\n                                case _util1.OPS.setLineWidth:\n                                    this.setLineWidth(args1[0]);\n                                    break;\n                                case _util1.OPS.setLineJoin:\n                                    this.setLineJoin(args1[0]);\n                                    break;\n                                case _util1.OPS.setLineCap:\n                                    this.setLineCap(args1[0]);\n                                    break;\n                                case _util1.OPS.setMiterLimit:\n                                    this.setMiterLimit(args1[0]);\n                                    break;\n                                case _util1.OPS.setFillRGBColor:\n                                    this.setFillRGBColor(args1[0], args1[1], args1[2]);\n                                    break;\n                                case _util1.OPS.setStrokeRGBColor:\n                                    this.setStrokeRGBColor(args1[0], args1[1], args1[2]);\n                                    break;\n                                case _util1.OPS.setStrokeColorN:\n                                    this.setStrokeColorN(args1);\n                                    break;\n                                case _util1.OPS.setFillColorN:\n                                    this.setFillColorN(args1);\n                                    break;\n                                case _util1.OPS.shadingFill:\n                                    this.shadingFill(args1[0]);\n                                    break;\n                                case _util1.OPS.setDash:\n                                    this.setDash(args1[0], args1[1]);\n                                    break;\n                                case _util1.OPS.setRenderingIntent:\n                                    this.setRenderingIntent(args1[0]);\n                                    break;\n                                case _util1.OPS.setFlatness:\n                                    this.setFlatness(args1[0]);\n                                    break;\n                                case _util1.OPS.setGState:\n                                    this.setGState(args1[0]);\n                                    break;\n                                case _util1.OPS.fill:\n                                    this.fill();\n                                    break;\n                                case _util1.OPS.eoFill:\n                                    this.eoFill();\n                                    break;\n                                case _util1.OPS.stroke:\n                                    this.stroke();\n                                    break;\n                                case _util1.OPS.fillStroke:\n                                    this.fillStroke();\n                                    break;\n                                case _util1.OPS.eoFillStroke:\n                                    this.eoFillStroke();\n                                    break;\n                                case _util1.OPS.clip:\n                                    this.clip(\"nonzero\");\n                                    break;\n                                case _util1.OPS.eoClip:\n                                    this.clip(\"evenodd\");\n                                    break;\n                                case _util1.OPS.paintSolidColorImageMask:\n                                    this.paintSolidColorImageMask();\n                                    break;\n                                case _util1.OPS.paintImageXObject:\n                                    this.paintImageXObject(args1[0]);\n                                    break;\n                                case _util1.OPS.paintInlineImageXObject:\n                                    this.paintInlineImageXObject(args1[0]);\n                                    break;\n                                case _util1.OPS.paintImageMaskXObject:\n                                    this.paintImageMaskXObject(args1[0]);\n                                    break;\n                                case _util1.OPS.paintFormXObjectBegin:\n                                    this.paintFormXObjectBegin(args1[0], args1[1]);\n                                    break;\n                                case _util1.OPS.paintFormXObjectEnd:\n                                    this.paintFormXObjectEnd();\n                                    break;\n                                case _util1.OPS.closePath:\n                                    this.closePath();\n                                    break;\n                                case _util1.OPS.closeStroke:\n                                    this.closeStroke();\n                                    break;\n                                case _util1.OPS.closeFillStroke:\n                                    this.closeFillStroke();\n                                    break;\n                                case _util1.OPS.closeEOFillStroke:\n                                    this.closeEOFillStroke();\n                                    break;\n                                case _util1.OPS.nextLine:\n                                    this.nextLine();\n                                    break;\n                                case _util1.OPS.transform:\n                                    this.transform(args1[0], args1[1], args1[2], args1[3], args1[4], args1[5]);\n                                    break;\n                                case _util1.OPS.constructPath:\n                                    this.constructPath(args1[0], args1[1]);\n                                    break;\n                                case _util1.OPS.endPath:\n                                    this.endPath();\n                                    break;\n                                case 92:\n                                    this.group(opTreeElement1.items);\n                                    break;\n                                default:\n                                    (0, _util1.warn)(`Unimplemented operator ${fn1}`);\n                                    break;\n                            }\n                        }\n                    }\n                    setWordSpacing(wordSpacing1) {\n                        this.current.wordSpacing = wordSpacing1;\n                    }\n                    setCharSpacing(charSpacing1) {\n                        this.current.charSpacing = charSpacing1;\n                    }\n                    nextLine() {\n                        this.moveText(0, this.current.leading);\n                    }\n                    setTextMatrix(a1, b4, c4, d5, e1, f1) {\n                        const current1 = this.current;\n                        current1.textMatrix = current1.lineMatrix = [\n                            a1,\n                            b4,\n                            c4,\n                            d5,\n                            e1,\n                            f1\n                        ];\n                        current1.textMatrixScale = Math.hypot(a1, b4);\n                        current1.x = current1.lineX = 0;\n                        current1.y = current1.lineY = 0;\n                        current1.xcoords = [];\n                        current1.ycoords = [];\n                        current1.tspan = this.svgFactory.createElement(\"svg:tspan\");\n                        current1.tspan.setAttributeNS(null, \"font-family\", current1.fontFamily);\n                        current1.tspan.setAttributeNS(null, \"font-size\", `${pf1(current1.fontSize)}px`);\n                        current1.tspan.setAttributeNS(null, \"y\", pf1(-current1.y));\n                        current1.txtElement = this.svgFactory.createElement(\"svg:text\");\n                        current1.txtElement.append(current1.tspan);\n                    }\n                    beginText() {\n                        const current1 = this.current;\n                        current1.x = current1.lineX = 0;\n                        current1.y = current1.lineY = 0;\n                        current1.textMatrix = _util1.IDENTITY_MATRIX;\n                        current1.lineMatrix = _util1.IDENTITY_MATRIX;\n                        current1.textMatrixScale = 1;\n                        current1.tspan = this.svgFactory.createElement(\"svg:tspan\");\n                        current1.txtElement = this.svgFactory.createElement(\"svg:text\");\n                        current1.txtgrp = this.svgFactory.createElement(\"svg:g\");\n                        current1.xcoords = [];\n                        current1.ycoords = [];\n                    }\n                    moveText(x4, y4) {\n                        const current1 = this.current;\n                        current1.x = current1.lineX += x4;\n                        current1.y = current1.lineY += y4;\n                        current1.xcoords = [];\n                        current1.ycoords = [];\n                        current1.tspan = this.svgFactory.createElement(\"svg:tspan\");\n                        current1.tspan.setAttributeNS(null, \"font-family\", current1.fontFamily);\n                        current1.tspan.setAttributeNS(null, \"font-size\", `${pf1(current1.fontSize)}px`);\n                        current1.tspan.setAttributeNS(null, \"y\", pf1(-current1.y));\n                    }\n                    showText(glyphs1) {\n                        const current1 = this.current;\n                        const font1 = current1.font;\n                        const fontSize1 = current1.fontSize;\n                        if (fontSize1 === 0) {\n                            return;\n                        }\n                        const fontSizeScale1 = current1.fontSizeScale;\n                        const charSpacing1 = current1.charSpacing;\n                        const wordSpacing1 = current1.wordSpacing;\n                        const fontDirection1 = current1.fontDirection;\n                        const textHScale1 = current1.textHScale * fontDirection1;\n                        const vertical1 = font1.vertical;\n                        const spacingDir1 = vertical1 ? 1 : -1;\n                        const defaultVMetrics1 = font1.defaultVMetrics;\n                        const widthAdvanceScale1 = fontSize1 * current1.fontMatrix[0];\n                        let x4 = 0;\n                        for (const glyph1 of glyphs1){\n                            if (glyph1 === null) {\n                                x4 += fontDirection1 * wordSpacing1;\n                                continue;\n                            } else if (typeof glyph1 === \"number\") {\n                                x4 += spacingDir1 * glyph1 * fontSize1 / 1000;\n                                continue;\n                            }\n                            const spacing1 = (glyph1.isSpace ? wordSpacing1 : 0) + charSpacing1;\n                            const character1 = glyph1.fontChar;\n                            let scaledX1, scaledY1;\n                            let width2 = glyph1.width;\n                            if (vertical1) {\n                                let vx1;\n                                const vmetric1 = glyph1.vmetric || defaultVMetrics1;\n                                vx1 = glyph1.vmetric ? vmetric1[1] : width2 * 0.5;\n                                vx1 = -vx1 * widthAdvanceScale1;\n                                const vy1 = vmetric1[2] * widthAdvanceScale1;\n                                width2 = vmetric1 ? -vmetric1[0] : width2;\n                                scaledX1 = vx1 / fontSizeScale1;\n                                scaledY1 = (x4 + vy1) / fontSizeScale1;\n                            } else {\n                                scaledX1 = x4 / fontSizeScale1;\n                                scaledY1 = 0;\n                            }\n                            if (glyph1.isInFont || font1.missingFile) {\n                                current1.xcoords.push(current1.x + scaledX1);\n                                if (vertical1) {\n                                    current1.ycoords.push(-current1.y + scaledY1);\n                                }\n                                current1.tspan.textContent += character1;\n                            } else {}\n                            const charWidth1 = vertical1 ? width2 * widthAdvanceScale1 - spacing1 * fontDirection1 : width2 * widthAdvanceScale1 + spacing1 * fontDirection1;\n                            x4 += charWidth1;\n                        }\n                        current1.tspan.setAttributeNS(null, \"x\", current1.xcoords.map(pf1).join(\" \"));\n                        if (vertical1) {\n                            current1.tspan.setAttributeNS(null, \"y\", current1.ycoords.map(pf1).join(\" \"));\n                        } else {\n                            current1.tspan.setAttributeNS(null, \"y\", pf1(-current1.y));\n                        }\n                        if (vertical1) {\n                            current1.y -= x4;\n                        } else {\n                            current1.x += x4 * textHScale1;\n                        }\n                        current1.tspan.setAttributeNS(null, \"font-family\", current1.fontFamily);\n                        current1.tspan.setAttributeNS(null, \"font-size\", `${pf1(current1.fontSize)}px`);\n                        if (current1.fontStyle !== SVG_DEFAULTS1.fontStyle) {\n                            current1.tspan.setAttributeNS(null, \"font-style\", current1.fontStyle);\n                        }\n                        if (current1.fontWeight !== SVG_DEFAULTS1.fontWeight) {\n                            current1.tspan.setAttributeNS(null, \"font-weight\", current1.fontWeight);\n                        }\n                        const fillStrokeMode1 = current1.textRenderingMode & _util1.TextRenderingMode.FILL_STROKE_MASK;\n                        if (fillStrokeMode1 === _util1.TextRenderingMode.FILL || fillStrokeMode1 === _util1.TextRenderingMode.FILL_STROKE) {\n                            if (current1.fillColor !== SVG_DEFAULTS1.fillColor) {\n                                current1.tspan.setAttributeNS(null, \"fill\", current1.fillColor);\n                            }\n                            if (current1.fillAlpha < 1) {\n                                current1.tspan.setAttributeNS(null, \"fill-opacity\", current1.fillAlpha);\n                            }\n                        } else if (current1.textRenderingMode === _util1.TextRenderingMode.ADD_TO_PATH) {\n                            current1.tspan.setAttributeNS(null, \"fill\", \"transparent\");\n                        } else {\n                            current1.tspan.setAttributeNS(null, \"fill\", \"none\");\n                        }\n                        if (fillStrokeMode1 === _util1.TextRenderingMode.STROKE || fillStrokeMode1 === _util1.TextRenderingMode.FILL_STROKE) {\n                            const lineWidthScale1 = 1 / (current1.textMatrixScale || 1);\n                            this._setStrokeAttributes(current1.tspan, lineWidthScale1);\n                        }\n                        let textMatrix1 = current1.textMatrix;\n                        if (current1.textRise !== 0) {\n                            textMatrix1 = textMatrix1.slice();\n                            textMatrix1[5] += current1.textRise;\n                        }\n                        current1.txtElement.setAttributeNS(null, \"transform\", `${pm1(textMatrix1)} scale(${pf1(textHScale1)}, -1)`);\n                        current1.txtElement.setAttributeNS(XML_NS1, \"xml:space\", \"preserve\");\n                        current1.txtElement.append(current1.tspan);\n                        current1.txtgrp.append(current1.txtElement);\n                        this._ensureTransformGroup().append(current1.txtElement);\n                    }\n                    setLeadingMoveText(x4, y4) {\n                        this.setLeading(-y4);\n                        this.moveText(x4, y4);\n                    }\n                    addFontStyle(fontObj1) {\n                        if (!fontObj1.data) {\n                            throw new Error(\"addFontStyle: No font data available, \" + 'ensure that the \"fontExtraProperties\" API parameter is set.');\n                        }\n                        if (!this.cssStyle) {\n                            this.cssStyle = this.svgFactory.createElement(\"svg:style\");\n                            this.cssStyle.setAttributeNS(null, \"type\", \"text/css\");\n                            this.defs.append(this.cssStyle);\n                        }\n                        const url1 = createObjectURL1(fontObj1.data, fontObj1.mimetype, this.forceDataSchema);\n                        this.cssStyle.textContent += `@font-face { font-family: \"${fontObj1.loadedName}\";` + ` src: url(${url1}); }\\n`;\n                    }\n                    setFont(details1) {\n                        const current1 = this.current;\n                        const fontObj1 = this.commonObjs.get(details1[0]);\n                        let size1 = details1[1];\n                        current1.font = fontObj1;\n                        if (this.embedFonts && !fontObj1.missingFile && !this.embeddedFonts[fontObj1.loadedName]) {\n                            this.addFontStyle(fontObj1);\n                            this.embeddedFonts[fontObj1.loadedName] = fontObj1;\n                        }\n                        current1.fontMatrix = fontObj1.fontMatrix || _util1.FONT_IDENTITY_MATRIX;\n                        let bold1 = \"normal\";\n                        if (fontObj1.black) {\n                            bold1 = \"900\";\n                        } else if (fontObj1.bold) {\n                            bold1 = \"bold\";\n                        }\n                        const italic1 = fontObj1.italic ? \"italic\" : \"normal\";\n                        if (size1 < 0) {\n                            size1 = -size1;\n                            current1.fontDirection = -1;\n                        } else {\n                            current1.fontDirection = 1;\n                        }\n                        current1.fontSize = size1;\n                        current1.fontFamily = fontObj1.loadedName;\n                        current1.fontWeight = bold1;\n                        current1.fontStyle = italic1;\n                        current1.tspan = this.svgFactory.createElement(\"svg:tspan\");\n                        current1.tspan.setAttributeNS(null, \"y\", pf1(-current1.y));\n                        current1.xcoords = [];\n                        current1.ycoords = [];\n                    }\n                    endText() {\n                        const current1 = this.current;\n                        if (current1.textRenderingMode & _util1.TextRenderingMode.ADD_TO_PATH_FLAG && current1.txtElement?.hasChildNodes()) {\n                            current1.element = current1.txtElement;\n                            this.clip(\"nonzero\");\n                            this.endPath();\n                        }\n                    }\n                    setLineWidth(width2) {\n                        if (width2 > 0) {\n                            this.current.lineWidth = width2;\n                        }\n                    }\n                    setLineCap(style1) {\n                        this.current.lineCap = LINE_CAP_STYLES1[style1];\n                    }\n                    setLineJoin(style1) {\n                        this.current.lineJoin = LINE_JOIN_STYLES1[style1];\n                    }\n                    setMiterLimit(limit1) {\n                        this.current.miterLimit = limit1;\n                    }\n                    setStrokeAlpha(strokeAlpha1) {\n                        this.current.strokeAlpha = strokeAlpha1;\n                    }\n                    setStrokeRGBColor(r1, g1, b4) {\n                        this.current.strokeColor = _util1.Util.makeHexColor(r1, g1, b4);\n                    }\n                    setFillAlpha(fillAlpha1) {\n                        this.current.fillAlpha = fillAlpha1;\n                    }\n                    setFillRGBColor(r1, g1, b4) {\n                        this.current.fillColor = _util1.Util.makeHexColor(r1, g1, b4);\n                        this.current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n                        this.current.xcoords = [];\n                        this.current.ycoords = [];\n                    }\n                    setStrokeColorN(args1) {\n                        this.current.strokeColor = this._makeColorN_Pattern(args1);\n                    }\n                    setFillColorN(args1) {\n                        this.current.fillColor = this._makeColorN_Pattern(args1);\n                    }\n                    shadingFill(args1) {\n                        const { width: width2, height: height1 } = this.viewport;\n                        const inv1 = _util1.Util.inverseTransform(this.transformMatrix);\n                        const [x01, y01, x11, y11] = _util1.Util.getAxialAlignedBoundingBox([\n                            0,\n                            0,\n                            width2,\n                            height1\n                        ], inv1);\n                        const rect3 = this.svgFactory.createElement(\"svg:rect\");\n                        rect3.setAttributeNS(null, \"x\", x01);\n                        rect3.setAttributeNS(null, \"y\", y01);\n                        rect3.setAttributeNS(null, \"width\", x11 - x01);\n                        rect3.setAttributeNS(null, \"height\", y11 - y01);\n                        rect3.setAttributeNS(null, \"fill\", this._makeShadingPattern(args1));\n                        if (this.current.fillAlpha < 1) {\n                            rect3.setAttributeNS(null, \"fill-opacity\", this.current.fillAlpha);\n                        }\n                        this._ensureTransformGroup().append(rect3);\n                    }\n                    _makeColorN_Pattern(args1) {\n                        if (args1[0] === \"TilingPattern\") {\n                            return this._makeTilingPattern(args1);\n                        }\n                        return this._makeShadingPattern(args1);\n                    }\n                    _makeTilingPattern(args1) {\n                        const color1 = args1[1];\n                        const operatorList1 = args1[2];\n                        const matrix1 = args1[3] || _util1.IDENTITY_MATRIX;\n                        const [x01, y01, x11, y11] = args1[4];\n                        const xstep1 = args1[5];\n                        const ystep1 = args1[6];\n                        const paintType1 = args1[7];\n                        const tilingId1 = `shading${shadingCount1++}`;\n                        const [tx01, ty01, tx11, ty11] = _util1.Util.normalizeRect([\n                            ..._util1.Util.applyTransform([\n                                x01,\n                                y01\n                            ], matrix1),\n                            ..._util1.Util.applyTransform([\n                                x11,\n                                y11\n                            ], matrix1)\n                        ]);\n                        const [xscale1, yscale1] = _util1.Util.singularValueDecompose2dScale(matrix1);\n                        const txstep1 = xstep1 * xscale1;\n                        const tystep1 = ystep1 * yscale1;\n                        const tiling1 = this.svgFactory.createElement(\"svg:pattern\");\n                        tiling1.setAttributeNS(null, \"id\", tilingId1);\n                        tiling1.setAttributeNS(null, \"patternUnits\", \"userSpaceOnUse\");\n                        tiling1.setAttributeNS(null, \"width\", txstep1);\n                        tiling1.setAttributeNS(null, \"height\", tystep1);\n                        tiling1.setAttributeNS(null, \"x\", `${tx01}`);\n                        tiling1.setAttributeNS(null, \"y\", `${ty01}`);\n                        const svg1 = this.svg;\n                        const transformMatrix1 = this.transformMatrix;\n                        const fillColor1 = this.current.fillColor;\n                        const strokeColor1 = this.current.strokeColor;\n                        const bbox1 = this.svgFactory.create(tx11 - tx01, ty11 - ty01);\n                        this.svg = bbox1;\n                        this.transformMatrix = matrix1;\n                        if (paintType1 === 2) {\n                            const cssColor1 = _util1.Util.makeHexColor(...color1);\n                            this.current.fillColor = cssColor1;\n                            this.current.strokeColor = cssColor1;\n                        }\n                        this.executeOpTree(this.convertOpList(operatorList1));\n                        this.svg = svg1;\n                        this.transformMatrix = transformMatrix1;\n                        this.current.fillColor = fillColor1;\n                        this.current.strokeColor = strokeColor1;\n                        tiling1.append(bbox1.childNodes[0]);\n                        this.defs.append(tiling1);\n                        return `url(#${tilingId1})`;\n                    }\n                    _makeShadingPattern(args1) {\n                        if (typeof args1 === \"string\") {\n                            args1 = this.objs.get(args1);\n                        }\n                        switch(args1[0]){\n                            case \"RadialAxial\":\n                                const shadingId1 = `shading${shadingCount1++}`;\n                                const colorStops1 = args1[3];\n                                let gradient1;\n                                switch(args1[1]){\n                                    case \"axial\":\n                                        const point01 = args1[4];\n                                        const point11 = args1[5];\n                                        gradient1 = this.svgFactory.createElement(\"svg:linearGradient\");\n                                        gradient1.setAttributeNS(null, \"id\", shadingId1);\n                                        gradient1.setAttributeNS(null, \"gradientUnits\", \"userSpaceOnUse\");\n                                        gradient1.setAttributeNS(null, \"x1\", point01[0]);\n                                        gradient1.setAttributeNS(null, \"y1\", point01[1]);\n                                        gradient1.setAttributeNS(null, \"x2\", point11[0]);\n                                        gradient1.setAttributeNS(null, \"y2\", point11[1]);\n                                        break;\n                                    case \"radial\":\n                                        const focalPoint1 = args1[4];\n                                        const circlePoint1 = args1[5];\n                                        const focalRadius1 = args1[6];\n                                        const circleRadius1 = args1[7];\n                                        gradient1 = this.svgFactory.createElement(\"svg:radialGradient\");\n                                        gradient1.setAttributeNS(null, \"id\", shadingId1);\n                                        gradient1.setAttributeNS(null, \"gradientUnits\", \"userSpaceOnUse\");\n                                        gradient1.setAttributeNS(null, \"cx\", circlePoint1[0]);\n                                        gradient1.setAttributeNS(null, \"cy\", circlePoint1[1]);\n                                        gradient1.setAttributeNS(null, \"r\", circleRadius1);\n                                        gradient1.setAttributeNS(null, \"fx\", focalPoint1[0]);\n                                        gradient1.setAttributeNS(null, \"fy\", focalPoint1[1]);\n                                        gradient1.setAttributeNS(null, \"fr\", focalRadius1);\n                                        break;\n                                    default:\n                                        throw new Error(`Unknown RadialAxial type: ${args1[1]}`);\n                                }\n                                for (const colorStop1 of colorStops1){\n                                    const stop1 = this.svgFactory.createElement(\"svg:stop\");\n                                    stop1.setAttributeNS(null, \"offset\", colorStop1[0]);\n                                    stop1.setAttributeNS(null, \"stop-color\", colorStop1[1]);\n                                    gradient1.append(stop1);\n                                }\n                                this.defs.append(gradient1);\n                                return `url(#${shadingId1})`;\n                            case \"Mesh\":\n                                (0, _util1.warn)(\"Unimplemented pattern Mesh\");\n                                return null;\n                            case \"Dummy\":\n                                return \"hotpink\";\n                            default:\n                                throw new Error(`Unknown IR type: ${args1[0]}`);\n                        }\n                    }\n                    setDash(dashArray1, dashPhase1) {\n                        this.current.dashArray = dashArray1;\n                        this.current.dashPhase = dashPhase1;\n                    }\n                    constructPath(ops1, args1) {\n                        const current1 = this.current;\n                        let x4 = current1.x, y4 = current1.y;\n                        let d5 = [];\n                        let j1 = 0;\n                        for (const op1 of ops1){\n                            switch(op1 | 0){\n                                case _util1.OPS.rectangle:\n                                    x4 = args1[j1++];\n                                    y4 = args1[j1++];\n                                    const width2 = args1[j1++];\n                                    const height1 = args1[j1++];\n                                    const xw1 = x4 + width2;\n                                    const yh1 = y4 + height1;\n                                    d5.push(\"M\", pf1(x4), pf1(y4), \"L\", pf1(xw1), pf1(y4), \"L\", pf1(xw1), pf1(yh1), \"L\", pf1(x4), pf1(yh1), \"Z\");\n                                    break;\n                                case _util1.OPS.moveTo:\n                                    x4 = args1[j1++];\n                                    y4 = args1[j1++];\n                                    d5.push(\"M\", pf1(x4), pf1(y4));\n                                    break;\n                                case _util1.OPS.lineTo:\n                                    x4 = args1[j1++];\n                                    y4 = args1[j1++];\n                                    d5.push(\"L\", pf1(x4), pf1(y4));\n                                    break;\n                                case _util1.OPS.curveTo:\n                                    x4 = args1[j1 + 4];\n                                    y4 = args1[j1 + 5];\n                                    d5.push(\"C\", pf1(args1[j1]), pf1(args1[j1 + 1]), pf1(args1[j1 + 2]), pf1(args1[j1 + 3]), pf1(x4), pf1(y4));\n                                    j1 += 6;\n                                    break;\n                                case _util1.OPS.curveTo2:\n                                    d5.push(\"C\", pf1(x4), pf1(y4), pf1(args1[j1]), pf1(args1[j1 + 1]), pf1(args1[j1 + 2]), pf1(args1[j1 + 3]));\n                                    x4 = args1[j1 + 2];\n                                    y4 = args1[j1 + 3];\n                                    j1 += 4;\n                                    break;\n                                case _util1.OPS.curveTo3:\n                                    x4 = args1[j1 + 2];\n                                    y4 = args1[j1 + 3];\n                                    d5.push(\"C\", pf1(args1[j1]), pf1(args1[j1 + 1]), pf1(x4), pf1(y4), pf1(x4), pf1(y4));\n                                    j1 += 4;\n                                    break;\n                                case _util1.OPS.closePath:\n                                    d5.push(\"Z\");\n                                    break;\n                            }\n                        }\n                        d5 = d5.join(\" \");\n                        if (current1.path && ops1.length > 0 && ops1[0] !== _util1.OPS.rectangle && ops1[0] !== _util1.OPS.moveTo) {\n                            d5 = current1.path.getAttributeNS(null, \"d\") + d5;\n                        } else {\n                            current1.path = this.svgFactory.createElement(\"svg:path\");\n                            this._ensureTransformGroup().append(current1.path);\n                        }\n                        current1.path.setAttributeNS(null, \"d\", d5);\n                        current1.path.setAttributeNS(null, \"fill\", \"none\");\n                        current1.element = current1.path;\n                        current1.setCurrentPoint(x4, y4);\n                    }\n                    endPath() {\n                        const current1 = this.current;\n                        current1.path = null;\n                        if (!this.pendingClip) {\n                            return;\n                        }\n                        if (!current1.element) {\n                            this.pendingClip = null;\n                            return;\n                        }\n                        const clipId1 = `clippath${clipCount1++}`;\n                        const clipPath1 = this.svgFactory.createElement(\"svg:clipPath\");\n                        clipPath1.setAttributeNS(null, \"id\", clipId1);\n                        clipPath1.setAttributeNS(null, \"transform\", pm1(this.transformMatrix));\n                        const clipElement1 = current1.element.cloneNode(true);\n                        if (this.pendingClip === \"evenodd\") {\n                            clipElement1.setAttributeNS(null, \"clip-rule\", \"evenodd\");\n                        } else {\n                            clipElement1.setAttributeNS(null, \"clip-rule\", \"nonzero\");\n                        }\n                        this.pendingClip = null;\n                        clipPath1.append(clipElement1);\n                        this.defs.append(clipPath1);\n                        if (current1.activeClipUrl) {\n                            current1.clipGroup = null;\n                            for (const prev1 of this.extraStack){\n                                prev1.clipGroup = null;\n                            }\n                            clipPath1.setAttributeNS(null, \"clip-path\", current1.activeClipUrl);\n                        }\n                        current1.activeClipUrl = `url(#${clipId1})`;\n                        this.tgrp = null;\n                    }\n                    clip(type1) {\n                        this.pendingClip = type1;\n                    }\n                    closePath() {\n                        const current1 = this.current;\n                        if (current1.path) {\n                            const d5 = `${current1.path.getAttributeNS(null, \"d\")}Z`;\n                            current1.path.setAttributeNS(null, \"d\", d5);\n                        }\n                    }\n                    setLeading(leading1) {\n                        this.current.leading = -leading1;\n                    }\n                    setTextRise(textRise1) {\n                        this.current.textRise = textRise1;\n                    }\n                    setTextRenderingMode(textRenderingMode1) {\n                        this.current.textRenderingMode = textRenderingMode1;\n                    }\n                    setHScale(scale1) {\n                        this.current.textHScale = scale1 / 100;\n                    }\n                    setRenderingIntent(intent1) {}\n                    setFlatness(flatness1) {}\n                    setGState(states1) {\n                        for (const [key1, value1] of states1){\n                            switch(key1){\n                                case \"LW\":\n                                    this.setLineWidth(value1);\n                                    break;\n                                case \"LC\":\n                                    this.setLineCap(value1);\n                                    break;\n                                case \"LJ\":\n                                    this.setLineJoin(value1);\n                                    break;\n                                case \"ML\":\n                                    this.setMiterLimit(value1);\n                                    break;\n                                case \"D\":\n                                    this.setDash(value1[0], value1[1]);\n                                    break;\n                                case \"RI\":\n                                    this.setRenderingIntent(value1);\n                                    break;\n                                case \"FL\":\n                                    this.setFlatness(value1);\n                                    break;\n                                case \"Font\":\n                                    this.setFont(value1);\n                                    break;\n                                case \"CA\":\n                                    this.setStrokeAlpha(value1);\n                                    break;\n                                case \"ca\":\n                                    this.setFillAlpha(value1);\n                                    break;\n                                default:\n                                    (0, _util1.warn)(`Unimplemented graphic state operator ${key1}`);\n                                    break;\n                            }\n                        }\n                    }\n                    fill() {\n                        const current1 = this.current;\n                        if (current1.element) {\n                            current1.element.setAttributeNS(null, \"fill\", current1.fillColor);\n                            current1.element.setAttributeNS(null, \"fill-opacity\", current1.fillAlpha);\n                            this.endPath();\n                        }\n                    }\n                    stroke() {\n                        const current1 = this.current;\n                        if (current1.element) {\n                            this._setStrokeAttributes(current1.element);\n                            current1.element.setAttributeNS(null, \"fill\", \"none\");\n                            this.endPath();\n                        }\n                    }\n                    _setStrokeAttributes(element1, lineWidthScale1 = 1) {\n                        const current1 = this.current;\n                        let dashArray1 = current1.dashArray;\n                        if (lineWidthScale1 !== 1 && dashArray1.length > 0) {\n                            dashArray1 = dashArray1.map(function(value1) {\n                                return lineWidthScale1 * value1;\n                            });\n                        }\n                        element1.setAttributeNS(null, \"stroke\", current1.strokeColor);\n                        element1.setAttributeNS(null, \"stroke-opacity\", current1.strokeAlpha);\n                        element1.setAttributeNS(null, \"stroke-miterlimit\", pf1(current1.miterLimit));\n                        element1.setAttributeNS(null, \"stroke-linecap\", current1.lineCap);\n                        element1.setAttributeNS(null, \"stroke-linejoin\", current1.lineJoin);\n                        element1.setAttributeNS(null, \"stroke-width\", pf1(lineWidthScale1 * current1.lineWidth) + \"px\");\n                        element1.setAttributeNS(null, \"stroke-dasharray\", dashArray1.map(pf1).join(\" \"));\n                        element1.setAttributeNS(null, \"stroke-dashoffset\", pf1(lineWidthScale1 * current1.dashPhase) + \"px\");\n                    }\n                    eoFill() {\n                        this.current.element?.setAttributeNS(null, \"fill-rule\", \"evenodd\");\n                        this.fill();\n                    }\n                    fillStroke() {\n                        this.stroke();\n                        this.fill();\n                    }\n                    eoFillStroke() {\n                        this.current.element?.setAttributeNS(null, \"fill-rule\", \"evenodd\");\n                        this.fillStroke();\n                    }\n                    closeStroke() {\n                        this.closePath();\n                        this.stroke();\n                    }\n                    closeFillStroke() {\n                        this.closePath();\n                        this.fillStroke();\n                    }\n                    closeEOFillStroke() {\n                        this.closePath();\n                        this.eoFillStroke();\n                    }\n                    paintSolidColorImageMask() {\n                        const rect3 = this.svgFactory.createElement(\"svg:rect\");\n                        rect3.setAttributeNS(null, \"x\", \"0\");\n                        rect3.setAttributeNS(null, \"y\", \"0\");\n                        rect3.setAttributeNS(null, \"width\", \"1px\");\n                        rect3.setAttributeNS(null, \"height\", \"1px\");\n                        rect3.setAttributeNS(null, \"fill\", this.current.fillColor);\n                        this._ensureTransformGroup().append(rect3);\n                    }\n                    paintImageXObject(objId1) {\n                        const imgData1 = this.getObject(objId1);\n                        if (!imgData1) {\n                            (0, _util1.warn)(`Dependent image with object ID ${objId1} is not ready yet`);\n                            return;\n                        }\n                        this.paintInlineImageXObject(imgData1);\n                    }\n                    paintInlineImageXObject(imgData1, mask1) {\n                        const width2 = imgData1.width;\n                        const height1 = imgData1.height;\n                        const imgSrc1 = convertImgDataToPng1(imgData1, this.forceDataSchema, !!mask1);\n                        const cliprect1 = this.svgFactory.createElement(\"svg:rect\");\n                        cliprect1.setAttributeNS(null, \"x\", \"0\");\n                        cliprect1.setAttributeNS(null, \"y\", \"0\");\n                        cliprect1.setAttributeNS(null, \"width\", pf1(width2));\n                        cliprect1.setAttributeNS(null, \"height\", pf1(height1));\n                        this.current.element = cliprect1;\n                        this.clip(\"nonzero\");\n                        const imgEl1 = this.svgFactory.createElement(\"svg:image\");\n                        imgEl1.setAttributeNS(XLINK_NS1, \"xlink:href\", imgSrc1);\n                        imgEl1.setAttributeNS(null, \"x\", \"0\");\n                        imgEl1.setAttributeNS(null, \"y\", pf1(-height1));\n                        imgEl1.setAttributeNS(null, \"width\", pf1(width2) + \"px\");\n                        imgEl1.setAttributeNS(null, \"height\", pf1(height1) + \"px\");\n                        imgEl1.setAttributeNS(null, \"transform\", `scale(${pf1(1 / width2)} ${pf1(-1 / height1)})`);\n                        if (mask1) {\n                            mask1.append(imgEl1);\n                        } else {\n                            this._ensureTransformGroup().append(imgEl1);\n                        }\n                    }\n                    paintImageMaskXObject(img1) {\n                        const imgData1 = this.getObject(img1.data, img1);\n                        if (imgData1.bitmap) {\n                            (0, _util1.warn)(\"paintImageMaskXObject: ImageBitmap support is not implemented, \" + \"ensure that the `isOffscreenCanvasSupported` API parameter is disabled.\");\n                            return;\n                        }\n                        const current1 = this.current;\n                        const width2 = imgData1.width;\n                        const height1 = imgData1.height;\n                        const fillColor1 = current1.fillColor;\n                        current1.maskId = `mask${maskCount1++}`;\n                        const mask1 = this.svgFactory.createElement(\"svg:mask\");\n                        mask1.setAttributeNS(null, \"id\", current1.maskId);\n                        const rect3 = this.svgFactory.createElement(\"svg:rect\");\n                        rect3.setAttributeNS(null, \"x\", \"0\");\n                        rect3.setAttributeNS(null, \"y\", \"0\");\n                        rect3.setAttributeNS(null, \"width\", pf1(width2));\n                        rect3.setAttributeNS(null, \"height\", pf1(height1));\n                        rect3.setAttributeNS(null, \"fill\", fillColor1);\n                        rect3.setAttributeNS(null, \"mask\", `url(#${current1.maskId})`);\n                        this.defs.append(mask1);\n                        this._ensureTransformGroup().append(rect3);\n                        this.paintInlineImageXObject(imgData1, mask1);\n                    }\n                    paintFormXObjectBegin(matrix1, bbox1) {\n                        if (Array.isArray(matrix1) && matrix1.length === 6) {\n                            this.transform(matrix1[0], matrix1[1], matrix1[2], matrix1[3], matrix1[4], matrix1[5]);\n                        }\n                        if (bbox1) {\n                            const width2 = bbox1[2] - bbox1[0];\n                            const height1 = bbox1[3] - bbox1[1];\n                            const cliprect1 = this.svgFactory.createElement(\"svg:rect\");\n                            cliprect1.setAttributeNS(null, \"x\", bbox1[0]);\n                            cliprect1.setAttributeNS(null, \"y\", bbox1[1]);\n                            cliprect1.setAttributeNS(null, \"width\", pf1(width2));\n                            cliprect1.setAttributeNS(null, \"height\", pf1(height1));\n                            this.current.element = cliprect1;\n                            this.clip(\"nonzero\");\n                            this.endPath();\n                        }\n                    }\n                    paintFormXObjectEnd() {}\n                    _initialize(viewport1) {\n                        const svg1 = this.svgFactory.create(viewport1.width, viewport1.height);\n                        const definitions1 = this.svgFactory.createElement(\"svg:defs\");\n                        svg1.append(definitions1);\n                        this.defs = definitions1;\n                        const rootGroup1 = this.svgFactory.createElement(\"svg:g\");\n                        rootGroup1.setAttributeNS(null, \"transform\", pm1(viewport1.transform));\n                        svg1.append(rootGroup1);\n                        this.svg = rootGroup1;\n                        return svg1;\n                    }\n                    _ensureClipGroup() {\n                        if (!this.current.clipGroup) {\n                            const clipGroup1 = this.svgFactory.createElement(\"svg:g\");\n                            clipGroup1.setAttributeNS(null, \"clip-path\", this.current.activeClipUrl);\n                            this.svg.append(clipGroup1);\n                            this.current.clipGroup = clipGroup1;\n                        }\n                        return this.current.clipGroup;\n                    }\n                    _ensureTransformGroup() {\n                        if (!this.tgrp) {\n                            this.tgrp = this.svgFactory.createElement(\"svg:g\");\n                            this.tgrp.setAttributeNS(null, \"transform\", pm1(this.transformMatrix));\n                            if (this.current.activeClipUrl) {\n                                this._ensureClipGroup().append(this.tgrp);\n                            } else {\n                                this.svg.append(this.tgrp);\n                            }\n                        }\n                        return this.tgrp;\n                    }\n                }\n                exports1.SVGGraphics = SVGGraphics1;\n            /***/ },\n            /* 25 */ /***/ (__unused_webpack_module1, exports1)=>{\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                exports1.XfaText = void 0;\n                class XfaText1 {\n                    static textContent(xfa1) {\n                        const items1 = [];\n                        const output1 = {\n                            items: items1,\n                            styles: Object.create(null)\n                        };\n                        function walk1(node1) {\n                            if (!node1) {\n                                return;\n                            }\n                            let str1 = null;\n                            const name1 = node1.name;\n                            if (name1 === \"#text\") {\n                                str1 = node1.value;\n                            } else if (!XfaText1.shouldBuildText(name1)) {\n                                return;\n                            } else if (node1?.attributes?.textContent) {\n                                str1 = node1.attributes.textContent;\n                            } else if (node1.value) {\n                                str1 = node1.value;\n                            }\n                            if (str1 !== null) {\n                                items1.push({\n                                    str: str1\n                                });\n                            }\n                            if (!node1.children) {\n                                return;\n                            }\n                            for (const child1 of node1.children){\n                                walk1(child1);\n                            }\n                        }\n                        walk1(xfa1);\n                        return output1;\n                    }\n                    static shouldBuildText(name1) {\n                        return !(name1 === \"textarea\" || name1 === \"input\" || name1 === \"option\" || name1 === \"select\");\n                    }\n                }\n                exports1.XfaText = XfaText1;\n            /***/ },\n            /* 26 */ /***/ (__unused_webpack_module1, exports1, __w_pdfjs_require__1)=>{\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                exports1.TextLayerRenderTask = void 0;\n                exports1.renderTextLayer = renderTextLayer1;\n                exports1.updateTextLayer = updateTextLayer1;\n                var _util1 = __w_pdfjs_require__1(1);\n                var _display_utils1 = __w_pdfjs_require__1(6);\n                const MAX_TEXT_DIVS_TO_RENDER1 = 100000;\n                const DEFAULT_FONT_SIZE1 = 30;\n                const DEFAULT_FONT_ASCENT1 = 0.8;\n                const ascentCache1 = new Map();\n                function getCtx1(size1, isOffscreenCanvasSupported1) {\n                    let ctx1;\n                    if (isOffscreenCanvasSupported1 && _util1.FeatureTest.isOffscreenCanvasSupported) {\n                        ctx1 = new OffscreenCanvas(size1, size1).getContext(\"2d\", {\n                            alpha: false\n                        });\n                    } else {\n                        const canvas1 = document.createElement(\"canvas\");\n                        canvas1.width = canvas1.height = size1;\n                        ctx1 = canvas1.getContext(\"2d\", {\n                            alpha: false\n                        });\n                    }\n                    return ctx1;\n                }\n                function getAscent1(fontFamily1, isOffscreenCanvasSupported1) {\n                    const cachedAscent1 = ascentCache1.get(fontFamily1);\n                    if (cachedAscent1) {\n                        return cachedAscent1;\n                    }\n                    const ctx1 = getCtx1(DEFAULT_FONT_SIZE1, isOffscreenCanvasSupported1);\n                    ctx1.font = `${DEFAULT_FONT_SIZE1}px ${fontFamily1}`;\n                    const metrics1 = ctx1.measureText(\"\");\n                    let ascent1 = metrics1.fontBoundingBoxAscent;\n                    let descent1 = Math.abs(metrics1.fontBoundingBoxDescent);\n                    if (ascent1) {\n                        const ratio1 = ascent1 / (ascent1 + descent1);\n                        ascentCache1.set(fontFamily1, ratio1);\n                        ctx1.canvas.width = ctx1.canvas.height = 0;\n                        return ratio1;\n                    }\n                    ctx1.strokeStyle = \"red\";\n                    ctx1.clearRect(0, 0, DEFAULT_FONT_SIZE1, DEFAULT_FONT_SIZE1);\n                    ctx1.strokeText(\"g\", 0, 0);\n                    let pixels1 = ctx1.getImageData(0, 0, DEFAULT_FONT_SIZE1, DEFAULT_FONT_SIZE1).data;\n                    descent1 = 0;\n                    for(let i1 = pixels1.length - 1 - 3; i1 >= 0; i1 -= 4){\n                        if (pixels1[i1] > 0) {\n                            descent1 = Math.ceil(i1 / 4 / DEFAULT_FONT_SIZE1);\n                            break;\n                        }\n                    }\n                    ctx1.clearRect(0, 0, DEFAULT_FONT_SIZE1, DEFAULT_FONT_SIZE1);\n                    ctx1.strokeText(\"A\", 0, DEFAULT_FONT_SIZE1);\n                    pixels1 = ctx1.getImageData(0, 0, DEFAULT_FONT_SIZE1, DEFAULT_FONT_SIZE1).data;\n                    ascent1 = 0;\n                    for(let i1 = 0, ii1 = pixels1.length; i1 < ii1; i1 += 4){\n                        if (pixels1[i1] > 0) {\n                            ascent1 = DEFAULT_FONT_SIZE1 - Math.floor(i1 / 4 / DEFAULT_FONT_SIZE1);\n                            break;\n                        }\n                    }\n                    ctx1.canvas.width = ctx1.canvas.height = 0;\n                    if (ascent1) {\n                        const ratio1 = ascent1 / (ascent1 + descent1);\n                        ascentCache1.set(fontFamily1, ratio1);\n                        return ratio1;\n                    }\n                    ascentCache1.set(fontFamily1, DEFAULT_FONT_ASCENT1);\n                    return DEFAULT_FONT_ASCENT1;\n                }\n                function appendText1(task1, geom1, styles1) {\n                    const textDiv1 = document.createElement(\"span\");\n                    const textDivProperties1 = {\n                        angle: 0,\n                        canvasWidth: 0,\n                        hasText: geom1.str !== \"\",\n                        hasEOL: geom1.hasEOL,\n                        fontSize: 0\n                    };\n                    task1._textDivs.push(textDiv1);\n                    const tx2 = _util1.Util.transform(task1._transform, geom1.transform);\n                    let angle1 = Math.atan2(tx2[1], tx2[0]);\n                    const style1 = styles1[geom1.fontName];\n                    if (style1.vertical) {\n                        angle1 += Math.PI / 2;\n                    }\n                    const fontHeight1 = Math.hypot(tx2[2], tx2[3]);\n                    const fontAscent1 = fontHeight1 * getAscent1(style1.fontFamily, task1._isOffscreenCanvasSupported);\n                    let left1, top1;\n                    if (angle1 === 0) {\n                        left1 = tx2[4];\n                        top1 = tx2[5] - fontAscent1;\n                    } else {\n                        left1 = tx2[4] + fontAscent1 * Math.sin(angle1);\n                        top1 = tx2[5] - fontAscent1 * Math.cos(angle1);\n                    }\n                    const scaleFactorStr1 = \"calc(var(--scale-factor)*\";\n                    const divStyle1 = textDiv1.style;\n                    if (task1._container === task1._rootContainer) {\n                        divStyle1.left = `${(100 * left1 / task1._pageWidth).toFixed(2)}%`;\n                        divStyle1.top = `${(100 * top1 / task1._pageHeight).toFixed(2)}%`;\n                    } else {\n                        divStyle1.left = `${scaleFactorStr1}${left1.toFixed(2)}px)`;\n                        divStyle1.top = `${scaleFactorStr1}${top1.toFixed(2)}px)`;\n                    }\n                    divStyle1.fontSize = `${scaleFactorStr1}${fontHeight1.toFixed(2)}px)`;\n                    divStyle1.fontFamily = style1.fontFamily;\n                    textDivProperties1.fontSize = fontHeight1;\n                    textDiv1.setAttribute(\"role\", \"presentation\");\n                    textDiv1.textContent = geom1.str;\n                    textDiv1.dir = geom1.dir;\n                    if (task1._fontInspectorEnabled) {\n                        textDiv1.dataset.fontName = geom1.fontName;\n                    }\n                    if (angle1 !== 0) {\n                        textDivProperties1.angle = angle1 * (180 / Math.PI);\n                    }\n                    let shouldScaleText1 = false;\n                    if (geom1.str.length > 1) {\n                        shouldScaleText1 = true;\n                    } else if (geom1.str !== \" \" && geom1.transform[0] !== geom1.transform[3]) {\n                        const absScaleX1 = Math.abs(geom1.transform[0]), absScaleY1 = Math.abs(geom1.transform[3]);\n                        if (absScaleX1 !== absScaleY1 && Math.max(absScaleX1, absScaleY1) / Math.min(absScaleX1, absScaleY1) > 1.5) {\n                            shouldScaleText1 = true;\n                        }\n                    }\n                    if (shouldScaleText1) {\n                        textDivProperties1.canvasWidth = style1.vertical ? geom1.height : geom1.width;\n                    }\n                    task1._textDivProperties.set(textDiv1, textDivProperties1);\n                    if (task1._isReadableStream) {\n                        task1._layoutText(textDiv1);\n                    }\n                }\n                function layout1(params1) {\n                    const { div: div1, scale: scale1, properties: properties1, ctx: ctx1, prevFontSize: prevFontSize1, prevFontFamily: prevFontFamily1 } = params1;\n                    const { style: style1 } = div1;\n                    let transform1 = \"\";\n                    if (properties1.canvasWidth !== 0 && properties1.hasText) {\n                        const { fontFamily: fontFamily1 } = style1;\n                        const { canvasWidth: canvasWidth1, fontSize: fontSize1 } = properties1;\n                        if (prevFontSize1 !== fontSize1 || prevFontFamily1 !== fontFamily1) {\n                            ctx1.font = `${fontSize1 * scale1}px ${fontFamily1}`;\n                            params1.prevFontSize = fontSize1;\n                            params1.prevFontFamily = fontFamily1;\n                        }\n                        const { width: width2 } = ctx1.measureText(div1.textContent);\n                        if (width2 > 0) {\n                            transform1 = `scaleX(${canvasWidth1 * scale1 / width2})`;\n                        }\n                    }\n                    if (properties1.angle !== 0) {\n                        transform1 = `rotate(${properties1.angle}deg) ${transform1}`;\n                    }\n                    if (transform1.length > 0) {\n                        style1.transform = transform1;\n                    }\n                }\n                function render1(task1) {\n                    if (task1._canceled) {\n                        return;\n                    }\n                    const textDivs1 = task1._textDivs;\n                    const capability1 = task1._capability;\n                    const textDivsLength1 = textDivs1.length;\n                    if (textDivsLength1 > MAX_TEXT_DIVS_TO_RENDER1) {\n                        capability1.resolve();\n                        return;\n                    }\n                    if (!task1._isReadableStream) {\n                        for (const textDiv1 of textDivs1){\n                            task1._layoutText(textDiv1);\n                        }\n                    }\n                    capability1.resolve();\n                }\n                class TextLayerRenderTask1 {\n                    constructor({ textContentSource: textContentSource1, container: container1, viewport: viewport1, textDivs: textDivs1, textDivProperties: textDivProperties1, textContentItemsStr: textContentItemsStr1, isOffscreenCanvasSupported: isOffscreenCanvasSupported1 }){\n                        this._textContentSource = textContentSource1;\n                        this._isReadableStream = textContentSource1 instanceof ReadableStream;\n                        this._container = this._rootContainer = container1;\n                        this._textDivs = textDivs1 || [];\n                        this._textContentItemsStr = textContentItemsStr1 || [];\n                        this._isOffscreenCanvasSupported = isOffscreenCanvasSupported1;\n                        this._fontInspectorEnabled = !!globalThis.FontInspector?.enabled;\n                        this._reader = null;\n                        this._textDivProperties = textDivProperties1 || new WeakMap();\n                        this._canceled = false;\n                        this._capability = new _util1.PromiseCapability();\n                        this._layoutTextParams = {\n                            prevFontSize: null,\n                            prevFontFamily: null,\n                            div: null,\n                            scale: viewport1.scale * (globalThis.devicePixelRatio || 1),\n                            properties: null,\n                            ctx: getCtx1(0, isOffscreenCanvasSupported1)\n                        };\n                        const { pageWidth: pageWidth1, pageHeight: pageHeight1, pageX: pageX1, pageY: pageY1 } = viewport1.rawDims;\n                        this._transform = [\n                            1,\n                            0,\n                            0,\n                            -1,\n                            -pageX1,\n                            pageY1 + pageHeight1\n                        ];\n                        this._pageWidth = pageWidth1;\n                        this._pageHeight = pageHeight1;\n                        (0, _display_utils1.setLayerDimensions)(container1, viewport1);\n                        this._capability.promise.finally(()=>{\n                            this._layoutTextParams = null;\n                        }).catch(()=>{});\n                    }\n                    get promise() {\n                        return this._capability.promise;\n                    }\n                    cancel() {\n                        this._canceled = true;\n                        if (this._reader) {\n                            this._reader.cancel(new _util1.AbortException(\"TextLayer task cancelled.\")).catch(()=>{});\n                            this._reader = null;\n                        }\n                        this._capability.reject(new _util1.AbortException(\"TextLayer task cancelled.\"));\n                    }\n                    _processItems(items1, styleCache1) {\n                        for (const item1 of items1){\n                            if (item1.str === undefined) {\n                                if (item1.type === \"beginMarkedContentProps\" || item1.type === \"beginMarkedContent\") {\n                                    const parent1 = this._container;\n                                    this._container = document.createElement(\"span\");\n                                    this._container.classList.add(\"markedContent\");\n                                    if (item1.id !== null) {\n                                        this._container.setAttribute(\"id\", `${item1.id}`);\n                                    }\n                                    parent1.append(this._container);\n                                } else if (item1.type === \"endMarkedContent\") {\n                                    this._container = this._container.parentNode;\n                                }\n                                continue;\n                            }\n                            this._textContentItemsStr.push(item1.str);\n                            appendText1(this, item1, styleCache1);\n                        }\n                    }\n                    _layoutText(textDiv1) {\n                        const textDivProperties1 = this._layoutTextParams.properties = this._textDivProperties.get(textDiv1);\n                        this._layoutTextParams.div = textDiv1;\n                        layout1(this._layoutTextParams);\n                        if (textDivProperties1.hasText) {\n                            this._container.append(textDiv1);\n                        }\n                        if (textDivProperties1.hasEOL) {\n                            const br1 = document.createElement(\"br\");\n                            br1.setAttribute(\"role\", \"presentation\");\n                            this._container.append(br1);\n                        }\n                    }\n                    _render() {\n                        const capability1 = new _util1.PromiseCapability();\n                        let styleCache1 = Object.create(null);\n                        if (this._isReadableStream) {\n                            const pump1 = ()=>{\n                                this._reader.read().then(({ value: value1, done: done1 })=>{\n                                    if (done1) {\n                                        capability1.resolve();\n                                        return;\n                                    }\n                                    Object.assign(styleCache1, value1.styles);\n                                    this._processItems(value1.items, styleCache1);\n                                    pump1();\n                                }, capability1.reject);\n                            };\n                            this._reader = this._textContentSource.getReader();\n                            pump1();\n                        } else if (this._textContentSource) {\n                            const { items: items1, styles: styles1 } = this._textContentSource;\n                            this._processItems(items1, styles1);\n                            capability1.resolve();\n                        } else {\n                            throw new Error('No \"textContentSource\" parameter specified.');\n                        }\n                        capability1.promise.then(()=>{\n                            styleCache1 = null;\n                            render1(this);\n                        }, this._capability.reject);\n                    }\n                }\n                exports1.TextLayerRenderTask = TextLayerRenderTask1;\n                function renderTextLayer1(params1) {\n                    if (!params1.textContentSource && (params1.textContent || params1.textContentStream)) {\n                        (0, _display_utils1.deprecated)(\"The TextLayerRender `textContent`/`textContentStream` parameters \" + \"will be removed in the future, please use `textContentSource` instead.\");\n                        params1.textContentSource = params1.textContent || params1.textContentStream;\n                    }\n                    const { container: container1, viewport: viewport1 } = params1;\n                    const style1 = getComputedStyle(container1);\n                    const visibility1 = style1.getPropertyValue(\"visibility\");\n                    const scaleFactor1 = parseFloat(style1.getPropertyValue(\"--scale-factor\"));\n                    if (visibility1 === \"visible\" && (!scaleFactor1 || Math.abs(scaleFactor1 - viewport1.scale) > 1e-5)) {\n                        console.error(\"The `--scale-factor` CSS-variable must be set, \" + \"to the same value as `viewport.scale`, \" + \"either on the `container`-element itself or higher up in the DOM.\");\n                    }\n                    const task1 = new TextLayerRenderTask1(params1);\n                    task1._render();\n                    return task1;\n                }\n                function updateTextLayer1({ container: container1, viewport: viewport1, textDivs: textDivs1, textDivProperties: textDivProperties1, isOffscreenCanvasSupported: isOffscreenCanvasSupported1, mustRotate: mustRotate1 = true, mustRescale: mustRescale1 = true }) {\n                    if (mustRotate1) {\n                        (0, _display_utils1.setLayerDimensions)(container1, {\n                            rotation: viewport1.rotation\n                        });\n                    }\n                    if (mustRescale1) {\n                        const ctx1 = getCtx1(0, isOffscreenCanvasSupported1);\n                        const scale1 = viewport1.scale * (globalThis.devicePixelRatio || 1);\n                        const params1 = {\n                            prevFontSize: null,\n                            prevFontFamily: null,\n                            div: null,\n                            scale: scale1,\n                            properties: null,\n                            ctx: ctx1\n                        };\n                        for (const div1 of textDivs1){\n                            params1.properties = textDivProperties1.get(div1);\n                            params1.div = div1;\n                            layout1(params1);\n                        }\n                    }\n                }\n            /***/ },\n            /* 27 */ /***/ (__unused_webpack_module1, exports1, __w_pdfjs_require__1)=>{\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                exports1.AnnotationEditorLayer = void 0;\n                var _util1 = __w_pdfjs_require__1(1);\n                var _editor1 = __w_pdfjs_require__1(4);\n                var _freetext1 = __w_pdfjs_require__1(28);\n                var _ink1 = __w_pdfjs_require__1(33);\n                var _display_utils1 = __w_pdfjs_require__1(6);\n                var _stamp1 = __w_pdfjs_require__1(34);\n                class AnnotationEditorLayer1 {\n                    #accessibilityManager;\n                    #allowClick;\n                    #annotationLayer;\n                    #boundPointerup;\n                    #boundPointerdown;\n                    #editors;\n                    #hadPointerDown;\n                    #isCleaningUp;\n                    #isDisabling;\n                    #uiManager;\n                    static{\n                        this._initialized = false;\n                    }\n                    constructor({ uiManager: uiManager1, pageIndex: pageIndex1, div: div1, accessibilityManager: accessibilityManager1, annotationLayer: annotationLayer1, viewport: viewport1, l10n: l10n1 }){\n                        this.#allowClick = false;\n                        this.#annotationLayer = null;\n                        this.#boundPointerup = this.pointerup.bind(this);\n                        this.#boundPointerdown = this.pointerdown.bind(this);\n                        this.#editors = new Map();\n                        this.#hadPointerDown = false;\n                        this.#isCleaningUp = false;\n                        this.#isDisabling = false;\n                        const editorTypes1 = [\n                            _freetext1.FreeTextEditor,\n                            _ink1.InkEditor,\n                            _stamp1.StampEditor\n                        ];\n                        if (!AnnotationEditorLayer1._initialized) {\n                            AnnotationEditorLayer1._initialized = true;\n                            for (const editorType1 of editorTypes1){\n                                editorType1.initialize(l10n1);\n                            }\n                        }\n                        uiManager1.registerEditorTypes(editorTypes1);\n                        this.#uiManager = uiManager1;\n                        this.pageIndex = pageIndex1;\n                        this.div = div1;\n                        this.#accessibilityManager = accessibilityManager1;\n                        this.#annotationLayer = annotationLayer1;\n                        this.viewport = viewport1;\n                        this.#uiManager.addLayer(this);\n                    }\n                    get isEmpty() {\n                        return this.#editors.size === 0;\n                    }\n                    updateToolbar(mode1) {\n                        this.#uiManager.updateToolbar(mode1);\n                    }\n                    updateMode(mode1 = this.#uiManager.getMode()) {\n                        this.#cleanup();\n                        if (mode1 === _util1.AnnotationEditorType.INK) {\n                            this.addInkEditorIfNeeded(false);\n                            this.disableClick();\n                        } else {\n                            this.enableClick();\n                        }\n                        if (mode1 !== _util1.AnnotationEditorType.NONE) {\n                            this.div.classList.toggle(\"freeTextEditing\", mode1 === _util1.AnnotationEditorType.FREETEXT);\n                            this.div.classList.toggle(\"inkEditing\", mode1 === _util1.AnnotationEditorType.INK);\n                            this.div.classList.toggle(\"stampEditing\", mode1 === _util1.AnnotationEditorType.STAMP);\n                            this.div.hidden = false;\n                        }\n                    }\n                    addInkEditorIfNeeded(isCommitting1) {\n                        if (!isCommitting1 && this.#uiManager.getMode() !== _util1.AnnotationEditorType.INK) {\n                            return;\n                        }\n                        if (!isCommitting1) {\n                            for (const editor1 of this.#editors.values()){\n                                if (editor1.isEmpty()) {\n                                    editor1.setInBackground();\n                                    return;\n                                }\n                            }\n                        }\n                        const editor1 = this.#createAndAddNewEditor({\n                            offsetX: 0,\n                            offsetY: 0\n                        }, false);\n                        editor1.setInBackground();\n                    }\n                    setEditingState(isEditing1) {\n                        this.#uiManager.setEditingState(isEditing1);\n                    }\n                    addCommands(params1) {\n                        this.#uiManager.addCommands(params1);\n                    }\n                    enable() {\n                        this.div.style.pointerEvents = \"auto\";\n                        const annotationElementIds1 = new Set();\n                        for (const editor1 of this.#editors.values()){\n                            editor1.enableEditing();\n                            if (editor1.annotationElementId) {\n                                annotationElementIds1.add(editor1.annotationElementId);\n                            }\n                        }\n                        if (!this.#annotationLayer) {\n                            return;\n                        }\n                        const editables1 = this.#annotationLayer.getEditableAnnotations();\n                        for (const editable1 of editables1){\n                            editable1.hide();\n                            if (this.#uiManager.isDeletedAnnotationElement(editable1.data.id)) {\n                                continue;\n                            }\n                            if (annotationElementIds1.has(editable1.data.id)) {\n                                continue;\n                            }\n                            const editor1 = this.deserialize(editable1);\n                            if (!editor1) {\n                                continue;\n                            }\n                            this.addOrRebuild(editor1);\n                            editor1.enableEditing();\n                        }\n                    }\n                    disable() {\n                        this.#isDisabling = true;\n                        this.div.style.pointerEvents = \"none\";\n                        const hiddenAnnotationIds1 = new Set();\n                        for (const editor1 of this.#editors.values()){\n                            editor1.disableEditing();\n                            if (!editor1.annotationElementId || editor1.serialize() !== null) {\n                                hiddenAnnotationIds1.add(editor1.annotationElementId);\n                                continue;\n                            }\n                            this.getEditableAnnotation(editor1.annotationElementId)?.show();\n                            editor1.remove();\n                        }\n                        if (this.#annotationLayer) {\n                            const editables1 = this.#annotationLayer.getEditableAnnotations();\n                            for (const editable1 of editables1){\n                                const { id: id1 } = editable1.data;\n                                if (hiddenAnnotationIds1.has(id1) || this.#uiManager.isDeletedAnnotationElement(id1)) {\n                                    continue;\n                                }\n                                editable1.show();\n                            }\n                        }\n                        this.#cleanup();\n                        if (this.isEmpty) {\n                            this.div.hidden = true;\n                        }\n                        this.#isDisabling = false;\n                    }\n                    getEditableAnnotation(id1) {\n                        return this.#annotationLayer?.getEditableAnnotation(id1) || null;\n                    }\n                    setActiveEditor(editor1) {\n                        const currentActive1 = this.#uiManager.getActive();\n                        if (currentActive1 === editor1) {\n                            return;\n                        }\n                        this.#uiManager.setActiveEditor(editor1);\n                    }\n                    enableClick() {\n                        this.div.addEventListener(\"pointerdown\", this.#boundPointerdown);\n                        this.div.addEventListener(\"pointerup\", this.#boundPointerup);\n                    }\n                    disableClick() {\n                        this.div.removeEventListener(\"pointerdown\", this.#boundPointerdown);\n                        this.div.removeEventListener(\"pointerup\", this.#boundPointerup);\n                    }\n                    attach(editor1) {\n                        this.#editors.set(editor1.id, editor1);\n                        const { annotationElementId: annotationElementId1 } = editor1;\n                        if (annotationElementId1 && this.#uiManager.isDeletedAnnotationElement(annotationElementId1)) {\n                            this.#uiManager.removeDeletedAnnotationElement(editor1);\n                        }\n                    }\n                    detach(editor1) {\n                        this.#editors.delete(editor1.id);\n                        this.#accessibilityManager?.removePointerInTextLayer(editor1.contentDiv);\n                        if (!this.#isDisabling && editor1.annotationElementId) {\n                            this.#uiManager.addDeletedAnnotationElement(editor1);\n                        }\n                    }\n                    remove(editor1) {\n                        this.detach(editor1);\n                        this.#uiManager.removeEditor(editor1);\n                        if (editor1.div.contains(document.activeElement)) {\n                            setTimeout(()=>{\n                                this.#uiManager.focusMainContainer();\n                            }, 0);\n                        }\n                        editor1.div.remove();\n                        editor1.isAttachedToDOM = false;\n                        if (!this.#isCleaningUp) {\n                            this.addInkEditorIfNeeded(false);\n                        }\n                    }\n                    changeParent(editor1) {\n                        if (editor1.parent === this) {\n                            return;\n                        }\n                        if (editor1.annotationElementId) {\n                            this.#uiManager.addDeletedAnnotationElement(editor1.annotationElementId);\n                            _editor1.AnnotationEditor.deleteAnnotationElement(editor1);\n                            editor1.annotationElementId = null;\n                        }\n                        this.attach(editor1);\n                        editor1.parent?.detach(editor1);\n                        editor1.setParent(this);\n                        if (editor1.div && editor1.isAttachedToDOM) {\n                            editor1.div.remove();\n                            this.div.append(editor1.div);\n                        }\n                    }\n                    add(editor1) {\n                        this.changeParent(editor1);\n                        this.#uiManager.addEditor(editor1);\n                        this.attach(editor1);\n                        if (!editor1.isAttachedToDOM) {\n                            const div1 = editor1.render();\n                            this.div.append(div1);\n                            editor1.isAttachedToDOM = true;\n                        }\n                        editor1.fixAndSetPosition();\n                        editor1.onceAdded();\n                        this.#uiManager.addToAnnotationStorage(editor1);\n                    }\n                    moveEditorInDOM(editor1) {\n                        if (!editor1.isAttachedToDOM) {\n                            return;\n                        }\n                        const { activeElement: activeElement1 } = document;\n                        if (editor1.div.contains(activeElement1)) {\n                            editor1._focusEventsAllowed = false;\n                            setTimeout(()=>{\n                                if (!editor1.div.contains(document.activeElement)) {\n                                    editor1.div.addEventListener(\"focusin\", ()=>{\n                                        editor1._focusEventsAllowed = true;\n                                    }, {\n                                        once: true\n                                    });\n                                    activeElement1.focus();\n                                } else {\n                                    editor1._focusEventsAllowed = true;\n                                }\n                            }, 0);\n                        }\n                        editor1._structTreeParentId = this.#accessibilityManager?.moveElementInDOM(this.div, editor1.div, editor1.contentDiv, true);\n                    }\n                    addOrRebuild(editor1) {\n                        if (editor1.needsToBeRebuilt()) {\n                            editor1.rebuild();\n                        } else {\n                            this.add(editor1);\n                        }\n                    }\n                    addUndoableEditor(editor1) {\n                        const cmd1 = ()=>editor1._uiManager.rebuild(editor1);\n                        const undo1 = ()=>{\n                            editor1.remove();\n                        };\n                        this.addCommands({\n                            cmd: cmd1,\n                            undo: undo1,\n                            mustExec: false\n                        });\n                    }\n                    getNextId() {\n                        return this.#uiManager.getId();\n                    }\n                    #createNewEditor(params1) {\n                        switch(this.#uiManager.getMode()){\n                            case _util1.AnnotationEditorType.FREETEXT:\n                                return new _freetext1.FreeTextEditor(params1);\n                            case _util1.AnnotationEditorType.INK:\n                                return new _ink1.InkEditor(params1);\n                            case _util1.AnnotationEditorType.STAMP:\n                                return new _stamp1.StampEditor(params1);\n                        }\n                        return null;\n                    }\n                    pasteEditor(mode1, params1) {\n                        this.#uiManager.updateToolbar(mode1);\n                        this.#uiManager.updateMode(mode1);\n                        const { offsetX: offsetX1, offsetY: offsetY1 } = this.#getCenterPoint();\n                        const id1 = this.getNextId();\n                        const editor1 = this.#createNewEditor({\n                            parent: this,\n                            id: id1,\n                            x: offsetX1,\n                            y: offsetY1,\n                            uiManager: this.#uiManager,\n                            isCentered: true,\n                            ...params1\n                        });\n                        if (editor1) {\n                            this.add(editor1);\n                        }\n                    }\n                    deserialize(data1) {\n                        switch(data1.annotationType ?? data1.annotationEditorType){\n                            case _util1.AnnotationEditorType.FREETEXT:\n                                return _freetext1.FreeTextEditor.deserialize(data1, this, this.#uiManager);\n                            case _util1.AnnotationEditorType.INK:\n                                return _ink1.InkEditor.deserialize(data1, this, this.#uiManager);\n                            case _util1.AnnotationEditorType.STAMP:\n                                return _stamp1.StampEditor.deserialize(data1, this, this.#uiManager);\n                        }\n                        return null;\n                    }\n                    #createAndAddNewEditor(event1, isCentered1) {\n                        const id1 = this.getNextId();\n                        const editor1 = this.#createNewEditor({\n                            parent: this,\n                            id: id1,\n                            x: event1.offsetX,\n                            y: event1.offsetY,\n                            uiManager: this.#uiManager,\n                            isCentered: isCentered1\n                        });\n                        if (editor1) {\n                            this.add(editor1);\n                        }\n                        return editor1;\n                    }\n                    #getCenterPoint() {\n                        const { x: x4, y: y4, width: width2, height: height1 } = this.div.getBoundingClientRect();\n                        const tlX1 = Math.max(0, x4);\n                        const tlY1 = Math.max(0, y4);\n                        const brX1 = Math.min(window.innerWidth, x4 + width2);\n                        const brY1 = Math.min(window.innerHeight, y4 + height1);\n                        const centerX1 = (tlX1 + brX1) / 2 - x4;\n                        const centerY1 = (tlY1 + brY1) / 2 - y4;\n                        const [offsetX1, offsetY1] = this.viewport.rotation % 180 === 0 ? [\n                            centerX1,\n                            centerY1\n                        ] : [\n                            centerY1,\n                            centerX1\n                        ];\n                        return {\n                            offsetX: offsetX1,\n                            offsetY: offsetY1\n                        };\n                    }\n                    addNewEditor() {\n                        this.#createAndAddNewEditor(this.#getCenterPoint(), true);\n                    }\n                    setSelected(editor1) {\n                        this.#uiManager.setSelected(editor1);\n                    }\n                    toggleSelected(editor1) {\n                        this.#uiManager.toggleSelected(editor1);\n                    }\n                    isSelected(editor1) {\n                        return this.#uiManager.isSelected(editor1);\n                    }\n                    unselect(editor1) {\n                        this.#uiManager.unselect(editor1);\n                    }\n                    pointerup(event1) {\n                        const { isMac: isMac1 } = _util1.FeatureTest.platform;\n                        if (event1.button !== 0 || event1.ctrlKey && isMac1) {\n                            return;\n                        }\n                        if (event1.target !== this.div) {\n                            return;\n                        }\n                        if (!this.#hadPointerDown) {\n                            return;\n                        }\n                        this.#hadPointerDown = false;\n                        if (!this.#allowClick) {\n                            this.#allowClick = true;\n                            return;\n                        }\n                        if (this.#uiManager.getMode() === _util1.AnnotationEditorType.STAMP) {\n                            this.#uiManager.unselectAll();\n                            return;\n                        }\n                        this.#createAndAddNewEditor(event1, false);\n                    }\n                    pointerdown(event1) {\n                        if (this.#hadPointerDown) {\n                            this.#hadPointerDown = false;\n                            return;\n                        }\n                        const { isMac: isMac1 } = _util1.FeatureTest.platform;\n                        if (event1.button !== 0 || event1.ctrlKey && isMac1) {\n                            return;\n                        }\n                        if (event1.target !== this.div) {\n                            return;\n                        }\n                        this.#hadPointerDown = true;\n                        const editor1 = this.#uiManager.getActive();\n                        this.#allowClick = !editor1 || editor1.isEmpty();\n                    }\n                    findNewParent(editor1, x4, y4) {\n                        const layer1 = this.#uiManager.findParent(x4, y4);\n                        if (layer1 === null || layer1 === this) {\n                            return false;\n                        }\n                        layer1.changeParent(editor1);\n                        return true;\n                    }\n                    destroy() {\n                        if (this.#uiManager.getActive()?.parent === this) {\n                            this.#uiManager.commitOrRemove();\n                            this.#uiManager.setActiveEditor(null);\n                        }\n                        for (const editor1 of this.#editors.values()){\n                            this.#accessibilityManager?.removePointerInTextLayer(editor1.contentDiv);\n                            editor1.setParent(null);\n                            editor1.isAttachedToDOM = false;\n                            editor1.div.remove();\n                        }\n                        this.div = null;\n                        this.#editors.clear();\n                        this.#uiManager.removeLayer(this);\n                    }\n                    #cleanup() {\n                        this.#isCleaningUp = true;\n                        for (const editor1 of this.#editors.values()){\n                            if (editor1.isEmpty()) {\n                                editor1.remove();\n                            }\n                        }\n                        this.#isCleaningUp = false;\n                    }\n                    render({ viewport: viewport1 }) {\n                        this.viewport = viewport1;\n                        (0, _display_utils1.setLayerDimensions)(this.div, viewport1);\n                        for (const editor1 of this.#uiManager.getEditors(this.pageIndex)){\n                            this.add(editor1);\n                        }\n                        this.updateMode();\n                    }\n                    update({ viewport: viewport1 }) {\n                        this.#uiManager.commitOrRemove();\n                        this.viewport = viewport1;\n                        (0, _display_utils1.setLayerDimensions)(this.div, {\n                            rotation: viewport1.rotation\n                        });\n                        this.updateMode();\n                    }\n                    get pageDimensions() {\n                        const { pageWidth: pageWidth1, pageHeight: pageHeight1 } = this.viewport.rawDims;\n                        return [\n                            pageWidth1,\n                            pageHeight1\n                        ];\n                    }\n                }\n                exports1.AnnotationEditorLayer = AnnotationEditorLayer1;\n            /***/ },\n            /* 28 */ /***/ (__unused_webpack_module1, exports1, __w_pdfjs_require__1)=>{\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                exports1.FreeTextEditor = void 0;\n                var _util1 = __w_pdfjs_require__1(1);\n                var _tools1 = __w_pdfjs_require__1(5);\n                var _editor1 = __w_pdfjs_require__1(4);\n                var _annotation_layer1 = __w_pdfjs_require__1(29);\n                class FreeTextEditor1 extends _editor1.AnnotationEditor {\n                    #boundEditorDivBlur;\n                    #boundEditorDivFocus;\n                    #boundEditorDivInput;\n                    #boundEditorDivKeydown;\n                    #color;\n                    #content;\n                    #editorDivId;\n                    #fontSize;\n                    #initialData;\n                    static{\n                        this._freeTextDefaultContent = \"\";\n                    }\n                    static{\n                        this._internalPadding = 0;\n                    }\n                    static{\n                        this._defaultColor = null;\n                    }\n                    static{\n                        this._defaultFontSize = 10;\n                    }\n                    static get _keyboardManager() {\n                        const proto1 = FreeTextEditor1.prototype;\n                        const arrowChecker1 = (self1)=>self1.isEmpty();\n                        const small1 = _tools1.AnnotationEditorUIManager.TRANSLATE_SMALL;\n                        const big1 = _tools1.AnnotationEditorUIManager.TRANSLATE_BIG;\n                        return (0, _util1.shadow)(this, \"_keyboardManager\", new _tools1.KeyboardManager([\n                            [\n                                [\n                                    \"ctrl+s\",\n                                    \"mac+meta+s\",\n                                    \"ctrl+p\",\n                                    \"mac+meta+p\"\n                                ],\n                                proto1.commitOrRemove,\n                                {\n                                    bubbles: true\n                                }\n                            ],\n                            [\n                                [\n                                    \"ctrl+Enter\",\n                                    \"mac+meta+Enter\",\n                                    \"Escape\",\n                                    \"mac+Escape\"\n                                ],\n                                proto1.commitOrRemove\n                            ],\n                            [\n                                [\n                                    \"ArrowLeft\",\n                                    \"mac+ArrowLeft\"\n                                ],\n                                proto1._translateEmpty,\n                                {\n                                    args: [\n                                        -small1,\n                                        0\n                                    ],\n                                    checker: arrowChecker1\n                                }\n                            ],\n                            [\n                                [\n                                    \"ctrl+ArrowLeft\",\n                                    \"mac+shift+ArrowLeft\"\n                                ],\n                                proto1._translateEmpty,\n                                {\n                                    args: [\n                                        -big1,\n                                        0\n                                    ],\n                                    checker: arrowChecker1\n                                }\n                            ],\n                            [\n                                [\n                                    \"ArrowRight\",\n                                    \"mac+ArrowRight\"\n                                ],\n                                proto1._translateEmpty,\n                                {\n                                    args: [\n                                        small1,\n                                        0\n                                    ],\n                                    checker: arrowChecker1\n                                }\n                            ],\n                            [\n                                [\n                                    \"ctrl+ArrowRight\",\n                                    \"mac+shift+ArrowRight\"\n                                ],\n                                proto1._translateEmpty,\n                                {\n                                    args: [\n                                        big1,\n                                        0\n                                    ],\n                                    checker: arrowChecker1\n                                }\n                            ],\n                            [\n                                [\n                                    \"ArrowUp\",\n                                    \"mac+ArrowUp\"\n                                ],\n                                proto1._translateEmpty,\n                                {\n                                    args: [\n                                        0,\n                                        -small1\n                                    ],\n                                    checker: arrowChecker1\n                                }\n                            ],\n                            [\n                                [\n                                    \"ctrl+ArrowUp\",\n                                    \"mac+shift+ArrowUp\"\n                                ],\n                                proto1._translateEmpty,\n                                {\n                                    args: [\n                                        0,\n                                        -big1\n                                    ],\n                                    checker: arrowChecker1\n                                }\n                            ],\n                            [\n                                [\n                                    \"ArrowDown\",\n                                    \"mac+ArrowDown\"\n                                ],\n                                proto1._translateEmpty,\n                                {\n                                    args: [\n                                        0,\n                                        small1\n                                    ],\n                                    checker: arrowChecker1\n                                }\n                            ],\n                            [\n                                [\n                                    \"ctrl+ArrowDown\",\n                                    \"mac+shift+ArrowDown\"\n                                ],\n                                proto1._translateEmpty,\n                                {\n                                    args: [\n                                        0,\n                                        big1\n                                    ],\n                                    checker: arrowChecker1\n                                }\n                            ]\n                        ]));\n                    }\n                    static{\n                        this._type = \"freetext\";\n                    }\n                    constructor(params1){\n                        super({\n                            ...params1,\n                            name: \"freeTextEditor\"\n                        });\n                        this.#boundEditorDivBlur = this.editorDivBlur.bind(this);\n                        this.#boundEditorDivFocus = this.editorDivFocus.bind(this);\n                        this.#boundEditorDivInput = this.editorDivInput.bind(this);\n                        this.#boundEditorDivKeydown = this.editorDivKeydown.bind(this);\n                        this.#content = \"\";\n                        this.#editorDivId = `${this.id}-editor`;\n                        this.#initialData = null;\n                        this.#color = params1.color || FreeTextEditor1._defaultColor || _editor1.AnnotationEditor._defaultLineColor;\n                        this.#fontSize = params1.fontSize || FreeTextEditor1._defaultFontSize;\n                    }\n                    static initialize(l10n1) {\n                        _editor1.AnnotationEditor.initialize(l10n1, {\n                            strings: [\n                                \"free_text2_default_content\",\n                                \"editor_free_text2_aria_label\"\n                            ]\n                        });\n                        const style1 = getComputedStyle(document.documentElement);\n                        this._internalPadding = parseFloat(style1.getPropertyValue(\"--freetext-padding\"));\n                    }\n                    static updateDefaultParams(type1, value1) {\n                        switch(type1){\n                            case _util1.AnnotationEditorParamsType.FREETEXT_SIZE:\n                                FreeTextEditor1._defaultFontSize = value1;\n                                break;\n                            case _util1.AnnotationEditorParamsType.FREETEXT_COLOR:\n                                FreeTextEditor1._defaultColor = value1;\n                                break;\n                        }\n                    }\n                    updateParams(type1, value1) {\n                        switch(type1){\n                            case _util1.AnnotationEditorParamsType.FREETEXT_SIZE:\n                                this.#updateFontSize(value1);\n                                break;\n                            case _util1.AnnotationEditorParamsType.FREETEXT_COLOR:\n                                this.#updateColor(value1);\n                                break;\n                        }\n                    }\n                    static get defaultPropertiesToUpdate() {\n                        return [\n                            [\n                                _util1.AnnotationEditorParamsType.FREETEXT_SIZE,\n                                FreeTextEditor1._defaultFontSize\n                            ],\n                            [\n                                _util1.AnnotationEditorParamsType.FREETEXT_COLOR,\n                                FreeTextEditor1._defaultColor || _editor1.AnnotationEditor._defaultLineColor\n                            ]\n                        ];\n                    }\n                    get propertiesToUpdate() {\n                        return [\n                            [\n                                _util1.AnnotationEditorParamsType.FREETEXT_SIZE,\n                                this.#fontSize\n                            ],\n                            [\n                                _util1.AnnotationEditorParamsType.FREETEXT_COLOR,\n                                this.#color\n                            ]\n                        ];\n                    }\n                    #updateFontSize(fontSize1) {\n                        const setFontsize1 = (size1)=>{\n                            this.editorDiv.style.fontSize = `calc(${size1}px * var(--scale-factor))`;\n                            this.translate(0, -(size1 - this.#fontSize) * this.parentScale);\n                            this.#fontSize = size1;\n                            this.#setEditorDimensions();\n                        };\n                        const savedFontsize1 = this.#fontSize;\n                        this.addCommands({\n                            cmd: ()=>{\n                                setFontsize1(fontSize1);\n                            },\n                            undo: ()=>{\n                                setFontsize1(savedFontsize1);\n                            },\n                            mustExec: true,\n                            type: _util1.AnnotationEditorParamsType.FREETEXT_SIZE,\n                            overwriteIfSameType: true,\n                            keepUndo: true\n                        });\n                    }\n                    #updateColor(color1) {\n                        const savedColor1 = this.#color;\n                        this.addCommands({\n                            cmd: ()=>{\n                                this.#color = this.editorDiv.style.color = color1;\n                            },\n                            undo: ()=>{\n                                this.#color = this.editorDiv.style.color = savedColor1;\n                            },\n                            mustExec: true,\n                            type: _util1.AnnotationEditorParamsType.FREETEXT_COLOR,\n                            overwriteIfSameType: true,\n                            keepUndo: true\n                        });\n                    }\n                    _translateEmpty(x4, y4) {\n                        this._uiManager.translateSelectedEditors(x4, y4, true);\n                    }\n                    getInitialTranslation() {\n                        const scale1 = this.parentScale;\n                        return [\n                            -FreeTextEditor1._internalPadding * scale1,\n                            -(FreeTextEditor1._internalPadding + this.#fontSize) * scale1\n                        ];\n                    }\n                    rebuild() {\n                        if (!this.parent) {\n                            return;\n                        }\n                        super.rebuild();\n                        if (this.div === null) {\n                            return;\n                        }\n                        if (!this.isAttachedToDOM) {\n                            this.parent.add(this);\n                        }\n                    }\n                    enableEditMode() {\n                        if (this.isInEditMode()) {\n                            return;\n                        }\n                        this.parent.setEditingState(false);\n                        this.parent.updateToolbar(_util1.AnnotationEditorType.FREETEXT);\n                        super.enableEditMode();\n                        this.overlayDiv.classList.remove(\"enabled\");\n                        this.editorDiv.contentEditable = true;\n                        this._isDraggable = false;\n                        this.div.removeAttribute(\"aria-activedescendant\");\n                        this.editorDiv.addEventListener(\"keydown\", this.#boundEditorDivKeydown);\n                        this.editorDiv.addEventListener(\"focus\", this.#boundEditorDivFocus);\n                        this.editorDiv.addEventListener(\"blur\", this.#boundEditorDivBlur);\n                        this.editorDiv.addEventListener(\"input\", this.#boundEditorDivInput);\n                    }\n                    disableEditMode() {\n                        if (!this.isInEditMode()) {\n                            return;\n                        }\n                        this.parent.setEditingState(true);\n                        super.disableEditMode();\n                        this.overlayDiv.classList.add(\"enabled\");\n                        this.editorDiv.contentEditable = false;\n                        this.div.setAttribute(\"aria-activedescendant\", this.#editorDivId);\n                        this._isDraggable = true;\n                        this.editorDiv.removeEventListener(\"keydown\", this.#boundEditorDivKeydown);\n                        this.editorDiv.removeEventListener(\"focus\", this.#boundEditorDivFocus);\n                        this.editorDiv.removeEventListener(\"blur\", this.#boundEditorDivBlur);\n                        this.editorDiv.removeEventListener(\"input\", this.#boundEditorDivInput);\n                        this.div.focus({\n                            preventScroll: true\n                        });\n                        this.isEditing = false;\n                        this.parent.div.classList.add(\"freeTextEditing\");\n                    }\n                    focusin(event1) {\n                        if (!this._focusEventsAllowed) {\n                            return;\n                        }\n                        super.focusin(event1);\n                        if (event1.target !== this.editorDiv) {\n                            this.editorDiv.focus();\n                        }\n                    }\n                    onceAdded() {\n                        if (this.width) {\n                            this.#cheatInitialRect();\n                            return;\n                        }\n                        this.enableEditMode();\n                        this.editorDiv.focus();\n                        if (this._initialOptions?.isCentered) {\n                            this.center();\n                        }\n                        this._initialOptions = null;\n                    }\n                    isEmpty() {\n                        return !this.editorDiv || this.editorDiv.innerText.trim() === \"\";\n                    }\n                    remove() {\n                        this.isEditing = false;\n                        if (this.parent) {\n                            this.parent.setEditingState(true);\n                            this.parent.div.classList.add(\"freeTextEditing\");\n                        }\n                        super.remove();\n                    }\n                    #extractText() {\n                        const divs1 = this.editorDiv.getElementsByTagName(\"div\");\n                        if (divs1.length === 0) {\n                            return this.editorDiv.innerText;\n                        }\n                        const buffer1 = [];\n                        for (const div1 of divs1){\n                            buffer1.push(div1.innerText.replace(/\\r\\n?|\\n/, \"\"));\n                        }\n                        return buffer1.join(\"\\n\");\n                    }\n                    #setEditorDimensions() {\n                        const [parentWidth1, parentHeight1] = this.parentDimensions;\n                        let rect3;\n                        if (this.isAttachedToDOM) {\n                            rect3 = this.div.getBoundingClientRect();\n                        } else {\n                            const { currentLayer: currentLayer1, div: div1 } = this;\n                            const savedDisplay1 = div1.style.display;\n                            div1.style.display = \"hidden\";\n                            currentLayer1.div.append(this.div);\n                            rect3 = div1.getBoundingClientRect();\n                            div1.remove();\n                            div1.style.display = savedDisplay1;\n                        }\n                        if (this.rotation % 180 === this.parentRotation % 180) {\n                            this.width = rect3.width / parentWidth1;\n                            this.height = rect3.height / parentHeight1;\n                        } else {\n                            this.width = rect3.height / parentWidth1;\n                            this.height = rect3.width / parentHeight1;\n                        }\n                        this.fixAndSetPosition();\n                    }\n                    commit() {\n                        if (!this.isInEditMode()) {\n                            return;\n                        }\n                        super.commit();\n                        this.disableEditMode();\n                        const savedText1 = this.#content;\n                        const newText1 = this.#content = this.#extractText().trimEnd();\n                        if (savedText1 === newText1) {\n                            return;\n                        }\n                        const setText1 = (text1)=>{\n                            this.#content = text1;\n                            if (!text1) {\n                                this.remove();\n                                return;\n                            }\n                            this.#setContent();\n                            this._uiManager.rebuild(this);\n                            this.#setEditorDimensions();\n                        };\n                        this.addCommands({\n                            cmd: ()=>{\n                                setText1(newText1);\n                            },\n                            undo: ()=>{\n                                setText1(savedText1);\n                            },\n                            mustExec: false\n                        });\n                        this.#setEditorDimensions();\n                    }\n                    shouldGetKeyboardEvents() {\n                        return this.isInEditMode();\n                    }\n                    enterInEditMode() {\n                        this.enableEditMode();\n                        this.editorDiv.focus();\n                    }\n                    dblclick(event1) {\n                        this.enterInEditMode();\n                    }\n                    keydown(event1) {\n                        if (event1.target === this.div && event1.key === \"Enter\") {\n                            this.enterInEditMode();\n                            event1.preventDefault();\n                        }\n                    }\n                    editorDivKeydown(event1) {\n                        FreeTextEditor1._keyboardManager.exec(this, event1);\n                    }\n                    editorDivFocus(event1) {\n                        this.isEditing = true;\n                    }\n                    editorDivBlur(event1) {\n                        this.isEditing = false;\n                    }\n                    editorDivInput(event1) {\n                        this.parent.div.classList.toggle(\"freeTextEditing\", this.isEmpty());\n                    }\n                    disableEditing() {\n                        this.editorDiv.setAttribute(\"role\", \"comment\");\n                        this.editorDiv.removeAttribute(\"aria-multiline\");\n                    }\n                    enableEditing() {\n                        this.editorDiv.setAttribute(\"role\", \"textbox\");\n                        this.editorDiv.setAttribute(\"aria-multiline\", true);\n                    }\n                    render() {\n                        if (this.div) {\n                            return this.div;\n                        }\n                        let baseX1, baseY1;\n                        if (this.width) {\n                            baseX1 = this.x;\n                            baseY1 = this.y;\n                        }\n                        super.render();\n                        this.editorDiv = document.createElement(\"div\");\n                        this.editorDiv.className = \"internal\";\n                        this.editorDiv.setAttribute(\"id\", this.#editorDivId);\n                        this.enableEditing();\n                        _editor1.AnnotationEditor._l10nPromise.get(\"editor_free_text2_aria_label\").then((msg1)=>this.editorDiv?.setAttribute(\"aria-label\", msg1));\n                        _editor1.AnnotationEditor._l10nPromise.get(\"free_text2_default_content\").then((msg1)=>this.editorDiv?.setAttribute(\"default-content\", msg1));\n                        this.editorDiv.contentEditable = true;\n                        const { style: style1 } = this.editorDiv;\n                        style1.fontSize = `calc(${this.#fontSize}px * var(--scale-factor))`;\n                        style1.color = this.#color;\n                        this.div.append(this.editorDiv);\n                        this.overlayDiv = document.createElement(\"div\");\n                        this.overlayDiv.classList.add(\"overlay\", \"enabled\");\n                        this.div.append(this.overlayDiv);\n                        (0, _tools1.bindEvents)(this, this.div, [\n                            \"dblclick\",\n                            \"keydown\"\n                        ]);\n                        if (this.width) {\n                            const [parentWidth1, parentHeight1] = this.parentDimensions;\n                            if (this.annotationElementId) {\n                                const { position: position1 } = this.#initialData;\n                                let [tx2, ty2] = this.getInitialTranslation();\n                                [tx2, ty2] = this.pageTranslationToScreen(tx2, ty2);\n                                const [pageWidth1, pageHeight1] = this.pageDimensions;\n                                const [pageX1, pageY1] = this.pageTranslation;\n                                let posX1, posY1;\n                                switch(this.rotation){\n                                    case 0:\n                                        posX1 = baseX1 + (position1[0] - pageX1) / pageWidth1;\n                                        posY1 = baseY1 + this.height - (position1[1] - pageY1) / pageHeight1;\n                                        break;\n                                    case 90:\n                                        posX1 = baseX1 + (position1[0] - pageX1) / pageWidth1;\n                                        posY1 = baseY1 - (position1[1] - pageY1) / pageHeight1;\n                                        [tx2, ty2] = [\n                                            ty2,\n                                            -tx2\n                                        ];\n                                        break;\n                                    case 180:\n                                        posX1 = baseX1 - this.width + (position1[0] - pageX1) / pageWidth1;\n                                        posY1 = baseY1 - (position1[1] - pageY1) / pageHeight1;\n                                        [tx2, ty2] = [\n                                            -tx2,\n                                            -ty2\n                                        ];\n                                        break;\n                                    case 270:\n                                        posX1 = baseX1 + (position1[0] - pageX1 - this.height * pageHeight1) / pageWidth1;\n                                        posY1 = baseY1 + (position1[1] - pageY1 - this.width * pageWidth1) / pageHeight1;\n                                        [tx2, ty2] = [\n                                            -ty2,\n                                            tx2\n                                        ];\n                                        break;\n                                }\n                                this.setAt(posX1 * parentWidth1, posY1 * parentHeight1, tx2, ty2);\n                            } else {\n                                this.setAt(baseX1 * parentWidth1, baseY1 * parentHeight1, this.width * parentWidth1, this.height * parentHeight1);\n                            }\n                            this.#setContent();\n                            this._isDraggable = true;\n                            this.editorDiv.contentEditable = false;\n                        } else {\n                            this._isDraggable = false;\n                            this.editorDiv.contentEditable = true;\n                        }\n                        return this.div;\n                    }\n                    #setContent() {\n                        this.editorDiv.replaceChildren();\n                        if (!this.#content) {\n                            return;\n                        }\n                        for (const line1 of this.#content.split(\"\\n\")){\n                            const div1 = document.createElement(\"div\");\n                            div1.append(line1 ? document.createTextNode(line1) : document.createElement(\"br\"));\n                            this.editorDiv.append(div1);\n                        }\n                    }\n                    get contentDiv() {\n                        return this.editorDiv;\n                    }\n                    static deserialize(data1, parent1, uiManager1) {\n                        let initialData1 = null;\n                        if (data1 instanceof _annotation_layer1.FreeTextAnnotationElement) {\n                            const { data: { defaultAppearanceData: { fontSize: fontSize1, fontColor: fontColor1 }, rect: rect3, rotation: rotation1, id: id1 }, textContent: textContent1, textPosition: textPosition1, parent: { page: { pageNumber: pageNumber1 } } } = data1;\n                            if (!textContent1 || textContent1.length === 0) {\n                                return null;\n                            }\n                            initialData1 = data1 = {\n                                annotationType: _util1.AnnotationEditorType.FREETEXT,\n                                color: Array.from(fontColor1),\n                                fontSize: fontSize1,\n                                value: textContent1.join(\"\\n\"),\n                                position: textPosition1,\n                                pageIndex: pageNumber1 - 1,\n                                rect: rect3,\n                                rotation: rotation1,\n                                id: id1,\n                                deleted: false\n                            };\n                        }\n                        const editor1 = super.deserialize(data1, parent1, uiManager1);\n                        editor1.#fontSize = data1.fontSize;\n                        editor1.#color = _util1.Util.makeHexColor(...data1.color);\n                        editor1.#content = data1.value;\n                        editor1.annotationElementId = data1.id || null;\n                        editor1.#initialData = initialData1;\n                        return editor1;\n                    }\n                    serialize(isForCopying1 = false) {\n                        if (this.isEmpty()) {\n                            return null;\n                        }\n                        if (this.deleted) {\n                            return {\n                                pageIndex: this.pageIndex,\n                                id: this.annotationElementId,\n                                deleted: true\n                            };\n                        }\n                        const padding1 = FreeTextEditor1._internalPadding * this.parentScale;\n                        const rect3 = this.getRect(padding1, padding1);\n                        const color1 = _editor1.AnnotationEditor._colorManager.convert(this.isAttachedToDOM ? getComputedStyle(this.editorDiv).color : this.#color);\n                        const serialized1 = {\n                            annotationType: _util1.AnnotationEditorType.FREETEXT,\n                            color: color1,\n                            fontSize: this.#fontSize,\n                            value: this.#content,\n                            pageIndex: this.pageIndex,\n                            rect: rect3,\n                            rotation: this.rotation,\n                            structTreeParentId: this._structTreeParentId\n                        };\n                        if (isForCopying1) {\n                            return serialized1;\n                        }\n                        if (this.annotationElementId && !this.#hasElementChanged(serialized1)) {\n                            return null;\n                        }\n                        serialized1.id = this.annotationElementId;\n                        return serialized1;\n                    }\n                    #hasElementChanged(serialized1) {\n                        const { value: value1, fontSize: fontSize1, color: color1, rect: rect3, pageIndex: pageIndex1 } = this.#initialData;\n                        return serialized1.value !== value1 || serialized1.fontSize !== fontSize1 || serialized1.rect.some((x4, i1)=>Math.abs(x4 - rect3[i1]) >= 1) || serialized1.color.some((c4, i1)=>c4 !== color1[i1]) || serialized1.pageIndex !== pageIndex1;\n                    }\n                    #cheatInitialRect(delayed1 = false) {\n                        if (!this.annotationElementId) {\n                            return;\n                        }\n                        this.#setEditorDimensions();\n                        if (!delayed1 && (this.width === 0 || this.height === 0)) {\n                            setTimeout(()=>this.#cheatInitialRect(true), 0);\n                            return;\n                        }\n                        const padding1 = FreeTextEditor1._internalPadding * this.parentScale;\n                        this.#initialData.rect = this.getRect(padding1, padding1);\n                    }\n                }\n                exports1.FreeTextEditor = FreeTextEditor1;\n            /***/ },\n            /* 29 */ /***/ (__unused_webpack_module1, exports1, __w_pdfjs_require__1)=>{\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                exports1.StampAnnotationElement = exports1.InkAnnotationElement = exports1.FreeTextAnnotationElement = exports1.AnnotationLayer = void 0;\n                var _util1 = __w_pdfjs_require__1(1);\n                var _display_utils1 = __w_pdfjs_require__1(6);\n                var _annotation_storage1 = __w_pdfjs_require__1(3);\n                var _scripting_utils1 = __w_pdfjs_require__1(30);\n                var _displayL10n_utils1 = __w_pdfjs_require__1(31);\n                var _xfa_layer1 = __w_pdfjs_require__1(32);\n                const DEFAULT_TAB_INDEX1 = 1000;\n                const DEFAULT_FONT_SIZE1 = 9;\n                const GetElementsByNameSet1 = new WeakSet();\n                function getRectDims1(rect3) {\n                    return {\n                        width: rect3[2] - rect3[0],\n                        height: rect3[3] - rect3[1]\n                    };\n                }\n                class AnnotationElementFactory1 {\n                    static create(parameters1) {\n                        const subtype1 = parameters1.data.annotationType;\n                        switch(subtype1){\n                            case _util1.AnnotationType.LINK:\n                                return new LinkAnnotationElement1(parameters1);\n                            case _util1.AnnotationType.TEXT:\n                                return new TextAnnotationElement1(parameters1);\n                            case _util1.AnnotationType.WIDGET:\n                                const fieldType1 = parameters1.data.fieldType;\n                                switch(fieldType1){\n                                    case \"Tx\":\n                                        return new TextWidgetAnnotationElement1(parameters1);\n                                    case \"Btn\":\n                                        if (parameters1.data.radioButton) {\n                                            return new RadioButtonWidgetAnnotationElement1(parameters1);\n                                        } else if (parameters1.data.checkBox) {\n                                            return new CheckboxWidgetAnnotationElement1(parameters1);\n                                        }\n                                        return new PushButtonWidgetAnnotationElement1(parameters1);\n                                    case \"Ch\":\n                                        return new ChoiceWidgetAnnotationElement1(parameters1);\n                                    case \"Sig\":\n                                        return new SignatureWidgetAnnotationElement1(parameters1);\n                                }\n                                return new WidgetAnnotationElement1(parameters1);\n                            case _util1.AnnotationType.POPUP:\n                                return new PopupAnnotationElement1(parameters1);\n                            case _util1.AnnotationType.FREETEXT:\n                                return new FreeTextAnnotationElement1(parameters1);\n                            case _util1.AnnotationType.LINE:\n                                return new LineAnnotationElement1(parameters1);\n                            case _util1.AnnotationType.SQUARE:\n                                return new SquareAnnotationElement1(parameters1);\n                            case _util1.AnnotationType.CIRCLE:\n                                return new CircleAnnotationElement1(parameters1);\n                            case _util1.AnnotationType.POLYLINE:\n                                return new PolylineAnnotationElement1(parameters1);\n                            case _util1.AnnotationType.CARET:\n                                return new CaretAnnotationElement1(parameters1);\n                            case _util1.AnnotationType.INK:\n                                return new InkAnnotationElement1(parameters1);\n                            case _util1.AnnotationType.POLYGON:\n                                return new PolygonAnnotationElement1(parameters1);\n                            case _util1.AnnotationType.HIGHLIGHT:\n                                return new HighlightAnnotationElement1(parameters1);\n                            case _util1.AnnotationType.UNDERLINE:\n                                return new UnderlineAnnotationElement1(parameters1);\n                            case _util1.AnnotationType.SQUIGGLY:\n                                return new SquigglyAnnotationElement1(parameters1);\n                            case _util1.AnnotationType.STRIKEOUT:\n                                return new StrikeOutAnnotationElement1(parameters1);\n                            case _util1.AnnotationType.STAMP:\n                                return new StampAnnotationElement1(parameters1);\n                            case _util1.AnnotationType.FILEATTACHMENT:\n                                return new FileAttachmentAnnotationElement1(parameters1);\n                            default:\n                                return new AnnotationElement1(parameters1);\n                        }\n                    }\n                }\n                class AnnotationElement1 {\n                    #hasBorder;\n                    constructor(parameters1, { isRenderable: isRenderable1 = false, ignoreBorder: ignoreBorder1 = false, createQuadrilaterals: createQuadrilaterals1 = false } = {}){\n                        this.#hasBorder = false;\n                        this.isRenderable = isRenderable1;\n                        this.data = parameters1.data;\n                        this.layer = parameters1.layer;\n                        this.linkService = parameters1.linkService;\n                        this.downloadManager = parameters1.downloadManager;\n                        this.imageResourcesPath = parameters1.imageResourcesPath;\n                        this.renderForms = parameters1.renderForms;\n                        this.svgFactory = parameters1.svgFactory;\n                        this.annotationStorage = parameters1.annotationStorage;\n                        this.enableScripting = parameters1.enableScripting;\n                        this.hasJSActions = parameters1.hasJSActions;\n                        this._fieldObjects = parameters1.fieldObjects;\n                        this.parent = parameters1.parent;\n                        if (isRenderable1) {\n                            this.container = this._createContainer(ignoreBorder1);\n                        }\n                        if (createQuadrilaterals1) {\n                            this._createQuadrilaterals();\n                        }\n                    }\n                    static _hasPopupData({ titleObj: titleObj1, contentsObj: contentsObj1, richText: richText1 }) {\n                        return !!(titleObj1?.str || contentsObj1?.str || richText1?.str);\n                    }\n                    get hasPopupData() {\n                        return AnnotationElement1._hasPopupData(this.data);\n                    }\n                    _createContainer(ignoreBorder1) {\n                        const { data: data1, parent: { page: page1, viewport: viewport1 } } = this;\n                        const container1 = document.createElement(\"section\");\n                        container1.setAttribute(\"data-annotation-id\", data1.id);\n                        if (!(this instanceof WidgetAnnotationElement1)) {\n                            container1.tabIndex = DEFAULT_TAB_INDEX1;\n                        }\n                        container1.style.zIndex = this.parent.zIndex++;\n                        if (this.data.popupRef) {\n                            container1.setAttribute(\"aria-haspopup\", \"dialog\");\n                        }\n                        if (data1.noRotate) {\n                            container1.classList.add(\"norotate\");\n                        }\n                        const { pageWidth: pageWidth1, pageHeight: pageHeight1, pageX: pageX1, pageY: pageY1 } = viewport1.rawDims;\n                        if (!data1.rect || this instanceof PopupAnnotationElement1) {\n                            const { rotation: rotation1 } = data1;\n                            if (!data1.hasOwnCanvas && rotation1 !== 0) {\n                                this.setRotation(rotation1, container1);\n                            }\n                            return container1;\n                        }\n                        const { width: width2, height: height1 } = getRectDims1(data1.rect);\n                        const rect3 = _util1.Util.normalizeRect([\n                            data1.rect[0],\n                            page1.view[3] - data1.rect[1] + page1.view[1],\n                            data1.rect[2],\n                            page1.view[3] - data1.rect[3] + page1.view[1]\n                        ]);\n                        if (!ignoreBorder1 && data1.borderStyle.width > 0) {\n                            container1.style.borderWidth = `${data1.borderStyle.width}px`;\n                            const horizontalRadius1 = data1.borderStyle.horizontalCornerRadius;\n                            const verticalRadius1 = data1.borderStyle.verticalCornerRadius;\n                            if (horizontalRadius1 > 0 || verticalRadius1 > 0) {\n                                const radius1 = `calc(${horizontalRadius1}px * var(--scale-factor)) / calc(${verticalRadius1}px * var(--scale-factor))`;\n                                container1.style.borderRadius = radius1;\n                            } else if (this instanceof RadioButtonWidgetAnnotationElement1) {\n                                const radius1 = `calc(${width2}px * var(--scale-factor)) / calc(${height1}px * var(--scale-factor))`;\n                                container1.style.borderRadius = radius1;\n                            }\n                            switch(data1.borderStyle.style){\n                                case _util1.AnnotationBorderStyleType.SOLID:\n                                    container1.style.borderStyle = \"solid\";\n                                    break;\n                                case _util1.AnnotationBorderStyleType.DASHED:\n                                    container1.style.borderStyle = \"dashed\";\n                                    break;\n                                case _util1.AnnotationBorderStyleType.BEVELED:\n                                    (0, _util1.warn)(\"Unimplemented border style: beveled\");\n                                    break;\n                                case _util1.AnnotationBorderStyleType.INSET:\n                                    (0, _util1.warn)(\"Unimplemented border style: inset\");\n                                    break;\n                                case _util1.AnnotationBorderStyleType.UNDERLINE:\n                                    container1.style.borderBottomStyle = \"solid\";\n                                    break;\n                                default:\n                                    break;\n                            }\n                            const borderColor1 = data1.borderColor || null;\n                            if (borderColor1) {\n                                this.#hasBorder = true;\n                                container1.style.borderColor = _util1.Util.makeHexColor(borderColor1[0] | 0, borderColor1[1] | 0, borderColor1[2] | 0);\n                            } else {\n                                container1.style.borderWidth = 0;\n                            }\n                        }\n                        container1.style.left = `${100 * (rect3[0] - pageX1) / pageWidth1}%`;\n                        container1.style.top = `${100 * (rect3[1] - pageY1) / pageHeight1}%`;\n                        const { rotation: rotation1 } = data1;\n                        if (data1.hasOwnCanvas || rotation1 === 0) {\n                            container1.style.width = `${100 * width2 / pageWidth1}%`;\n                            container1.style.height = `${100 * height1 / pageHeight1}%`;\n                        } else {\n                            this.setRotation(rotation1, container1);\n                        }\n                        return container1;\n                    }\n                    setRotation(angle1, container1 = this.container) {\n                        if (!this.data.rect) {\n                            return;\n                        }\n                        const { pageWidth: pageWidth1, pageHeight: pageHeight1 } = this.parent.viewport.rawDims;\n                        const { width: width2, height: height1 } = getRectDims1(this.data.rect);\n                        let elementWidth1, elementHeight1;\n                        if (angle1 % 180 === 0) {\n                            elementWidth1 = 100 * width2 / pageWidth1;\n                            elementHeight1 = 100 * height1 / pageHeight1;\n                        } else {\n                            elementWidth1 = 100 * height1 / pageWidth1;\n                            elementHeight1 = 100 * width2 / pageHeight1;\n                        }\n                        container1.style.width = `${elementWidth1}%`;\n                        container1.style.height = `${elementHeight1}%`;\n                        container1.setAttribute(\"data-main-rotation\", (360 - angle1) % 360);\n                    }\n                    get _commonActions() {\n                        const setColor1 = (jsName1, styleName1, event1)=>{\n                            const color1 = event1.detail[jsName1];\n                            const colorType1 = color1[0];\n                            const colorArray1 = color1.slice(1);\n                            event1.target.style[styleName1] = _scripting_utils1.ColorConverters[`${colorType1}_HTML`](colorArray1);\n                            this.annotationStorage.setValue(this.data.id, {\n                                [styleName1]: _scripting_utils1.ColorConverters[`${colorType1}_rgb`](colorArray1)\n                            });\n                        };\n                        return (0, _util1.shadow)(this, \"_commonActions\", {\n                            display: (event1)=>{\n                                const { display: display1 } = event1.detail;\n                                const hidden1 = display1 % 2 === 1;\n                                this.container.style.visibility = hidden1 ? \"hidden\" : \"visible\";\n                                this.annotationStorage.setValue(this.data.id, {\n                                    noView: hidden1,\n                                    noPrint: display1 === 1 || display1 === 2\n                                });\n                            },\n                            print: (event1)=>{\n                                this.annotationStorage.setValue(this.data.id, {\n                                    noPrint: !event1.detail.print\n                                });\n                            },\n                            hidden: (event1)=>{\n                                const { hidden: hidden1 } = event1.detail;\n                                this.container.style.visibility = hidden1 ? \"hidden\" : \"visible\";\n                                this.annotationStorage.setValue(this.data.id, {\n                                    noPrint: hidden1,\n                                    noView: hidden1\n                                });\n                            },\n                            focus: (event1)=>{\n                                setTimeout(()=>event1.target.focus({\n                                        preventScroll: false\n                                    }), 0);\n                            },\n                            userName: (event1)=>{\n                                event1.target.title = event1.detail.userName;\n                            },\n                            readonly: (event1)=>{\n                                event1.target.disabled = event1.detail.readonly;\n                            },\n                            required: (event1)=>{\n                                this._setRequired(event1.target, event1.detail.required);\n                            },\n                            bgColor: (event1)=>{\n                                setColor1(\"bgColor\", \"backgroundColor\", event1);\n                            },\n                            fillColor: (event1)=>{\n                                setColor1(\"fillColor\", \"backgroundColor\", event1);\n                            },\n                            fgColor: (event1)=>{\n                                setColor1(\"fgColor\", \"color\", event1);\n                            },\n                            textColor: (event1)=>{\n                                setColor1(\"textColor\", \"color\", event1);\n                            },\n                            borderColor: (event1)=>{\n                                setColor1(\"borderColor\", \"borderColor\", event1);\n                            },\n                            strokeColor: (event1)=>{\n                                setColor1(\"strokeColor\", \"borderColor\", event1);\n                            },\n                            rotation: (event1)=>{\n                                const angle1 = event1.detail.rotation;\n                                this.setRotation(angle1);\n                                this.annotationStorage.setValue(this.data.id, {\n                                    rotation: angle1\n                                });\n                            }\n                        });\n                    }\n                    _dispatchEventFromSandbox(actions1, jsEvent1) {\n                        const commonActions1 = this._commonActions;\n                        for (const name1 of Object.keys(jsEvent1.detail)){\n                            const action1 = actions1[name1] || commonActions1[name1];\n                            action1?.(jsEvent1);\n                        }\n                    }\n                    _setDefaultPropertiesFromJS(element1) {\n                        if (!this.enableScripting) {\n                            return;\n                        }\n                        const storedData1 = this.annotationStorage.getRawValue(this.data.id);\n                        if (!storedData1) {\n                            return;\n                        }\n                        const commonActions1 = this._commonActions;\n                        for (const [actionName1, detail1] of Object.entries(storedData1)){\n                            const action1 = commonActions1[actionName1];\n                            if (action1) {\n                                const eventProxy1 = {\n                                    detail: {\n                                        [actionName1]: detail1\n                                    },\n                                    target: element1\n                                };\n                                action1(eventProxy1);\n                                delete storedData1[actionName1];\n                            }\n                        }\n                    }\n                    _createQuadrilaterals() {\n                        if (!this.container) {\n                            return;\n                        }\n                        const { quadPoints: quadPoints1 } = this.data;\n                        if (!quadPoints1) {\n                            return;\n                        }\n                        const [rectBlX1, rectBlY1, rectTrX1, rectTrY1] = this.data.rect;\n                        if (quadPoints1.length === 1) {\n                            const [, { x: trX1, y: trY1 }, { x: blX1, y: blY1 }] = quadPoints1[0];\n                            if (rectTrX1 === trX1 && rectTrY1 === trY1 && rectBlX1 === blX1 && rectBlY1 === blY1) {\n                                return;\n                            }\n                        }\n                        const { style: style1 } = this.container;\n                        let svgBuffer1;\n                        if (this.#hasBorder) {\n                            const { borderColor: borderColor1, borderWidth: borderWidth1 } = style1;\n                            style1.borderWidth = 0;\n                            svgBuffer1 = [\n                                \"url('data:image/svg+xml;utf8,\",\n                                `<svg xmlns=\"http://www.w3.org/2000/svg\"`,\n                                ` preserveAspectRatio=\"none\" viewBox=\"0 0 1 1\">`,\n                                `<g fill=\"transparent\" stroke=\"${borderColor1}\" stroke-width=\"${borderWidth1}\">`\n                            ];\n                            this.container.classList.add(\"hasBorder\");\n                        }\n                        const width2 = rectTrX1 - rectBlX1;\n                        const height1 = rectTrY1 - rectBlY1;\n                        const { svgFactory: svgFactory1 } = this;\n                        const svg1 = svgFactory1.createElement(\"svg\");\n                        svg1.classList.add(\"quadrilateralsContainer\");\n                        svg1.setAttribute(\"width\", 0);\n                        svg1.setAttribute(\"height\", 0);\n                        const defs1 = svgFactory1.createElement(\"defs\");\n                        svg1.append(defs1);\n                        const clipPath1 = svgFactory1.createElement(\"clipPath\");\n                        const id1 = `clippath_${this.data.id}`;\n                        clipPath1.setAttribute(\"id\", id1);\n                        clipPath1.setAttribute(\"clipPathUnits\", \"objectBoundingBox\");\n                        defs1.append(clipPath1);\n                        for (const [, { x: trX1, y: trY1 }, { x: blX1, y: blY1 }] of quadPoints1){\n                            const rect3 = svgFactory1.createElement(\"rect\");\n                            const x4 = (blX1 - rectBlX1) / width2;\n                            const y4 = (rectTrY1 - trY1) / height1;\n                            const rectWidth1 = (trX1 - blX1) / width2;\n                            const rectHeight1 = (trY1 - blY1) / height1;\n                            rect3.setAttribute(\"x\", x4);\n                            rect3.setAttribute(\"y\", y4);\n                            rect3.setAttribute(\"width\", rectWidth1);\n                            rect3.setAttribute(\"height\", rectHeight1);\n                            clipPath1.append(rect3);\n                            svgBuffer1?.push(`<rect vector-effect=\"non-scaling-stroke\" x=\"${x4}\" y=\"${y4}\" width=\"${rectWidth1}\" height=\"${rectHeight1}\"/>`);\n                        }\n                        if (this.#hasBorder) {\n                            svgBuffer1.push(`</g></svg>')`);\n                            style1.backgroundImage = svgBuffer1.join(\"\");\n                        }\n                        this.container.append(svg1);\n                        this.container.style.clipPath = `url(#${id1})`;\n                    }\n                    _createPopup() {\n                        const { container: container1, data: data1 } = this;\n                        container1.setAttribute(\"aria-haspopup\", \"dialog\");\n                        const popup1 = new PopupAnnotationElement1({\n                            data: {\n                                color: data1.color,\n                                titleObj: data1.titleObj,\n                                modificationDate: data1.modificationDate,\n                                contentsObj: data1.contentsObj,\n                                richText: data1.richText,\n                                parentRect: data1.rect,\n                                borderStyle: 0,\n                                id: `popup_${data1.id}`,\n                                rotation: data1.rotation\n                            },\n                            parent: this.parent,\n                            elements: [\n                                this\n                            ]\n                        });\n                        this.parent.div.append(popup1.render());\n                    }\n                    render() {\n                        (0, _util1.unreachable)(\"Abstract method `AnnotationElement.render` called\");\n                    }\n                    _getElementsByName(name1, skipId1 = null) {\n                        const fields1 = [];\n                        if (this._fieldObjects) {\n                            const fieldObj1 = this._fieldObjects[name1];\n                            if (fieldObj1) {\n                                for (const { page: page1, id: id1, exportValues: exportValues1 } of fieldObj1){\n                                    if (page1 === -1) {\n                                        continue;\n                                    }\n                                    if (id1 === skipId1) {\n                                        continue;\n                                    }\n                                    const exportValue1 = typeof exportValues1 === \"string\" ? exportValues1 : null;\n                                    const domElement1 = document.querySelector(`[data-element-id=\"${id1}\"]`);\n                                    if (domElement1 && !GetElementsByNameSet1.has(domElement1)) {\n                                        (0, _util1.warn)(`_getElementsByName - element not allowed: ${id1}`);\n                                        continue;\n                                    }\n                                    fields1.push({\n                                        id: id1,\n                                        exportValue: exportValue1,\n                                        domElement: domElement1\n                                    });\n                                }\n                            }\n                            return fields1;\n                        }\n                        for (const domElement1 of document.getElementsByName(name1)){\n                            const { exportValue: exportValue1 } = domElement1;\n                            const id1 = domElement1.getAttribute(\"data-element-id\");\n                            if (id1 === skipId1) {\n                                continue;\n                            }\n                            if (!GetElementsByNameSet1.has(domElement1)) {\n                                continue;\n                            }\n                            fields1.push({\n                                id: id1,\n                                exportValue: exportValue1,\n                                domElement: domElement1\n                            });\n                        }\n                        return fields1;\n                    }\n                    show() {\n                        if (this.container) {\n                            this.container.hidden = false;\n                        }\n                        this.popup?.maybeShow();\n                    }\n                    hide() {\n                        if (this.container) {\n                            this.container.hidden = true;\n                        }\n                        this.popup?.forceHide();\n                    }\n                    getElementsToTriggerPopup() {\n                        return this.container;\n                    }\n                    addHighlightArea() {\n                        const triggers1 = this.getElementsToTriggerPopup();\n                        if (Array.isArray(triggers1)) {\n                            for (const element1 of triggers1){\n                                element1.classList.add(\"highlightArea\");\n                            }\n                        } else {\n                            triggers1.classList.add(\"highlightArea\");\n                        }\n                    }\n                    _editOnDoubleClick() {\n                        const { annotationEditorType: mode1, data: { id: editId1 } } = this;\n                        this.container.addEventListener(\"dblclick\", ()=>{\n                            this.linkService.eventBus?.dispatch(\"switchannotationeditormode\", {\n                                source: this,\n                                mode: mode1,\n                                editId: editId1\n                            });\n                        });\n                    }\n                }\n                class LinkAnnotationElement1 extends AnnotationElement1 {\n                    constructor(parameters1, options1 = null){\n                        super(parameters1, {\n                            isRenderable: true,\n                            ignoreBorder: !!options1?.ignoreBorder,\n                            createQuadrilaterals: true\n                        });\n                        this.isTooltipOnly = parameters1.data.isTooltipOnly;\n                    }\n                    render() {\n                        const { data: data1, linkService: linkService1 } = this;\n                        const link1 = document.createElement(\"a\");\n                        link1.setAttribute(\"data-element-id\", data1.id);\n                        let isBound1 = false;\n                        if (data1.url) {\n                            linkService1.addLinkAttributes(link1, data1.url, data1.newWindow);\n                            isBound1 = true;\n                        } else if (data1.action) {\n                            this._bindNamedAction(link1, data1.action);\n                            isBound1 = true;\n                        } else if (data1.attachment) {\n                            this._bindAttachment(link1, data1.attachment);\n                            isBound1 = true;\n                        } else if (data1.setOCGState) {\n                            this.#bindSetOCGState(link1, data1.setOCGState);\n                            isBound1 = true;\n                        } else if (data1.dest) {\n                            this._bindLink(link1, data1.dest);\n                            isBound1 = true;\n                        } else {\n                            if (data1.actions && (data1.actions.Action || data1.actions[\"Mouse Up\"] || data1.actions[\"Mouse Down\"]) && this.enableScripting && this.hasJSActions) {\n                                this._bindJSAction(link1, data1);\n                                isBound1 = true;\n                            }\n                            if (data1.resetForm) {\n                                this._bindResetFormAction(link1, data1.resetForm);\n                                isBound1 = true;\n                            } else if (this.isTooltipOnly && !isBound1) {\n                                this._bindLink(link1, \"\");\n                                isBound1 = true;\n                            }\n                        }\n                        this.container.classList.add(\"linkAnnotation\");\n                        if (isBound1) {\n                            this.container.append(link1);\n                        }\n                        return this.container;\n                    }\n                    #setInternalLink() {\n                        this.container.setAttribute(\"data-internal-link\", \"\");\n                    }\n                    _bindLink(link1, destination1) {\n                        link1.href = this.linkService.getDestinationHash(destination1);\n                        link1.onclick = ()=>{\n                            if (destination1) {\n                                this.linkService.goToDestination(destination1);\n                            }\n                            return false;\n                        };\n                        if (destination1 || destination1 === \"\") {\n                            this.#setInternalLink();\n                        }\n                    }\n                    _bindNamedAction(link1, action1) {\n                        link1.href = this.linkService.getAnchorUrl(\"\");\n                        link1.onclick = ()=>{\n                            this.linkService.executeNamedAction(action1);\n                            return false;\n                        };\n                        this.#setInternalLink();\n                    }\n                    _bindAttachment(link1, attachment1) {\n                        link1.href = this.linkService.getAnchorUrl(\"\");\n                        link1.onclick = ()=>{\n                            this.downloadManager?.openOrDownloadData(this.container, attachment1.content, attachment1.filename);\n                            return false;\n                        };\n                        this.#setInternalLink();\n                    }\n                    #bindSetOCGState(link1, action1) {\n                        link1.href = this.linkService.getAnchorUrl(\"\");\n                        link1.onclick = ()=>{\n                            this.linkService.executeSetOCGState(action1);\n                            return false;\n                        };\n                        this.#setInternalLink();\n                    }\n                    _bindJSAction(link1, data1) {\n                        link1.href = this.linkService.getAnchorUrl(\"\");\n                        const map1 = new Map([\n                            [\n                                \"Action\",\n                                \"onclick\"\n                            ],\n                            [\n                                \"Mouse Up\",\n                                \"onmouseup\"\n                            ],\n                            [\n                                \"Mouse Down\",\n                                \"onmousedown\"\n                            ]\n                        ]);\n                        for (const name1 of Object.keys(data1.actions)){\n                            const jsName1 = map1.get(name1);\n                            if (!jsName1) {\n                                continue;\n                            }\n                            link1[jsName1] = ()=>{\n                                this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                                    source: this,\n                                    detail: {\n                                        id: data1.id,\n                                        name: name1\n                                    }\n                                });\n                                return false;\n                            };\n                        }\n                        if (!link1.onclick) {\n                            link1.onclick = ()=>false;\n                        }\n                        this.#setInternalLink();\n                    }\n                    _bindResetFormAction(link1, resetForm1) {\n                        const otherClickAction1 = link1.onclick;\n                        if (!otherClickAction1) {\n                            link1.href = this.linkService.getAnchorUrl(\"\");\n                        }\n                        this.#setInternalLink();\n                        if (!this._fieldObjects) {\n                            (0, _util1.warn)(`_bindResetFormAction - \"resetForm\" action not supported, ` + \"ensure that the `fieldObjects` parameter is provided.\");\n                            if (!otherClickAction1) {\n                                link1.onclick = ()=>false;\n                            }\n                            return;\n                        }\n                        link1.onclick = ()=>{\n                            otherClickAction1?.();\n                            const { fields: resetFormFields1, refs: resetFormRefs1, include: include1 } = resetForm1;\n                            const allFields1 = [];\n                            if (resetFormFields1.length !== 0 || resetFormRefs1.length !== 0) {\n                                const fieldIds1 = new Set(resetFormRefs1);\n                                for (const fieldName1 of resetFormFields1){\n                                    const fields1 = this._fieldObjects[fieldName1] || [];\n                                    for (const { id: id1 } of fields1){\n                                        fieldIds1.add(id1);\n                                    }\n                                }\n                                for (const fields1 of Object.values(this._fieldObjects)){\n                                    for (const field1 of fields1){\n                                        if (fieldIds1.has(field1.id) === include1) {\n                                            allFields1.push(field1);\n                                        }\n                                    }\n                                }\n                            } else {\n                                for (const fields1 of Object.values(this._fieldObjects)){\n                                    allFields1.push(...fields1);\n                                }\n                            }\n                            const storage1 = this.annotationStorage;\n                            const allIds1 = [];\n                            for (const field1 of allFields1){\n                                const { id: id1 } = field1;\n                                allIds1.push(id1);\n                                switch(field1.type){\n                                    case \"text\":\n                                        {\n                                            const value1 = field1.defaultValue || \"\";\n                                            storage1.setValue(id1, {\n                                                value: value1\n                                            });\n                                            break;\n                                        }\n                                    case \"checkbox\":\n                                    case \"radiobutton\":\n                                        {\n                                            const value1 = field1.defaultValue === field1.exportValues;\n                                            storage1.setValue(id1, {\n                                                value: value1\n                                            });\n                                            break;\n                                        }\n                                    case \"combobox\":\n                                    case \"listbox\":\n                                        {\n                                            const value1 = field1.defaultValue || \"\";\n                                            storage1.setValue(id1, {\n                                                value: value1\n                                            });\n                                            break;\n                                        }\n                                    default:\n                                        continue;\n                                }\n                                const domElement1 = document.querySelector(`[data-element-id=\"${id1}\"]`);\n                                if (!domElement1) {\n                                    continue;\n                                } else if (!GetElementsByNameSet1.has(domElement1)) {\n                                    (0, _util1.warn)(`_bindResetFormAction - element not allowed: ${id1}`);\n                                    continue;\n                                }\n                                domElement1.dispatchEvent(new Event(\"resetform\"));\n                            }\n                            if (this.enableScripting) {\n                                this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                                    source: this,\n                                    detail: {\n                                        id: \"app\",\n                                        ids: allIds1,\n                                        name: \"ResetForm\"\n                                    }\n                                });\n                            }\n                            return false;\n                        };\n                    }\n                }\n                class TextAnnotationElement1 extends AnnotationElement1 {\n                    constructor(parameters1){\n                        super(parameters1, {\n                            isRenderable: true\n                        });\n                    }\n                    render() {\n                        this.container.classList.add(\"textAnnotation\");\n                        const image1 = document.createElement(\"img\");\n                        image1.src = this.imageResourcesPath + \"annotation-\" + this.data.name.toLowerCase() + \".svg\";\n                        image1.alt = \"[{{type}} Annotation]\";\n                        image1.dataset.l10nId = \"text_annotation_type\";\n                        image1.dataset.l10nArgs = JSON.stringify({\n                            type: this.data.name\n                        });\n                        if (!this.data.popupRef && this.hasPopupData) {\n                            this._createPopup();\n                        }\n                        this.container.append(image1);\n                        return this.container;\n                    }\n                }\n                class WidgetAnnotationElement1 extends AnnotationElement1 {\n                    render() {\n                        if (this.data.alternativeText) {\n                            this.container.title = this.data.alternativeText;\n                        }\n                        return this.container;\n                    }\n                    showElementAndHideCanvas(element1) {\n                        if (this.data.hasOwnCanvas) {\n                            if (element1.previousSibling?.nodeName === \"CANVAS\") {\n                                element1.previousSibling.hidden = true;\n                            }\n                            element1.hidden = false;\n                        }\n                    }\n                    _getKeyModifier(event1) {\n                        const { isWin: isWin1, isMac: isMac1 } = _util1.FeatureTest.platform;\n                        return isWin1 && event1.ctrlKey || isMac1 && event1.metaKey;\n                    }\n                    _setEventListener(element1, elementData1, baseName1, eventName1, valueGetter1) {\n                        if (baseName1.includes(\"mouse\")) {\n                            element1.addEventListener(baseName1, (event1)=>{\n                                this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                                    source: this,\n                                    detail: {\n                                        id: this.data.id,\n                                        name: eventName1,\n                                        value: valueGetter1(event1),\n                                        shift: event1.shiftKey,\n                                        modifier: this._getKeyModifier(event1)\n                                    }\n                                });\n                            });\n                        } else {\n                            element1.addEventListener(baseName1, (event1)=>{\n                                if (baseName1 === \"blur\") {\n                                    if (!elementData1.focused || !event1.relatedTarget) {\n                                        return;\n                                    }\n                                    elementData1.focused = false;\n                                } else if (baseName1 === \"focus\") {\n                                    if (elementData1.focused) {\n                                        return;\n                                    }\n                                    elementData1.focused = true;\n                                }\n                                if (!valueGetter1) {\n                                    return;\n                                }\n                                this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                                    source: this,\n                                    detail: {\n                                        id: this.data.id,\n                                        name: eventName1,\n                                        value: valueGetter1(event1)\n                                    }\n                                });\n                            });\n                        }\n                    }\n                    _setEventListeners(element1, elementData1, names1, getter1) {\n                        for (const [baseName1, eventName1] of names1){\n                            if (eventName1 === \"Action\" || this.data.actions?.[eventName1]) {\n                                if (eventName1 === \"Focus\" || eventName1 === \"Blur\") {\n                                    elementData1 ||= {\n                                        focused: false\n                                    };\n                                }\n                                this._setEventListener(element1, elementData1, baseName1, eventName1, getter1);\n                                if (eventName1 === \"Focus\" && !this.data.actions?.Blur) {\n                                    this._setEventListener(element1, elementData1, \"blur\", \"Blur\", null);\n                                } else if (eventName1 === \"Blur\" && !this.data.actions?.Focus) {\n                                    this._setEventListener(element1, elementData1, \"focus\", \"Focus\", null);\n                                }\n                            }\n                        }\n                    }\n                    _setBackgroundColor(element1) {\n                        const color1 = this.data.backgroundColor || null;\n                        element1.style.backgroundColor = color1 === null ? \"transparent\" : _util1.Util.makeHexColor(color1[0], color1[1], color1[2]);\n                    }\n                    _setTextStyle(element1) {\n                        const TEXT_ALIGNMENT1 = [\n                            \"left\",\n                            \"center\",\n                            \"right\"\n                        ];\n                        const { fontColor: fontColor1 } = this.data.defaultAppearanceData;\n                        const fontSize1 = this.data.defaultAppearanceData.fontSize || DEFAULT_FONT_SIZE1;\n                        const style1 = element1.style;\n                        let computedFontSize1;\n                        const BORDER_SIZE1 = 2;\n                        const roundToOneDecimal1 = (x4)=>Math.round(10 * x4) / 10;\n                        if (this.data.multiLine) {\n                            const height1 = Math.abs(this.data.rect[3] - this.data.rect[1] - BORDER_SIZE1);\n                            const numberOfLines1 = Math.round(height1 / (_util1.LINE_FACTOR * fontSize1)) || 1;\n                            const lineHeight1 = height1 / numberOfLines1;\n                            computedFontSize1 = Math.min(fontSize1, roundToOneDecimal1(lineHeight1 / _util1.LINE_FACTOR));\n                        } else {\n                            const height1 = Math.abs(this.data.rect[3] - this.data.rect[1] - BORDER_SIZE1);\n                            computedFontSize1 = Math.min(fontSize1, roundToOneDecimal1(height1 / _util1.LINE_FACTOR));\n                        }\n                        style1.fontSize = `calc(${computedFontSize1}px * var(--scale-factor))`;\n                        style1.color = _util1.Util.makeHexColor(fontColor1[0], fontColor1[1], fontColor1[2]);\n                        if (this.data.textAlignment !== null) {\n                            style1.textAlign = TEXT_ALIGNMENT1[this.data.textAlignment];\n                        }\n                    }\n                    _setRequired(element1, isRequired1) {\n                        if (isRequired1) {\n                            element1.setAttribute(\"required\", true);\n                        } else {\n                            element1.removeAttribute(\"required\");\n                        }\n                        element1.setAttribute(\"aria-required\", isRequired1);\n                    }\n                }\n                class TextWidgetAnnotationElement1 extends WidgetAnnotationElement1 {\n                    constructor(parameters1){\n                        const isRenderable1 = parameters1.renderForms || !parameters1.data.hasAppearance && !!parameters1.data.fieldValue;\n                        super(parameters1, {\n                            isRenderable: isRenderable1\n                        });\n                    }\n                    setPropertyOnSiblings(base1, key1, value1, keyInStorage1) {\n                        const storage1 = this.annotationStorage;\n                        for (const element1 of this._getElementsByName(base1.name, base1.id)){\n                            if (element1.domElement) {\n                                element1.domElement[key1] = value1;\n                            }\n                            storage1.setValue(element1.id, {\n                                [keyInStorage1]: value1\n                            });\n                        }\n                    }\n                    render() {\n                        const storage1 = this.annotationStorage;\n                        const id1 = this.data.id;\n                        this.container.classList.add(\"textWidgetAnnotation\");\n                        let element1 = null;\n                        if (this.renderForms) {\n                            const storedData1 = storage1.getValue(id1, {\n                                value: this.data.fieldValue\n                            });\n                            let textContent1 = storedData1.value || \"\";\n                            const maxLen1 = storage1.getValue(id1, {\n                                charLimit: this.data.maxLen\n                            }).charLimit;\n                            if (maxLen1 && textContent1.length > maxLen1) {\n                                textContent1 = textContent1.slice(0, maxLen1);\n                            }\n                            let fieldFormattedValues1 = storedData1.formattedValue || this.data.textContent?.join(\"\\n\") || null;\n                            if (fieldFormattedValues1 && this.data.comb) {\n                                fieldFormattedValues1 = fieldFormattedValues1.replaceAll(/\\s+/g, \"\");\n                            }\n                            const elementData1 = {\n                                userValue: textContent1,\n                                formattedValue: fieldFormattedValues1,\n                                lastCommittedValue: null,\n                                commitKey: 1,\n                                focused: false\n                            };\n                            if (this.data.multiLine) {\n                                element1 = document.createElement(\"textarea\");\n                                element1.textContent = fieldFormattedValues1 ?? textContent1;\n                                if (this.data.doNotScroll) {\n                                    element1.style.overflowY = \"hidden\";\n                                }\n                            } else {\n                                element1 = document.createElement(\"input\");\n                                element1.type = \"text\";\n                                element1.setAttribute(\"value\", fieldFormattedValues1 ?? textContent1);\n                                if (this.data.doNotScroll) {\n                                    element1.style.overflowX = \"hidden\";\n                                }\n                            }\n                            if (this.data.hasOwnCanvas) {\n                                element1.hidden = true;\n                            }\n                            GetElementsByNameSet1.add(element1);\n                            element1.setAttribute(\"data-element-id\", id1);\n                            element1.disabled = this.data.readOnly;\n                            element1.name = this.data.fieldName;\n                            element1.tabIndex = DEFAULT_TAB_INDEX1;\n                            this._setRequired(element1, this.data.required);\n                            if (maxLen1) {\n                                element1.maxLength = maxLen1;\n                            }\n                            element1.addEventListener(\"input\", (event1)=>{\n                                storage1.setValue(id1, {\n                                    value: event1.target.value\n                                });\n                                this.setPropertyOnSiblings(element1, \"value\", event1.target.value, \"value\");\n                                elementData1.formattedValue = null;\n                            });\n                            element1.addEventListener(\"resetform\", (event1)=>{\n                                const defaultValue1 = this.data.defaultFieldValue ?? \"\";\n                                element1.value = elementData1.userValue = defaultValue1;\n                                elementData1.formattedValue = null;\n                            });\n                            let blurListener1 = (event1)=>{\n                                const { formattedValue: formattedValue1 } = elementData1;\n                                if (formattedValue1 !== null && formattedValue1 !== undefined) {\n                                    event1.target.value = formattedValue1;\n                                }\n                                event1.target.scrollLeft = 0;\n                            };\n                            if (this.enableScripting && this.hasJSActions) {\n                                element1.addEventListener(\"focus\", (event1)=>{\n                                    if (elementData1.focused) {\n                                        return;\n                                    }\n                                    const { target: target1 } = event1;\n                                    if (elementData1.userValue) {\n                                        target1.value = elementData1.userValue;\n                                    }\n                                    elementData1.lastCommittedValue = target1.value;\n                                    elementData1.commitKey = 1;\n                                    elementData1.focused = true;\n                                });\n                                element1.addEventListener(\"updatefromsandbox\", (jsEvent1)=>{\n                                    this.showElementAndHideCanvas(jsEvent1.target);\n                                    const actions1 = {\n                                        value (event1) {\n                                            elementData1.userValue = event1.detail.value ?? \"\";\n                                            storage1.setValue(id1, {\n                                                value: elementData1.userValue.toString()\n                                            });\n                                            event1.target.value = elementData1.userValue;\n                                        },\n                                        formattedValue (event1) {\n                                            const { formattedValue: formattedValue1 } = event1.detail;\n                                            elementData1.formattedValue = formattedValue1;\n                                            if (formattedValue1 !== null && formattedValue1 !== undefined && event1.target !== document.activeElement) {\n                                                event1.target.value = formattedValue1;\n                                            }\n                                            storage1.setValue(id1, {\n                                                formattedValue: formattedValue1\n                                            });\n                                        },\n                                        selRange (event1) {\n                                            event1.target.setSelectionRange(...event1.detail.selRange);\n                                        },\n                                        charLimit: (event1)=>{\n                                            const { charLimit: charLimit1 } = event1.detail;\n                                            const { target: target1 } = event1;\n                                            if (charLimit1 === 0) {\n                                                target1.removeAttribute(\"maxLength\");\n                                                return;\n                                            }\n                                            target1.setAttribute(\"maxLength\", charLimit1);\n                                            let value1 = elementData1.userValue;\n                                            if (!value1 || value1.length <= charLimit1) {\n                                                return;\n                                            }\n                                            value1 = value1.slice(0, charLimit1);\n                                            target1.value = elementData1.userValue = value1;\n                                            storage1.setValue(id1, {\n                                                value: value1\n                                            });\n                                            this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                                                source: this,\n                                                detail: {\n                                                    id: id1,\n                                                    name: \"Keystroke\",\n                                                    value: value1,\n                                                    willCommit: true,\n                                                    commitKey: 1,\n                                                    selStart: target1.selectionStart,\n                                                    selEnd: target1.selectionEnd\n                                                }\n                                            });\n                                        }\n                                    };\n                                    this._dispatchEventFromSandbox(actions1, jsEvent1);\n                                });\n                                element1.addEventListener(\"keydown\", (event1)=>{\n                                    elementData1.commitKey = 1;\n                                    let commitKey1 = -1;\n                                    if (event1.key === \"Escape\") {\n                                        commitKey1 = 0;\n                                    } else if (event1.key === \"Enter\" && !this.data.multiLine) {\n                                        commitKey1 = 2;\n                                    } else if (event1.key === \"Tab\") {\n                                        elementData1.commitKey = 3;\n                                    }\n                                    if (commitKey1 === -1) {\n                                        return;\n                                    }\n                                    const { value: value1 } = event1.target;\n                                    if (elementData1.lastCommittedValue === value1) {\n                                        return;\n                                    }\n                                    elementData1.lastCommittedValue = value1;\n                                    elementData1.userValue = value1;\n                                    this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                                        source: this,\n                                        detail: {\n                                            id: id1,\n                                            name: \"Keystroke\",\n                                            value: value1,\n                                            willCommit: true,\n                                            commitKey: commitKey1,\n                                            selStart: event1.target.selectionStart,\n                                            selEnd: event1.target.selectionEnd\n                                        }\n                                    });\n                                });\n                                const _blurListener1 = blurListener1;\n                                blurListener1 = null;\n                                element1.addEventListener(\"blur\", (event1)=>{\n                                    if (!elementData1.focused || !event1.relatedTarget) {\n                                        return;\n                                    }\n                                    elementData1.focused = false;\n                                    const { value: value1 } = event1.target;\n                                    elementData1.userValue = value1;\n                                    if (elementData1.lastCommittedValue !== value1) {\n                                        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                                            source: this,\n                                            detail: {\n                                                id: id1,\n                                                name: \"Keystroke\",\n                                                value: value1,\n                                                willCommit: true,\n                                                commitKey: elementData1.commitKey,\n                                                selStart: event1.target.selectionStart,\n                                                selEnd: event1.target.selectionEnd\n                                            }\n                                        });\n                                    }\n                                    _blurListener1(event1);\n                                });\n                                if (this.data.actions?.Keystroke) {\n                                    element1.addEventListener(\"beforeinput\", (event1)=>{\n                                        elementData1.lastCommittedValue = null;\n                                        const { data: data1, target: target1 } = event1;\n                                        const { value: value1, selectionStart: selectionStart1, selectionEnd: selectionEnd1 } = target1;\n                                        let selStart1 = selectionStart1, selEnd1 = selectionEnd1;\n                                        switch(event1.inputType){\n                                            case \"deleteWordBackward\":\n                                                {\n                                                    const match1 = value1.substring(0, selectionStart1).match(/\\w*[^\\w]*$/);\n                                                    if (match1) {\n                                                        selStart1 -= match1[0].length;\n                                                    }\n                                                    break;\n                                                }\n                                            case \"deleteWordForward\":\n                                                {\n                                                    const match1 = value1.substring(selectionStart1).match(/^[^\\w]*\\w*/);\n                                                    if (match1) {\n                                                        selEnd1 += match1[0].length;\n                                                    }\n                                                    break;\n                                                }\n                                            case \"deleteContentBackward\":\n                                                if (selectionStart1 === selectionEnd1) {\n                                                    selStart1 -= 1;\n                                                }\n                                                break;\n                                            case \"deleteContentForward\":\n                                                if (selectionStart1 === selectionEnd1) {\n                                                    selEnd1 += 1;\n                                                }\n                                                break;\n                                        }\n                                        event1.preventDefault();\n                                        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                                            source: this,\n                                            detail: {\n                                                id: id1,\n                                                name: \"Keystroke\",\n                                                value: value1,\n                                                change: data1 || \"\",\n                                                willCommit: false,\n                                                selStart: selStart1,\n                                                selEnd: selEnd1\n                                            }\n                                        });\n                                    });\n                                }\n                                this._setEventListeners(element1, elementData1, [\n                                    [\n                                        \"focus\",\n                                        \"Focus\"\n                                    ],\n                                    [\n                                        \"blur\",\n                                        \"Blur\"\n                                    ],\n                                    [\n                                        \"mousedown\",\n                                        \"Mouse Down\"\n                                    ],\n                                    [\n                                        \"mouseenter\",\n                                        \"Mouse Enter\"\n                                    ],\n                                    [\n                                        \"mouseleave\",\n                                        \"Mouse Exit\"\n                                    ],\n                                    [\n                                        \"mouseup\",\n                                        \"Mouse Up\"\n                                    ]\n                                ], (event1)=>event1.target.value);\n                            }\n                            if (blurListener1) {\n                                element1.addEventListener(\"blur\", blurListener1);\n                            }\n                            if (this.data.comb) {\n                                const fieldWidth1 = this.data.rect[2] - this.data.rect[0];\n                                const combWidth1 = fieldWidth1 / maxLen1;\n                                element1.classList.add(\"comb\");\n                                element1.style.letterSpacing = `calc(${combWidth1}px * var(--scale-factor) - 1ch)`;\n                            }\n                        } else {\n                            element1 = document.createElement(\"div\");\n                            element1.textContent = this.data.fieldValue;\n                            element1.style.verticalAlign = \"middle\";\n                            element1.style.display = \"table-cell\";\n                        }\n                        this._setTextStyle(element1);\n                        this._setBackgroundColor(element1);\n                        this._setDefaultPropertiesFromJS(element1);\n                        this.container.append(element1);\n                        return this.container;\n                    }\n                }\n                class SignatureWidgetAnnotationElement1 extends WidgetAnnotationElement1 {\n                    constructor(parameters1){\n                        super(parameters1, {\n                            isRenderable: !!parameters1.data.hasOwnCanvas\n                        });\n                    }\n                }\n                class CheckboxWidgetAnnotationElement1 extends WidgetAnnotationElement1 {\n                    constructor(parameters1){\n                        super(parameters1, {\n                            isRenderable: parameters1.renderForms\n                        });\n                    }\n                    render() {\n                        const storage1 = this.annotationStorage;\n                        const data1 = this.data;\n                        const id1 = data1.id;\n                        let value1 = storage1.getValue(id1, {\n                            value: data1.exportValue === data1.fieldValue\n                        }).value;\n                        if (typeof value1 === \"string\") {\n                            value1 = value1 !== \"Off\";\n                            storage1.setValue(id1, {\n                                value: value1\n                            });\n                        }\n                        this.container.classList.add(\"buttonWidgetAnnotation\", \"checkBox\");\n                        const element1 = document.createElement(\"input\");\n                        GetElementsByNameSet1.add(element1);\n                        element1.setAttribute(\"data-element-id\", id1);\n                        element1.disabled = data1.readOnly;\n                        this._setRequired(element1, this.data.required);\n                        element1.type = \"checkbox\";\n                        element1.name = data1.fieldName;\n                        if (value1) {\n                            element1.setAttribute(\"checked\", true);\n                        }\n                        element1.setAttribute(\"exportValue\", data1.exportValue);\n                        element1.tabIndex = DEFAULT_TAB_INDEX1;\n                        element1.addEventListener(\"change\", (event1)=>{\n                            const { name: name1, checked: checked1 } = event1.target;\n                            for (const checkbox1 of this._getElementsByName(name1, id1)){\n                                const curChecked1 = checked1 && checkbox1.exportValue === data1.exportValue;\n                                if (checkbox1.domElement) {\n                                    checkbox1.domElement.checked = curChecked1;\n                                }\n                                storage1.setValue(checkbox1.id, {\n                                    value: curChecked1\n                                });\n                            }\n                            storage1.setValue(id1, {\n                                value: checked1\n                            });\n                        });\n                        element1.addEventListener(\"resetform\", (event1)=>{\n                            const defaultValue1 = data1.defaultFieldValue || \"Off\";\n                            event1.target.checked = defaultValue1 === data1.exportValue;\n                        });\n                        if (this.enableScripting && this.hasJSActions) {\n                            element1.addEventListener(\"updatefromsandbox\", (jsEvent1)=>{\n                                const actions1 = {\n                                    value (event1) {\n                                        event1.target.checked = event1.detail.value !== \"Off\";\n                                        storage1.setValue(id1, {\n                                            value: event1.target.checked\n                                        });\n                                    }\n                                };\n                                this._dispatchEventFromSandbox(actions1, jsEvent1);\n                            });\n                            this._setEventListeners(element1, null, [\n                                [\n                                    \"change\",\n                                    \"Validate\"\n                                ],\n                                [\n                                    \"change\",\n                                    \"Action\"\n                                ],\n                                [\n                                    \"focus\",\n                                    \"Focus\"\n                                ],\n                                [\n                                    \"blur\",\n                                    \"Blur\"\n                                ],\n                                [\n                                    \"mousedown\",\n                                    \"Mouse Down\"\n                                ],\n                                [\n                                    \"mouseenter\",\n                                    \"Mouse Enter\"\n                                ],\n                                [\n                                    \"mouseleave\",\n                                    \"Mouse Exit\"\n                                ],\n                                [\n                                    \"mouseup\",\n                                    \"Mouse Up\"\n                                ]\n                            ], (event1)=>event1.target.checked);\n                        }\n                        this._setBackgroundColor(element1);\n                        this._setDefaultPropertiesFromJS(element1);\n                        this.container.append(element1);\n                        return this.container;\n                    }\n                }\n                class RadioButtonWidgetAnnotationElement1 extends WidgetAnnotationElement1 {\n                    constructor(parameters1){\n                        super(parameters1, {\n                            isRenderable: parameters1.renderForms\n                        });\n                    }\n                    render() {\n                        this.container.classList.add(\"buttonWidgetAnnotation\", \"radioButton\");\n                        const storage1 = this.annotationStorage;\n                        const data1 = this.data;\n                        const id1 = data1.id;\n                        let value1 = storage1.getValue(id1, {\n                            value: data1.fieldValue === data1.buttonValue\n                        }).value;\n                        if (typeof value1 === \"string\") {\n                            value1 = value1 !== data1.buttonValue;\n                            storage1.setValue(id1, {\n                                value: value1\n                            });\n                        }\n                        const element1 = document.createElement(\"input\");\n                        GetElementsByNameSet1.add(element1);\n                        element1.setAttribute(\"data-element-id\", id1);\n                        element1.disabled = data1.readOnly;\n                        this._setRequired(element1, this.data.required);\n                        element1.type = \"radio\";\n                        element1.name = data1.fieldName;\n                        if (value1) {\n                            element1.setAttribute(\"checked\", true);\n                        }\n                        element1.tabIndex = DEFAULT_TAB_INDEX1;\n                        element1.addEventListener(\"change\", (event1)=>{\n                            const { name: name1, checked: checked1 } = event1.target;\n                            for (const radio1 of this._getElementsByName(name1, id1)){\n                                storage1.setValue(radio1.id, {\n                                    value: false\n                                });\n                            }\n                            storage1.setValue(id1, {\n                                value: checked1\n                            });\n                        });\n                        element1.addEventListener(\"resetform\", (event1)=>{\n                            const defaultValue1 = data1.defaultFieldValue;\n                            event1.target.checked = defaultValue1 !== null && defaultValue1 !== undefined && defaultValue1 === data1.buttonValue;\n                        });\n                        if (this.enableScripting && this.hasJSActions) {\n                            const pdfButtonValue1 = data1.buttonValue;\n                            element1.addEventListener(\"updatefromsandbox\", (jsEvent1)=>{\n                                const actions1 = {\n                                    value: (event1)=>{\n                                        const checked1 = pdfButtonValue1 === event1.detail.value;\n                                        for (const radio1 of this._getElementsByName(event1.target.name)){\n                                            const curChecked1 = checked1 && radio1.id === id1;\n                                            if (radio1.domElement) {\n                                                radio1.domElement.checked = curChecked1;\n                                            }\n                                            storage1.setValue(radio1.id, {\n                                                value: curChecked1\n                                            });\n                                        }\n                                    }\n                                };\n                                this._dispatchEventFromSandbox(actions1, jsEvent1);\n                            });\n                            this._setEventListeners(element1, null, [\n                                [\n                                    \"change\",\n                                    \"Validate\"\n                                ],\n                                [\n                                    \"change\",\n                                    \"Action\"\n                                ],\n                                [\n                                    \"focus\",\n                                    \"Focus\"\n                                ],\n                                [\n                                    \"blur\",\n                                    \"Blur\"\n                                ],\n                                [\n                                    \"mousedown\",\n                                    \"Mouse Down\"\n                                ],\n                                [\n                                    \"mouseenter\",\n                                    \"Mouse Enter\"\n                                ],\n                                [\n                                    \"mouseleave\",\n                                    \"Mouse Exit\"\n                                ],\n                                [\n                                    \"mouseup\",\n                                    \"Mouse Up\"\n                                ]\n                            ], (event1)=>event1.target.checked);\n                        }\n                        this._setBackgroundColor(element1);\n                        this._setDefaultPropertiesFromJS(element1);\n                        this.container.append(element1);\n                        return this.container;\n                    }\n                }\n                class PushButtonWidgetAnnotationElement1 extends LinkAnnotationElement1 {\n                    constructor(parameters1){\n                        super(parameters1, {\n                            ignoreBorder: parameters1.data.hasAppearance\n                        });\n                    }\n                    render() {\n                        const container1 = super.render();\n                        container1.classList.add(\"buttonWidgetAnnotation\", \"pushButton\");\n                        if (this.data.alternativeText) {\n                            container1.title = this.data.alternativeText;\n                        }\n                        const linkElement1 = container1.lastChild;\n                        if (this.enableScripting && this.hasJSActions && linkElement1) {\n                            this._setDefaultPropertiesFromJS(linkElement1);\n                            linkElement1.addEventListener(\"updatefromsandbox\", (jsEvent1)=>{\n                                this._dispatchEventFromSandbox({}, jsEvent1);\n                            });\n                        }\n                        return container1;\n                    }\n                }\n                class ChoiceWidgetAnnotationElement1 extends WidgetAnnotationElement1 {\n                    constructor(parameters1){\n                        super(parameters1, {\n                            isRenderable: parameters1.renderForms\n                        });\n                    }\n                    render() {\n                        this.container.classList.add(\"choiceWidgetAnnotation\");\n                        const storage1 = this.annotationStorage;\n                        const id1 = this.data.id;\n                        const storedData1 = storage1.getValue(id1, {\n                            value: this.data.fieldValue\n                        });\n                        const selectElement1 = document.createElement(\"select\");\n                        GetElementsByNameSet1.add(selectElement1);\n                        selectElement1.setAttribute(\"data-element-id\", id1);\n                        selectElement1.disabled = this.data.readOnly;\n                        this._setRequired(selectElement1, this.data.required);\n                        selectElement1.name = this.data.fieldName;\n                        selectElement1.tabIndex = DEFAULT_TAB_INDEX1;\n                        let addAnEmptyEntry1 = this.data.combo && this.data.options.length > 0;\n                        if (!this.data.combo) {\n                            selectElement1.size = this.data.options.length;\n                            if (this.data.multiSelect) {\n                                selectElement1.multiple = true;\n                            }\n                        }\n                        selectElement1.addEventListener(\"resetform\", (event1)=>{\n                            const defaultValue1 = this.data.defaultFieldValue;\n                            for (const option1 of selectElement1.options){\n                                option1.selected = option1.value === defaultValue1;\n                            }\n                        });\n                        for (const option1 of this.data.options){\n                            const optionElement1 = document.createElement(\"option\");\n                            optionElement1.textContent = option1.displayValue;\n                            optionElement1.value = option1.exportValue;\n                            if (storedData1.value.includes(option1.exportValue)) {\n                                optionElement1.setAttribute(\"selected\", true);\n                                addAnEmptyEntry1 = false;\n                            }\n                            selectElement1.append(optionElement1);\n                        }\n                        let removeEmptyEntry1 = null;\n                        if (addAnEmptyEntry1) {\n                            const noneOptionElement1 = document.createElement(\"option\");\n                            noneOptionElement1.value = \" \";\n                            noneOptionElement1.setAttribute(\"hidden\", true);\n                            noneOptionElement1.setAttribute(\"selected\", true);\n                            selectElement1.prepend(noneOptionElement1);\n                            removeEmptyEntry1 = ()=>{\n                                noneOptionElement1.remove();\n                                selectElement1.removeEventListener(\"input\", removeEmptyEntry1);\n                                removeEmptyEntry1 = null;\n                            };\n                            selectElement1.addEventListener(\"input\", removeEmptyEntry1);\n                        }\n                        const getValue1 = (isExport1)=>{\n                            const name1 = isExport1 ? \"value\" : \"textContent\";\n                            const { options: options1, multiple: multiple1 } = selectElement1;\n                            if (!multiple1) {\n                                return options1.selectedIndex === -1 ? null : options1[options1.selectedIndex][name1];\n                            }\n                            return Array.prototype.filter.call(options1, (option1)=>option1.selected).map((option1)=>option1[name1]);\n                        };\n                        let selectedValues1 = getValue1(false);\n                        const getItems1 = (event1)=>{\n                            const options1 = event1.target.options;\n                            return Array.prototype.map.call(options1, (option1)=>{\n                                return {\n                                    displayValue: option1.textContent,\n                                    exportValue: option1.value\n                                };\n                            });\n                        };\n                        if (this.enableScripting && this.hasJSActions) {\n                            selectElement1.addEventListener(\"updatefromsandbox\", (jsEvent1)=>{\n                                const actions1 = {\n                                    value (event1) {\n                                        removeEmptyEntry1?.();\n                                        const value1 = event1.detail.value;\n                                        const values1 = new Set(Array.isArray(value1) ? value1 : [\n                                            value1\n                                        ]);\n                                        for (const option1 of selectElement1.options){\n                                            option1.selected = values1.has(option1.value);\n                                        }\n                                        storage1.setValue(id1, {\n                                            value: getValue1(true)\n                                        });\n                                        selectedValues1 = getValue1(false);\n                                    },\n                                    multipleSelection (event1) {\n                                        selectElement1.multiple = true;\n                                    },\n                                    remove (event1) {\n                                        const options1 = selectElement1.options;\n                                        const index1 = event1.detail.remove;\n                                        options1[index1].selected = false;\n                                        selectElement1.remove(index1);\n                                        if (options1.length > 0) {\n                                            const i1 = Array.prototype.findIndex.call(options1, (option1)=>option1.selected);\n                                            if (i1 === -1) {\n                                                options1[0].selected = true;\n                                            }\n                                        }\n                                        storage1.setValue(id1, {\n                                            value: getValue1(true),\n                                            items: getItems1(event1)\n                                        });\n                                        selectedValues1 = getValue1(false);\n                                    },\n                                    clear (event1) {\n                                        while(selectElement1.length !== 0){\n                                            selectElement1.remove(0);\n                                        }\n                                        storage1.setValue(id1, {\n                                            value: null,\n                                            items: []\n                                        });\n                                        selectedValues1 = getValue1(false);\n                                    },\n                                    insert (event1) {\n                                        const { index: index1, displayValue: displayValue1, exportValue: exportValue1 } = event1.detail.insert;\n                                        const selectChild1 = selectElement1.children[index1];\n                                        const optionElement1 = document.createElement(\"option\");\n                                        optionElement1.textContent = displayValue1;\n                                        optionElement1.value = exportValue1;\n                                        if (selectChild1) {\n                                            selectChild1.before(optionElement1);\n                                        } else {\n                                            selectElement1.append(optionElement1);\n                                        }\n                                        storage1.setValue(id1, {\n                                            value: getValue1(true),\n                                            items: getItems1(event1)\n                                        });\n                                        selectedValues1 = getValue1(false);\n                                    },\n                                    items (event1) {\n                                        const { items: items1 } = event1.detail;\n                                        while(selectElement1.length !== 0){\n                                            selectElement1.remove(0);\n                                        }\n                                        for (const item1 of items1){\n                                            const { displayValue: displayValue1, exportValue: exportValue1 } = item1;\n                                            const optionElement1 = document.createElement(\"option\");\n                                            optionElement1.textContent = displayValue1;\n                                            optionElement1.value = exportValue1;\n                                            selectElement1.append(optionElement1);\n                                        }\n                                        if (selectElement1.options.length > 0) {\n                                            selectElement1.options[0].selected = true;\n                                        }\n                                        storage1.setValue(id1, {\n                                            value: getValue1(true),\n                                            items: getItems1(event1)\n                                        });\n                                        selectedValues1 = getValue1(false);\n                                    },\n                                    indices (event1) {\n                                        const indices1 = new Set(event1.detail.indices);\n                                        for (const option1 of event1.target.options){\n                                            option1.selected = indices1.has(option1.index);\n                                        }\n                                        storage1.setValue(id1, {\n                                            value: getValue1(true)\n                                        });\n                                        selectedValues1 = getValue1(false);\n                                    },\n                                    editable (event1) {\n                                        event1.target.disabled = !event1.detail.editable;\n                                    }\n                                };\n                                this._dispatchEventFromSandbox(actions1, jsEvent1);\n                            });\n                            selectElement1.addEventListener(\"input\", (event1)=>{\n                                const exportValue1 = getValue1(true);\n                                storage1.setValue(id1, {\n                                    value: exportValue1\n                                });\n                                event1.preventDefault();\n                                this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                                    source: this,\n                                    detail: {\n                                        id: id1,\n                                        name: \"Keystroke\",\n                                        value: selectedValues1,\n                                        changeEx: exportValue1,\n                                        willCommit: false,\n                                        commitKey: 1,\n                                        keyDown: false\n                                    }\n                                });\n                            });\n                            this._setEventListeners(selectElement1, null, [\n                                [\n                                    \"focus\",\n                                    \"Focus\"\n                                ],\n                                [\n                                    \"blur\",\n                                    \"Blur\"\n                                ],\n                                [\n                                    \"mousedown\",\n                                    \"Mouse Down\"\n                                ],\n                                [\n                                    \"mouseenter\",\n                                    \"Mouse Enter\"\n                                ],\n                                [\n                                    \"mouseleave\",\n                                    \"Mouse Exit\"\n                                ],\n                                [\n                                    \"mouseup\",\n                                    \"Mouse Up\"\n                                ],\n                                [\n                                    \"input\",\n                                    \"Action\"\n                                ],\n                                [\n                                    \"input\",\n                                    \"Validate\"\n                                ]\n                            ], (event1)=>event1.target.value);\n                        } else {\n                            selectElement1.addEventListener(\"input\", function(event1) {\n                                storage1.setValue(id1, {\n                                    value: getValue1(true)\n                                });\n                            });\n                        }\n                        if (this.data.combo) {\n                            this._setTextStyle(selectElement1);\n                        } else {}\n                        this._setBackgroundColor(selectElement1);\n                        this._setDefaultPropertiesFromJS(selectElement1);\n                        this.container.append(selectElement1);\n                        return this.container;\n                    }\n                }\n                class PopupAnnotationElement1 extends AnnotationElement1 {\n                    constructor(parameters1){\n                        const { data: data1, elements: elements1 } = parameters1;\n                        super(parameters1, {\n                            isRenderable: AnnotationElement1._hasPopupData(data1)\n                        });\n                        this.elements = elements1;\n                    }\n                    render() {\n                        this.container.classList.add(\"popupAnnotation\");\n                        const popup1 = new PopupElement1({\n                            container: this.container,\n                            color: this.data.color,\n                            titleObj: this.data.titleObj,\n                            modificationDate: this.data.modificationDate,\n                            contentsObj: this.data.contentsObj,\n                            richText: this.data.richText,\n                            rect: this.data.rect,\n                            parentRect: this.data.parentRect || null,\n                            parent: this.parent,\n                            elements: this.elements,\n                            open: this.data.open\n                        });\n                        const elementIds1 = [];\n                        for (const element1 of this.elements){\n                            element1.popup = popup1;\n                            elementIds1.push(element1.data.id);\n                            element1.addHighlightArea();\n                        }\n                        this.container.setAttribute(\"aria-controls\", elementIds1.map((id1)=>`${_util1.AnnotationPrefix}${id1}`).join(\",\"));\n                        return this.container;\n                    }\n                }\n                class PopupElement1 {\n                    #dateTimePromise;\n                    #boundKeyDown;\n                    #boundHide;\n                    #boundShow;\n                    #boundToggle;\n                    #color;\n                    #container;\n                    #contentsObj;\n                    #elements;\n                    #parent;\n                    #parentRect;\n                    #pinned;\n                    #popup;\n                    #rect;\n                    #richText;\n                    #titleObj;\n                    #wasVisible;\n                    constructor({ container: container1, color: color1, elements: elements1, titleObj: titleObj1, modificationDate: modificationDate1, contentsObj: contentsObj1, richText: richText1, parent: parent1, rect: rect3, parentRect: parentRect1, open: open1 }){\n                        this.#dateTimePromise = null;\n                        this.#boundKeyDown = this.#keyDown.bind(this);\n                        this.#boundHide = this.#hide.bind(this);\n                        this.#boundShow = this.#show.bind(this);\n                        this.#boundToggle = this.#toggle.bind(this);\n                        this.#color = null;\n                        this.#container = null;\n                        this.#contentsObj = null;\n                        this.#elements = null;\n                        this.#parent = null;\n                        this.#parentRect = null;\n                        this.#pinned = false;\n                        this.#popup = null;\n                        this.#rect = null;\n                        this.#richText = null;\n                        this.#titleObj = null;\n                        this.#wasVisible = false;\n                        this.#container = container1;\n                        this.#titleObj = titleObj1;\n                        this.#contentsObj = contentsObj1;\n                        this.#richText = richText1;\n                        this.#parent = parent1;\n                        this.#color = color1;\n                        this.#rect = rect3;\n                        this.#parentRect = parentRect1;\n                        this.#elements = elements1;\n                        const dateObject1 = _display_utils1.PDFDateString.toDateObject(modificationDate1);\n                        if (dateObject1) {\n                            this.#dateTimePromise = parent1.l10n.get(\"annotation_date_string\", {\n                                date: dateObject1.toLocaleDateString(),\n                                time: dateObject1.toLocaleTimeString()\n                            });\n                        }\n                        this.trigger = elements1.flatMap((e1)=>e1.getElementsToTriggerPopup());\n                        for (const element1 of this.trigger){\n                            element1.addEventListener(\"click\", this.#boundToggle);\n                            element1.addEventListener(\"mouseenter\", this.#boundShow);\n                            element1.addEventListener(\"mouseleave\", this.#boundHide);\n                            element1.classList.add(\"popupTriggerArea\");\n                        }\n                        for (const element1 of elements1){\n                            element1.container?.addEventListener(\"keydown\", this.#boundKeyDown);\n                        }\n                        this.#container.hidden = true;\n                        if (open1) {\n                            this.#toggle();\n                        }\n                    }\n                    render() {\n                        if (this.#popup) {\n                            return;\n                        }\n                        const { page: { view: view1 }, viewport: { rawDims: { pageWidth: pageWidth1, pageHeight: pageHeight1, pageX: pageX1, pageY: pageY1 } } } = this.#parent;\n                        const popup1 = this.#popup = document.createElement(\"div\");\n                        popup1.className = \"popup\";\n                        if (this.#color) {\n                            const baseColor1 = popup1.style.outlineColor = _util1.Util.makeHexColor(...this.#color);\n                            if (CSS.supports(\"background-color\", \"color-mix(in srgb, red 30%, white)\")) {\n                                popup1.style.backgroundColor = `color-mix(in srgb, ${baseColor1} 30%, white)`;\n                            } else {\n                                const BACKGROUND_ENLIGHT1 = 0.7;\n                                popup1.style.backgroundColor = _util1.Util.makeHexColor(...this.#color.map((c4)=>Math.floor(BACKGROUND_ENLIGHT1 * (255 - c4) + c4)));\n                            }\n                        }\n                        const header1 = document.createElement(\"span\");\n                        header1.className = \"header\";\n                        const title1 = document.createElement(\"h1\");\n                        header1.append(title1);\n                        ({ dir: title1.dir, str: title1.textContent } = this.#titleObj);\n                        popup1.append(header1);\n                        if (this.#dateTimePromise) {\n                            const modificationDate1 = document.createElement(\"span\");\n                            modificationDate1.classList.add(\"popupDate\");\n                            this.#dateTimePromise.then((localized1)=>{\n                                modificationDate1.textContent = localized1;\n                            });\n                            header1.append(modificationDate1);\n                        }\n                        const contentsObj1 = this.#contentsObj;\n                        const richText1 = this.#richText;\n                        if (richText1?.str && (!contentsObj1?.str || contentsObj1.str === richText1.str)) {\n                            _xfa_layer1.XfaLayer.render({\n                                xfaHtml: richText1.html,\n                                intent: \"richText\",\n                                div: popup1\n                            });\n                            popup1.lastChild.classList.add(\"richText\", \"popupContent\");\n                        } else {\n                            const contents1 = this._formatContents(contentsObj1);\n                            popup1.append(contents1);\n                        }\n                        let useParentRect1 = !!this.#parentRect;\n                        let rect3 = useParentRect1 ? this.#parentRect : this.#rect;\n                        for (const element1 of this.#elements){\n                            if (!rect3 || _util1.Util.intersect(element1.data.rect, rect3) !== null) {\n                                rect3 = element1.data.rect;\n                                useParentRect1 = true;\n                                break;\n                            }\n                        }\n                        const normalizedRect1 = _util1.Util.normalizeRect([\n                            rect3[0],\n                            view1[3] - rect3[1] + view1[1],\n                            rect3[2],\n                            view1[3] - rect3[3] + view1[1]\n                        ]);\n                        const HORIZONTAL_SPACE_AFTER_ANNOTATION1 = 5;\n                        const parentWidth1 = useParentRect1 ? rect3[2] - rect3[0] + HORIZONTAL_SPACE_AFTER_ANNOTATION1 : 0;\n                        const popupLeft1 = normalizedRect1[0] + parentWidth1;\n                        const popupTop1 = normalizedRect1[1];\n                        const { style: style1 } = this.#container;\n                        style1.left = `${100 * (popupLeft1 - pageX1) / pageWidth1}%`;\n                        style1.top = `${100 * (popupTop1 - pageY1) / pageHeight1}%`;\n                        this.#container.append(popup1);\n                    }\n                    _formatContents({ str: str1, dir: dir1 }) {\n                        const p5 = document.createElement(\"p\");\n                        p5.classList.add(\"popupContent\");\n                        p5.dir = dir1;\n                        const lines1 = str1.split(/(?:\\r\\n?|\\n)/);\n                        for(let i1 = 0, ii1 = lines1.length; i1 < ii1; ++i1){\n                            const line1 = lines1[i1];\n                            p5.append(document.createTextNode(line1));\n                            if (i1 < ii1 - 1) {\n                                p5.append(document.createElement(\"br\"));\n                            }\n                        }\n                        return p5;\n                    }\n                    #keyDown(event1) {\n                        if (event1.altKey || event1.shiftKey || event1.ctrlKey || event1.metaKey) {\n                            return;\n                        }\n                        if (event1.key === \"Enter\" || event1.key === \"Escape\" && this.#pinned) {\n                            this.#toggle();\n                        }\n                    }\n                    #toggle() {\n                        this.#pinned = !this.#pinned;\n                        if (this.#pinned) {\n                            this.#show();\n                            this.#container.addEventListener(\"click\", this.#boundToggle);\n                            this.#container.addEventListener(\"keydown\", this.#boundKeyDown);\n                        } else {\n                            this.#hide();\n                            this.#container.removeEventListener(\"click\", this.#boundToggle);\n                            this.#container.removeEventListener(\"keydown\", this.#boundKeyDown);\n                        }\n                    }\n                    #show() {\n                        if (!this.#popup) {\n                            this.render();\n                        }\n                        if (!this.isVisible) {\n                            this.#container.hidden = false;\n                            this.#container.style.zIndex = parseInt(this.#container.style.zIndex) + 1000;\n                        } else if (this.#pinned) {\n                            this.#container.classList.add(\"focused\");\n                        }\n                    }\n                    #hide() {\n                        this.#container.classList.remove(\"focused\");\n                        if (this.#pinned || !this.isVisible) {\n                            return;\n                        }\n                        this.#container.hidden = true;\n                        this.#container.style.zIndex = parseInt(this.#container.style.zIndex) - 1000;\n                    }\n                    forceHide() {\n                        this.#wasVisible = this.isVisible;\n                        if (!this.#wasVisible) {\n                            return;\n                        }\n                        this.#container.hidden = true;\n                    }\n                    maybeShow() {\n                        if (!this.#wasVisible) {\n                            return;\n                        }\n                        this.#wasVisible = false;\n                        this.#container.hidden = false;\n                    }\n                    get isVisible() {\n                        return this.#container.hidden === false;\n                    }\n                }\n                class FreeTextAnnotationElement1 extends AnnotationElement1 {\n                    constructor(parameters1){\n                        super(parameters1, {\n                            isRenderable: true,\n                            ignoreBorder: true\n                        });\n                        this.textContent = parameters1.data.textContent;\n                        this.textPosition = parameters1.data.textPosition;\n                        this.annotationEditorType = _util1.AnnotationEditorType.FREETEXT;\n                    }\n                    render() {\n                        this.container.classList.add(\"freeTextAnnotation\");\n                        if (this.textContent) {\n                            const content1 = document.createElement(\"div\");\n                            content1.classList.add(\"annotationTextContent\");\n                            content1.setAttribute(\"role\", \"comment\");\n                            for (const line1 of this.textContent){\n                                const lineSpan1 = document.createElement(\"span\");\n                                lineSpan1.textContent = line1;\n                                content1.append(lineSpan1);\n                            }\n                            this.container.append(content1);\n                        }\n                        if (!this.data.popupRef && this.hasPopupData) {\n                            this._createPopup();\n                        }\n                        this._editOnDoubleClick();\n                        return this.container;\n                    }\n                }\n                exports1.FreeTextAnnotationElement = FreeTextAnnotationElement1;\n                class LineAnnotationElement1 extends AnnotationElement1 {\n                    #line;\n                    constructor(parameters1){\n                        super(parameters1, {\n                            isRenderable: true,\n                            ignoreBorder: true\n                        });\n                        this.#line = null;\n                    }\n                    render() {\n                        this.container.classList.add(\"lineAnnotation\");\n                        const data1 = this.data;\n                        const { width: width2, height: height1 } = getRectDims1(data1.rect);\n                        const svg1 = this.svgFactory.create(width2, height1, true);\n                        const line1 = this.#line = this.svgFactory.createElement(\"svg:line\");\n                        line1.setAttribute(\"x1\", data1.rect[2] - data1.lineCoordinates[0]);\n                        line1.setAttribute(\"y1\", data1.rect[3] - data1.lineCoordinates[1]);\n                        line1.setAttribute(\"x2\", data1.rect[2] - data1.lineCoordinates[2]);\n                        line1.setAttribute(\"y2\", data1.rect[3] - data1.lineCoordinates[3]);\n                        line1.setAttribute(\"stroke-width\", data1.borderStyle.width || 1);\n                        line1.setAttribute(\"stroke\", \"transparent\");\n                        line1.setAttribute(\"fill\", \"transparent\");\n                        svg1.append(line1);\n                        this.container.append(svg1);\n                        if (!data1.popupRef && this.hasPopupData) {\n                            this._createPopup();\n                        }\n                        return this.container;\n                    }\n                    getElementsToTriggerPopup() {\n                        return this.#line;\n                    }\n                    addHighlightArea() {\n                        this.container.classList.add(\"highlightArea\");\n                    }\n                }\n                class SquareAnnotationElement1 extends AnnotationElement1 {\n                    #square;\n                    constructor(parameters1){\n                        super(parameters1, {\n                            isRenderable: true,\n                            ignoreBorder: true\n                        });\n                        this.#square = null;\n                    }\n                    render() {\n                        this.container.classList.add(\"squareAnnotation\");\n                        const data1 = this.data;\n                        const { width: width2, height: height1 } = getRectDims1(data1.rect);\n                        const svg1 = this.svgFactory.create(width2, height1, true);\n                        const borderWidth1 = data1.borderStyle.width;\n                        const square1 = this.#square = this.svgFactory.createElement(\"svg:rect\");\n                        square1.setAttribute(\"x\", borderWidth1 / 2);\n                        square1.setAttribute(\"y\", borderWidth1 / 2);\n                        square1.setAttribute(\"width\", width2 - borderWidth1);\n                        square1.setAttribute(\"height\", height1 - borderWidth1);\n                        square1.setAttribute(\"stroke-width\", borderWidth1 || 1);\n                        square1.setAttribute(\"stroke\", \"transparent\");\n                        square1.setAttribute(\"fill\", \"transparent\");\n                        svg1.append(square1);\n                        this.container.append(svg1);\n                        if (!data1.popupRef && this.hasPopupData) {\n                            this._createPopup();\n                        }\n                        return this.container;\n                    }\n                    getElementsToTriggerPopup() {\n                        return this.#square;\n                    }\n                    addHighlightArea() {\n                        this.container.classList.add(\"highlightArea\");\n                    }\n                }\n                class CircleAnnotationElement1 extends AnnotationElement1 {\n                    #circle;\n                    constructor(parameters1){\n                        super(parameters1, {\n                            isRenderable: true,\n                            ignoreBorder: true\n                        });\n                        this.#circle = null;\n                    }\n                    render() {\n                        this.container.classList.add(\"circleAnnotation\");\n                        const data1 = this.data;\n                        const { width: width2, height: height1 } = getRectDims1(data1.rect);\n                        const svg1 = this.svgFactory.create(width2, height1, true);\n                        const borderWidth1 = data1.borderStyle.width;\n                        const circle1 = this.#circle = this.svgFactory.createElement(\"svg:ellipse\");\n                        circle1.setAttribute(\"cx\", width2 / 2);\n                        circle1.setAttribute(\"cy\", height1 / 2);\n                        circle1.setAttribute(\"rx\", width2 / 2 - borderWidth1 / 2);\n                        circle1.setAttribute(\"ry\", height1 / 2 - borderWidth1 / 2);\n                        circle1.setAttribute(\"stroke-width\", borderWidth1 || 1);\n                        circle1.setAttribute(\"stroke\", \"transparent\");\n                        circle1.setAttribute(\"fill\", \"transparent\");\n                        svg1.append(circle1);\n                        this.container.append(svg1);\n                        if (!data1.popupRef && this.hasPopupData) {\n                            this._createPopup();\n                        }\n                        return this.container;\n                    }\n                    getElementsToTriggerPopup() {\n                        return this.#circle;\n                    }\n                    addHighlightArea() {\n                        this.container.classList.add(\"highlightArea\");\n                    }\n                }\n                class PolylineAnnotationElement1 extends AnnotationElement1 {\n                    #polyline;\n                    constructor(parameters1){\n                        super(parameters1, {\n                            isRenderable: true,\n                            ignoreBorder: true\n                        });\n                        this.#polyline = null;\n                        this.containerClassName = \"polylineAnnotation\";\n                        this.svgElementName = \"svg:polyline\";\n                    }\n                    render() {\n                        this.container.classList.add(this.containerClassName);\n                        const data1 = this.data;\n                        const { width: width2, height: height1 } = getRectDims1(data1.rect);\n                        const svg1 = this.svgFactory.create(width2, height1, true);\n                        let points1 = [];\n                        for (const coordinate1 of data1.vertices){\n                            const x4 = coordinate1.x - data1.rect[0];\n                            const y4 = data1.rect[3] - coordinate1.y;\n                            points1.push(x4 + \",\" + y4);\n                        }\n                        points1 = points1.join(\" \");\n                        const polyline1 = this.#polyline = this.svgFactory.createElement(this.svgElementName);\n                        polyline1.setAttribute(\"points\", points1);\n                        polyline1.setAttribute(\"stroke-width\", data1.borderStyle.width || 1);\n                        polyline1.setAttribute(\"stroke\", \"transparent\");\n                        polyline1.setAttribute(\"fill\", \"transparent\");\n                        svg1.append(polyline1);\n                        this.container.append(svg1);\n                        if (!data1.popupRef && this.hasPopupData) {\n                            this._createPopup();\n                        }\n                        return this.container;\n                    }\n                    getElementsToTriggerPopup() {\n                        return this.#polyline;\n                    }\n                    addHighlightArea() {\n                        this.container.classList.add(\"highlightArea\");\n                    }\n                }\n                class PolygonAnnotationElement1 extends PolylineAnnotationElement1 {\n                    constructor(parameters1){\n                        super(parameters1);\n                        this.containerClassName = \"polygonAnnotation\";\n                        this.svgElementName = \"svg:polygon\";\n                    }\n                }\n                class CaretAnnotationElement1 extends AnnotationElement1 {\n                    constructor(parameters1){\n                        super(parameters1, {\n                            isRenderable: true,\n                            ignoreBorder: true\n                        });\n                    }\n                    render() {\n                        this.container.classList.add(\"caretAnnotation\");\n                        if (!this.data.popupRef && this.hasPopupData) {\n                            this._createPopup();\n                        }\n                        return this.container;\n                    }\n                }\n                class InkAnnotationElement1 extends AnnotationElement1 {\n                    #polylines;\n                    constructor(parameters1){\n                        super(parameters1, {\n                            isRenderable: true,\n                            ignoreBorder: true\n                        });\n                        this.#polylines = [];\n                        this.containerClassName = \"inkAnnotation\";\n                        this.svgElementName = \"svg:polyline\";\n                        this.annotationEditorType = _util1.AnnotationEditorType.INK;\n                    }\n                    render() {\n                        this.container.classList.add(this.containerClassName);\n                        const data1 = this.data;\n                        const { width: width2, height: height1 } = getRectDims1(data1.rect);\n                        const svg1 = this.svgFactory.create(width2, height1, true);\n                        for (const inkList1 of data1.inkLists){\n                            let points1 = [];\n                            for (const coordinate1 of inkList1){\n                                const x4 = coordinate1.x - data1.rect[0];\n                                const y4 = data1.rect[3] - coordinate1.y;\n                                points1.push(`${x4},${y4}`);\n                            }\n                            points1 = points1.join(\" \");\n                            const polyline1 = this.svgFactory.createElement(this.svgElementName);\n                            this.#polylines.push(polyline1);\n                            polyline1.setAttribute(\"points\", points1);\n                            polyline1.setAttribute(\"stroke-width\", data1.borderStyle.width || 1);\n                            polyline1.setAttribute(\"stroke\", \"transparent\");\n                            polyline1.setAttribute(\"fill\", \"transparent\");\n                            if (!data1.popupRef && this.hasPopupData) {\n                                this._createPopup();\n                            }\n                            svg1.append(polyline1);\n                        }\n                        this.container.append(svg1);\n                        return this.container;\n                    }\n                    getElementsToTriggerPopup() {\n                        return this.#polylines;\n                    }\n                    addHighlightArea() {\n                        this.container.classList.add(\"highlightArea\");\n                    }\n                }\n                exports1.InkAnnotationElement = InkAnnotationElement1;\n                class HighlightAnnotationElement1 extends AnnotationElement1 {\n                    constructor(parameters1){\n                        super(parameters1, {\n                            isRenderable: true,\n                            ignoreBorder: true,\n                            createQuadrilaterals: true\n                        });\n                    }\n                    render() {\n                        if (!this.data.popupRef && this.hasPopupData) {\n                            this._createPopup();\n                        }\n                        this.container.classList.add(\"highlightAnnotation\");\n                        return this.container;\n                    }\n                }\n                class UnderlineAnnotationElement1 extends AnnotationElement1 {\n                    constructor(parameters1){\n                        super(parameters1, {\n                            isRenderable: true,\n                            ignoreBorder: true,\n                            createQuadrilaterals: true\n                        });\n                    }\n                    render() {\n                        if (!this.data.popupRef && this.hasPopupData) {\n                            this._createPopup();\n                        }\n                        this.container.classList.add(\"underlineAnnotation\");\n                        return this.container;\n                    }\n                }\n                class SquigglyAnnotationElement1 extends AnnotationElement1 {\n                    constructor(parameters1){\n                        super(parameters1, {\n                            isRenderable: true,\n                            ignoreBorder: true,\n                            createQuadrilaterals: true\n                        });\n                    }\n                    render() {\n                        if (!this.data.popupRef && this.hasPopupData) {\n                            this._createPopup();\n                        }\n                        this.container.classList.add(\"squigglyAnnotation\");\n                        return this.container;\n                    }\n                }\n                class StrikeOutAnnotationElement1 extends AnnotationElement1 {\n                    constructor(parameters1){\n                        super(parameters1, {\n                            isRenderable: true,\n                            ignoreBorder: true,\n                            createQuadrilaterals: true\n                        });\n                    }\n                    render() {\n                        if (!this.data.popupRef && this.hasPopupData) {\n                            this._createPopup();\n                        }\n                        this.container.classList.add(\"strikeoutAnnotation\");\n                        return this.container;\n                    }\n                }\n                class StampAnnotationElement1 extends AnnotationElement1 {\n                    constructor(parameters1){\n                        super(parameters1, {\n                            isRenderable: true,\n                            ignoreBorder: true\n                        });\n                    }\n                    render() {\n                        this.container.classList.add(\"stampAnnotation\");\n                        if (!this.data.popupRef && this.hasPopupData) {\n                            this._createPopup();\n                        }\n                        return this.container;\n                    }\n                }\n                exports1.StampAnnotationElement = StampAnnotationElement1;\n                class FileAttachmentAnnotationElement1 extends AnnotationElement1 {\n                    #trigger;\n                    constructor(parameters1){\n                        super(parameters1, {\n                            isRenderable: true\n                        });\n                        this.#trigger = null;\n                        const { filename: filename1, content: content1 } = this.data.file;\n                        this.filename = (0, _display_utils1.getFilenameFromUrl)(filename1, true);\n                        this.content = content1;\n                        this.linkService.eventBus?.dispatch(\"fileattachmentannotation\", {\n                            source: this,\n                            filename: filename1,\n                            content: content1\n                        });\n                    }\n                    render() {\n                        this.container.classList.add(\"fileAttachmentAnnotation\");\n                        const { container: container1, data: data1 } = this;\n                        let trigger1;\n                        if (data1.hasAppearance || data1.fillAlpha === 0) {\n                            trigger1 = document.createElement(\"div\");\n                        } else {\n                            trigger1 = document.createElement(\"img\");\n                            trigger1.src = `${this.imageResourcesPath}annotation-${/paperclip/i.test(data1.name) ? \"paperclip\" : \"pushpin\"}.svg`;\n                            if (data1.fillAlpha && data1.fillAlpha < 1) {\n                                trigger1.style = `filter: opacity(${Math.round(data1.fillAlpha * 100)}%);`;\n                            }\n                        }\n                        trigger1.addEventListener(\"dblclick\", this.#download.bind(this));\n                        this.#trigger = trigger1;\n                        const { isMac: isMac1 } = _util1.FeatureTest.platform;\n                        container1.addEventListener(\"keydown\", (evt1)=>{\n                            if (evt1.key === \"Enter\" && (isMac1 ? evt1.metaKey : evt1.ctrlKey)) {\n                                this.#download();\n                            }\n                        });\n                        if (!data1.popupRef && this.hasPopupData) {\n                            this._createPopup();\n                        } else {\n                            trigger1.classList.add(\"popupTriggerArea\");\n                        }\n                        container1.append(trigger1);\n                        return container1;\n                    }\n                    getElementsToTriggerPopup() {\n                        return this.#trigger;\n                    }\n                    addHighlightArea() {\n                        this.container.classList.add(\"highlightArea\");\n                    }\n                    #download() {\n                        this.downloadManager?.openOrDownloadData(this.container, this.content, this.filename);\n                    }\n                }\n                class AnnotationLayer1 {\n                    #accessibilityManager;\n                    #annotationCanvasMap;\n                    #editableAnnotations;\n                    constructor({ div: div1, accessibilityManager: accessibilityManager1, annotationCanvasMap: annotationCanvasMap1, l10n: l10n1, page: page1, viewport: viewport1 }){\n                        this.#accessibilityManager = null;\n                        this.#annotationCanvasMap = null;\n                        this.#editableAnnotations = new Map();\n                        this.div = div1;\n                        this.#accessibilityManager = accessibilityManager1;\n                        this.#annotationCanvasMap = annotationCanvasMap1;\n                        this.l10n = l10n1;\n                        this.page = page1;\n                        this.viewport = viewport1;\n                        this.zIndex = 0;\n                        this.l10n ||= _displayL10n_utils1.NullL10n;\n                    }\n                    #appendElement(element1, id1) {\n                        const contentElement1 = element1.firstChild || element1;\n                        contentElement1.id = `${_util1.AnnotationPrefix}${id1}`;\n                        this.div.append(element1);\n                        this.#accessibilityManager?.moveElementInDOM(this.div, element1, contentElement1, false);\n                    }\n                    async render(params1) {\n                        const { annotations: annotations1 } = params1;\n                        const layer1 = this.div;\n                        (0, _display_utils1.setLayerDimensions)(layer1, this.viewport);\n                        const popupToElements1 = new Map();\n                        const elementParams1 = {\n                            data: null,\n                            layer: layer1,\n                            linkService: params1.linkService,\n                            downloadManager: params1.downloadManager,\n                            imageResourcesPath: params1.imageResourcesPath || \"\",\n                            renderForms: params1.renderForms !== false,\n                            svgFactory: new _display_utils1.DOMSVGFactory(),\n                            annotationStorage: params1.annotationStorage || new _annotation_storage1.AnnotationStorage(),\n                            enableScripting: params1.enableScripting === true,\n                            hasJSActions: params1.hasJSActions,\n                            fieldObjects: params1.fieldObjects,\n                            parent: this,\n                            elements: null\n                        };\n                        for (const data1 of annotations1){\n                            if (data1.noHTML) {\n                                continue;\n                            }\n                            const isPopupAnnotation1 = data1.annotationType === _util1.AnnotationType.POPUP;\n                            if (!isPopupAnnotation1) {\n                                const { width: width2, height: height1 } = getRectDims1(data1.rect);\n                                if (width2 <= 0 || height1 <= 0) {\n                                    continue;\n                                }\n                            } else {\n                                const elements1 = popupToElements1.get(data1.id);\n                                if (!elements1) {\n                                    continue;\n                                }\n                                elementParams1.elements = elements1;\n                            }\n                            elementParams1.data = data1;\n                            const element1 = AnnotationElementFactory1.create(elementParams1);\n                            if (!element1.isRenderable) {\n                                continue;\n                            }\n                            if (!isPopupAnnotation1 && data1.popupRef) {\n                                const elements1 = popupToElements1.get(data1.popupRef);\n                                if (!elements1) {\n                                    popupToElements1.set(data1.popupRef, [\n                                        element1\n                                    ]);\n                                } else {\n                                    elements1.push(element1);\n                                }\n                            }\n                            if (element1.annotationEditorType > 0) {\n                                this.#editableAnnotations.set(element1.data.id, element1);\n                            }\n                            const rendered1 = element1.render();\n                            if (data1.hidden) {\n                                rendered1.style.visibility = \"hidden\";\n                            }\n                            this.#appendElement(rendered1, data1.id);\n                        }\n                        this.#setAnnotationCanvasMap();\n                        await this.l10n.translate(layer1);\n                    }\n                    update({ viewport: viewport1 }) {\n                        const layer1 = this.div;\n                        this.viewport = viewport1;\n                        (0, _display_utils1.setLayerDimensions)(layer1, {\n                            rotation: viewport1.rotation\n                        });\n                        this.#setAnnotationCanvasMap();\n                        layer1.hidden = false;\n                    }\n                    #setAnnotationCanvasMap() {\n                        if (!this.#annotationCanvasMap) {\n                            return;\n                        }\n                        const layer1 = this.div;\n                        for (const [id1, canvas1] of this.#annotationCanvasMap){\n                            const element1 = layer1.querySelector(`[data-annotation-id=\"${id1}\"]`);\n                            if (!element1) {\n                                continue;\n                            }\n                            const { firstChild: firstChild1 } = element1;\n                            if (!firstChild1) {\n                                element1.append(canvas1);\n                            } else if (firstChild1.nodeName === \"CANVAS\") {\n                                firstChild1.replaceWith(canvas1);\n                            } else {\n                                firstChild1.before(canvas1);\n                            }\n                        }\n                        this.#annotationCanvasMap.clear();\n                    }\n                    getEditableAnnotations() {\n                        return Array.from(this.#editableAnnotations.values());\n                    }\n                    getEditableAnnotation(id1) {\n                        return this.#editableAnnotations.get(id1);\n                    }\n                }\n                exports1.AnnotationLayer = AnnotationLayer1;\n            /***/ },\n            /* 30 */ /***/ (__unused_webpack_module1, exports1)=>{\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                exports1.ColorConverters = void 0;\n                function makeColorComp1(n1) {\n                    return Math.floor(Math.max(0, Math.min(1, n1)) * 255).toString(16).padStart(2, \"0\");\n                }\n                function scaleAndClamp1(x4) {\n                    return Math.max(0, Math.min(255, 255 * x4));\n                }\n                class ColorConverters1 {\n                    static CMYK_G([c4, y4, m3, k3]) {\n                        return [\n                            \"G\",\n                            1 - Math.min(1, 0.3 * c4 + 0.59 * m3 + 0.11 * y4 + k3)\n                        ];\n                    }\n                    static G_CMYK([g1]) {\n                        return [\n                            \"CMYK\",\n                            0,\n                            0,\n                            0,\n                            1 - g1\n                        ];\n                    }\n                    static G_RGB([g1]) {\n                        return [\n                            \"RGB\",\n                            g1,\n                            g1,\n                            g1\n                        ];\n                    }\n                    static G_rgb([g1]) {\n                        g1 = scaleAndClamp1(g1);\n                        return [\n                            g1,\n                            g1,\n                            g1\n                        ];\n                    }\n                    static G_HTML([g1]) {\n                        const G1 = makeColorComp1(g1);\n                        return `#${G1}${G1}${G1}`;\n                    }\n                    static RGB_G([r1, g1, b4]) {\n                        return [\n                            \"G\",\n                            0.3 * r1 + 0.59 * g1 + 0.11 * b4\n                        ];\n                    }\n                    static RGB_rgb(color1) {\n                        return color1.map(scaleAndClamp1);\n                    }\n                    static RGB_HTML(color1) {\n                        return `#${color1.map(makeColorComp1).join(\"\")}`;\n                    }\n                    static T_HTML() {\n                        return \"#00000000\";\n                    }\n                    static T_rgb() {\n                        return [\n                            null\n                        ];\n                    }\n                    static CMYK_RGB([c4, y4, m3, k3]) {\n                        return [\n                            \"RGB\",\n                            1 - Math.min(1, c4 + k3),\n                            1 - Math.min(1, m3 + k3),\n                            1 - Math.min(1, y4 + k3)\n                        ];\n                    }\n                    static CMYK_rgb([c4, y4, m3, k3]) {\n                        return [\n                            scaleAndClamp1(1 - Math.min(1, c4 + k3)),\n                            scaleAndClamp1(1 - Math.min(1, m3 + k3)),\n                            scaleAndClamp1(1 - Math.min(1, y4 + k3))\n                        ];\n                    }\n                    static CMYK_HTML(components1) {\n                        const rgb1 = this.CMYK_RGB(components1).slice(1);\n                        return this.RGB_HTML(rgb1);\n                    }\n                    static RGB_CMYK([r1, g1, b4]) {\n                        const c4 = 1 - r1;\n                        const m3 = 1 - g1;\n                        const y4 = 1 - b4;\n                        const k3 = Math.min(c4, m3, y4);\n                        return [\n                            \"CMYK\",\n                            c4,\n                            m3,\n                            y4,\n                            k3\n                        ];\n                    }\n                }\n                exports1.ColorConverters = ColorConverters1;\n            /***/ },\n            /* 31 */ /***/ (__unused_webpack_module1, exports1)=>{\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                exports1.NullL10n = void 0;\n                exports1.getL10nFallback = getL10nFallback1;\n                const DEFAULT_L10N_STRINGS1 = {\n                    of_pages: \"of {{pagesCount}}\",\n                    page_of_pages: \"({{pageNumber}} of {{pagesCount}})\",\n                    document_properties_kb: \"{{size_kb}} KB ({{size_b}} bytes)\",\n                    document_properties_mb: \"{{size_mb}} MB ({{size_b}} bytes)\",\n                    document_properties_date_string: \"{{date}}, {{time}}\",\n                    document_properties_page_size_unit_inches: \"in\",\n                    document_properties_page_size_unit_millimeters: \"mm\",\n                    document_properties_page_size_orientation_portrait: \"portrait\",\n                    document_properties_page_size_orientation_landscape: \"landscape\",\n                    document_properties_page_size_name_a3: \"A3\",\n                    document_properties_page_size_name_a4: \"A4\",\n                    document_properties_page_size_name_letter: \"Letter\",\n                    document_properties_page_size_name_legal: \"Legal\",\n                    document_properties_page_size_dimension_string: \"{{width}} \\xd7 {{height}} {{unit}} ({{orientation}})\",\n                    document_properties_page_size_dimension_name_string: \"{{width}} \\xd7 {{height}} {{unit}} ({{name}}, {{orientation}})\",\n                    document_properties_linearized_yes: \"Yes\",\n                    document_properties_linearized_no: \"No\",\n                    additional_layers: \"Additional Layers\",\n                    page_landmark: \"Page {{page}}\",\n                    thumb_page_title: \"Page {{page}}\",\n                    thumb_page_canvas: \"Thumbnail of Page {{page}}\",\n                    find_reached_top: \"Reached top of document, continued from bottom\",\n                    find_reached_bottom: \"Reached end of document, continued from top\",\n                    \"find_match_count[one]\": \"{{current}} of {{total}} match\",\n                    \"find_match_count[other]\": \"{{current}} of {{total}} matches\",\n                    \"find_match_count_limit[one]\": \"More than {{limit}} match\",\n                    \"find_match_count_limit[other]\": \"More than {{limit}} matches\",\n                    find_not_found: \"Phrase not found\",\n                    page_scale_width: \"Page Width\",\n                    page_scale_fit: \"Page Fit\",\n                    page_scale_auto: \"Automatic Zoom\",\n                    page_scale_actual: \"Actual Size\",\n                    page_scale_percent: \"{{scale}}%\",\n                    loading_error: \"An error occurred while loading the PDF.\",\n                    invalid_file_error: \"Invalid or corrupted PDF file.\",\n                    missing_file_error: \"Missing PDF file.\",\n                    unexpected_response_error: \"Unexpected server response.\",\n                    rendering_error: \"An error occurred while rendering the page.\",\n                    annotation_date_string: \"{{date}}, {{time}}\",\n                    printing_not_supported: \"Warning: Printing is not fully supported by this browser.\",\n                    printing_not_ready: \"Warning: The PDF is not fully loaded for printing.\",\n                    web_fonts_disabled: \"Web fonts are disabled: unable to use embedded PDF fonts.\",\n                    free_text2_default_content: \"Start typing…\",\n                    editor_free_text2_aria_label: \"Text Editor\",\n                    editor_ink2_aria_label: \"Draw Editor\",\n                    editor_ink_canvas_aria_label: \"User-created image\",\n                    editor_alt_text_button_label: \"Alt text\",\n                    editor_alt_text_edit_button_label: \"Edit alt text\",\n                    editor_alt_text_decorative_tooltip: \"Marked as decorative\"\n                };\n                {\n                    DEFAULT_L10N_STRINGS1.print_progress_percent = \"{{progress}}%\";\n                }\n                function getL10nFallback1(key1, args1) {\n                    switch(key1){\n                        case \"find_match_count\":\n                            key1 = `find_match_count[${args1.total === 1 ? \"one\" : \"other\"}]`;\n                            break;\n                        case \"find_match_count_limit\":\n                            key1 = `find_match_count_limit[${args1.limit === 1 ? \"one\" : \"other\"}]`;\n                            break;\n                    }\n                    return DEFAULT_L10N_STRINGS1[key1] || \"\";\n                }\n                function formatL10nValue1(text1, args1) {\n                    if (!args1) {\n                        return text1;\n                    }\n                    return text1.replaceAll(/\\{\\{\\s*(\\w+)\\s*\\}\\}/g, (all1, name1)=>{\n                        return name1 in args1 ? args1[name1] : \"{{\" + name1 + \"}}\";\n                    });\n                }\n                const NullL10n1 = {\n                    async getLanguage () {\n                        return \"en-us\";\n                    },\n                    async getDirection () {\n                        return \"ltr\";\n                    },\n                    async get (key1, args1 = null, fallback1 = getL10nFallback1(key1, args1)) {\n                        return formatL10nValue1(fallback1, args1);\n                    },\n                    async translate (element1) {}\n                };\n                exports1.NullL10n = NullL10n1;\n            /***/ },\n            /* 32 */ /***/ (__unused_webpack_module1, exports1, __w_pdfjs_require__1)=>{\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                exports1.XfaLayer = void 0;\n                var _xfa_text1 = __w_pdfjs_require__1(25);\n                class XfaLayer1 {\n                    static setupStorage(html1, id1, element1, storage1, intent1) {\n                        const storedData1 = storage1.getValue(id1, {\n                            value: null\n                        });\n                        switch(element1.name){\n                            case \"textarea\":\n                                if (storedData1.value !== null) {\n                                    html1.textContent = storedData1.value;\n                                }\n                                if (intent1 === \"print\") {\n                                    break;\n                                }\n                                html1.addEventListener(\"input\", (event1)=>{\n                                    storage1.setValue(id1, {\n                                        value: event1.target.value\n                                    });\n                                });\n                                break;\n                            case \"input\":\n                                if (element1.attributes.type === \"radio\" || element1.attributes.type === \"checkbox\") {\n                                    if (storedData1.value === element1.attributes.xfaOn) {\n                                        html1.setAttribute(\"checked\", true);\n                                    } else if (storedData1.value === element1.attributes.xfaOff) {\n                                        html1.removeAttribute(\"checked\");\n                                    }\n                                    if (intent1 === \"print\") {\n                                        break;\n                                    }\n                                    html1.addEventListener(\"change\", (event1)=>{\n                                        storage1.setValue(id1, {\n                                            value: event1.target.checked ? event1.target.getAttribute(\"xfaOn\") : event1.target.getAttribute(\"xfaOff\")\n                                        });\n                                    });\n                                } else {\n                                    if (storedData1.value !== null) {\n                                        html1.setAttribute(\"value\", storedData1.value);\n                                    }\n                                    if (intent1 === \"print\") {\n                                        break;\n                                    }\n                                    html1.addEventListener(\"input\", (event1)=>{\n                                        storage1.setValue(id1, {\n                                            value: event1.target.value\n                                        });\n                                    });\n                                }\n                                break;\n                            case \"select\":\n                                if (storedData1.value !== null) {\n                                    html1.setAttribute(\"value\", storedData1.value);\n                                    for (const option1 of element1.children){\n                                        if (option1.attributes.value === storedData1.value) {\n                                            option1.attributes.selected = true;\n                                        } else if (option1.attributes.hasOwnProperty(\"selected\")) {\n                                            delete option1.attributes.selected;\n                                        }\n                                    }\n                                }\n                                html1.addEventListener(\"input\", (event1)=>{\n                                    const options1 = event1.target.options;\n                                    const value1 = options1.selectedIndex === -1 ? \"\" : options1[options1.selectedIndex].value;\n                                    storage1.setValue(id1, {\n                                        value: value1\n                                    });\n                                });\n                                break;\n                        }\n                    }\n                    static setAttributes({ html: html1, element: element1, storage: storage1 = null, intent: intent1, linkService: linkService1 }) {\n                        const { attributes: attributes1 } = element1;\n                        const isHTMLAnchorElement1 = html1 instanceof HTMLAnchorElement;\n                        if (attributes1.type === \"radio\") {\n                            attributes1.name = `${attributes1.name}-${intent1}`;\n                        }\n                        for (const [key1, value1] of Object.entries(attributes1)){\n                            if (value1 === null || value1 === undefined) {\n                                continue;\n                            }\n                            switch(key1){\n                                case \"class\":\n                                    if (value1.length) {\n                                        html1.setAttribute(key1, value1.join(\" \"));\n                                    }\n                                    break;\n                                case \"dataId\":\n                                    break;\n                                case \"id\":\n                                    html1.setAttribute(\"data-element-id\", value1);\n                                    break;\n                                case \"style\":\n                                    Object.assign(html1.style, value1);\n                                    break;\n                                case \"textContent\":\n                                    html1.textContent = value1;\n                                    break;\n                                default:\n                                    if (!isHTMLAnchorElement1 || key1 !== \"href\" && key1 !== \"newWindow\") {\n                                        html1.setAttribute(key1, value1);\n                                    }\n                            }\n                        }\n                        if (isHTMLAnchorElement1) {\n                            linkService1.addLinkAttributes(html1, attributes1.href, attributes1.newWindow);\n                        }\n                        if (storage1 && attributes1.dataId) {\n                            this.setupStorage(html1, attributes1.dataId, element1, storage1);\n                        }\n                    }\n                    static render(parameters1) {\n                        const storage1 = parameters1.annotationStorage;\n                        const linkService1 = parameters1.linkService;\n                        const root1 = parameters1.xfaHtml;\n                        const intent1 = parameters1.intent || \"display\";\n                        const rootHtml1 = document.createElement(root1.name);\n                        if (root1.attributes) {\n                            this.setAttributes({\n                                html: rootHtml1,\n                                element: root1,\n                                intent: intent1,\n                                linkService: linkService1\n                            });\n                        }\n                        const stack1 = [\n                            [\n                                root1,\n                                -1,\n                                rootHtml1\n                            ]\n                        ];\n                        const rootDiv1 = parameters1.div;\n                        rootDiv1.append(rootHtml1);\n                        if (parameters1.viewport) {\n                            const transform1 = `matrix(${parameters1.viewport.transform.join(\",\")})`;\n                            rootDiv1.style.transform = transform1;\n                        }\n                        if (intent1 !== \"richText\") {\n                            rootDiv1.setAttribute(\"class\", \"xfaLayer xfaFont\");\n                        }\n                        const textDivs1 = [];\n                        while(stack1.length > 0){\n                            const [parent1, i1, html1] = stack1.at(-1);\n                            if (i1 + 1 === parent1.children.length) {\n                                stack1.pop();\n                                continue;\n                            }\n                            const child1 = parent1.children[++stack1.at(-1)[1]];\n                            if (child1 === null) {\n                                continue;\n                            }\n                            const { name: name1 } = child1;\n                            if (name1 === \"#text\") {\n                                const node1 = document.createTextNode(child1.value);\n                                textDivs1.push(node1);\n                                html1.append(node1);\n                                continue;\n                            }\n                            const childHtml1 = child1?.attributes?.xmlns ? document.createElementNS(child1.attributes.xmlns, name1) : document.createElement(name1);\n                            html1.append(childHtml1);\n                            if (child1.attributes) {\n                                this.setAttributes({\n                                    html: childHtml1,\n                                    element: child1,\n                                    storage: storage1,\n                                    intent: intent1,\n                                    linkService: linkService1\n                                });\n                            }\n                            if (child1.children && child1.children.length > 0) {\n                                stack1.push([\n                                    child1,\n                                    -1,\n                                    childHtml1\n                                ]);\n                            } else if (child1.value) {\n                                const node1 = document.createTextNode(child1.value);\n                                if (_xfa_text1.XfaText.shouldBuildText(name1)) {\n                                    textDivs1.push(node1);\n                                }\n                                childHtml1.append(node1);\n                            }\n                        }\n                        for (const el1 of rootDiv1.querySelectorAll(\".xfaNonInteractive input, .xfaNonInteractive textarea\")){\n                            el1.setAttribute(\"readOnly\", true);\n                        }\n                        return {\n                            textDivs: textDivs1\n                        };\n                    }\n                    static update(parameters1) {\n                        const transform1 = `matrix(${parameters1.viewport.transform.join(\",\")})`;\n                        parameters1.div.style.transform = transform1;\n                        parameters1.div.hidden = false;\n                    }\n                }\n                exports1.XfaLayer = XfaLayer1;\n            /***/ },\n            /* 33 */ /***/ (__unused_webpack_module1, exports1, __w_pdfjs_require__1)=>{\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                exports1.InkEditor = void 0;\n                var _util1 = __w_pdfjs_require__1(1);\n                var _editor1 = __w_pdfjs_require__1(4);\n                var _annotation_layer1 = __w_pdfjs_require__1(29);\n                var _display_utils1 = __w_pdfjs_require__1(6);\n                var _tools1 = __w_pdfjs_require__1(5);\n                class InkEditor1 extends _editor1.AnnotationEditor {\n                    #baseHeight;\n                    #baseWidth;\n                    #boundCanvasPointermove;\n                    #boundCanvasPointerleave;\n                    #boundCanvasPointerup;\n                    #boundCanvasPointerdown;\n                    #currentPath2D;\n                    #disableEditing;\n                    #hasSomethingToDraw;\n                    #isCanvasInitialized;\n                    #observer;\n                    #realWidth;\n                    #realHeight;\n                    #requestFrameCallback;\n                    static{\n                        this._defaultColor = null;\n                    }\n                    static{\n                        this._defaultOpacity = 1;\n                    }\n                    static{\n                        this._defaultThickness = 1;\n                    }\n                    static{\n                        this._type = \"ink\";\n                    }\n                    constructor(params1){\n                        super({\n                            ...params1,\n                            name: \"inkEditor\"\n                        });\n                        this.#baseHeight = 0;\n                        this.#baseWidth = 0;\n                        this.#boundCanvasPointermove = this.canvasPointermove.bind(this);\n                        this.#boundCanvasPointerleave = this.canvasPointerleave.bind(this);\n                        this.#boundCanvasPointerup = this.canvasPointerup.bind(this);\n                        this.#boundCanvasPointerdown = this.canvasPointerdown.bind(this);\n                        this.#currentPath2D = new Path2D();\n                        this.#disableEditing = false;\n                        this.#hasSomethingToDraw = false;\n                        this.#isCanvasInitialized = false;\n                        this.#observer = null;\n                        this.#realWidth = 0;\n                        this.#realHeight = 0;\n                        this.#requestFrameCallback = null;\n                        this.color = params1.color || null;\n                        this.thickness = params1.thickness || null;\n                        this.opacity = params1.opacity || null;\n                        this.paths = [];\n                        this.bezierPath2D = [];\n                        this.allRawPaths = [];\n                        this.currentPath = [];\n                        this.scaleFactor = 1;\n                        this.translationX = this.translationY = 0;\n                        this.x = 0;\n                        this.y = 0;\n                        this._willKeepAspectRatio = true;\n                    }\n                    static initialize(l10n1) {\n                        _editor1.AnnotationEditor.initialize(l10n1, {\n                            strings: [\n                                \"editor_ink_canvas_aria_label\",\n                                \"editor_ink2_aria_label\"\n                            ]\n                        });\n                    }\n                    static updateDefaultParams(type1, value1) {\n                        switch(type1){\n                            case _util1.AnnotationEditorParamsType.INK_THICKNESS:\n                                InkEditor1._defaultThickness = value1;\n                                break;\n                            case _util1.AnnotationEditorParamsType.INK_COLOR:\n                                InkEditor1._defaultColor = value1;\n                                break;\n                            case _util1.AnnotationEditorParamsType.INK_OPACITY:\n                                InkEditor1._defaultOpacity = value1 / 100;\n                                break;\n                        }\n                    }\n                    updateParams(type1, value1) {\n                        switch(type1){\n                            case _util1.AnnotationEditorParamsType.INK_THICKNESS:\n                                this.#updateThickness(value1);\n                                break;\n                            case _util1.AnnotationEditorParamsType.INK_COLOR:\n                                this.#updateColor(value1);\n                                break;\n                            case _util1.AnnotationEditorParamsType.INK_OPACITY:\n                                this.#updateOpacity(value1);\n                                break;\n                        }\n                    }\n                    static get defaultPropertiesToUpdate() {\n                        return [\n                            [\n                                _util1.AnnotationEditorParamsType.INK_THICKNESS,\n                                InkEditor1._defaultThickness\n                            ],\n                            [\n                                _util1.AnnotationEditorParamsType.INK_COLOR,\n                                InkEditor1._defaultColor || _editor1.AnnotationEditor._defaultLineColor\n                            ],\n                            [\n                                _util1.AnnotationEditorParamsType.INK_OPACITY,\n                                Math.round(InkEditor1._defaultOpacity * 100)\n                            ]\n                        ];\n                    }\n                    get propertiesToUpdate() {\n                        return [\n                            [\n                                _util1.AnnotationEditorParamsType.INK_THICKNESS,\n                                this.thickness || InkEditor1._defaultThickness\n                            ],\n                            [\n                                _util1.AnnotationEditorParamsType.INK_COLOR,\n                                this.color || InkEditor1._defaultColor || _editor1.AnnotationEditor._defaultLineColor\n                            ],\n                            [\n                                _util1.AnnotationEditorParamsType.INK_OPACITY,\n                                Math.round(100 * (this.opacity ?? InkEditor1._defaultOpacity))\n                            ]\n                        ];\n                    }\n                    #updateThickness(thickness1) {\n                        const savedThickness1 = this.thickness;\n                        this.addCommands({\n                            cmd: ()=>{\n                                this.thickness = thickness1;\n                                this.#fitToContent();\n                            },\n                            undo: ()=>{\n                                this.thickness = savedThickness1;\n                                this.#fitToContent();\n                            },\n                            mustExec: true,\n                            type: _util1.AnnotationEditorParamsType.INK_THICKNESS,\n                            overwriteIfSameType: true,\n                            keepUndo: true\n                        });\n                    }\n                    #updateColor(color1) {\n                        const savedColor1 = this.color;\n                        this.addCommands({\n                            cmd: ()=>{\n                                this.color = color1;\n                                this.#redraw();\n                            },\n                            undo: ()=>{\n                                this.color = savedColor1;\n                                this.#redraw();\n                            },\n                            mustExec: true,\n                            type: _util1.AnnotationEditorParamsType.INK_COLOR,\n                            overwriteIfSameType: true,\n                            keepUndo: true\n                        });\n                    }\n                    #updateOpacity(opacity1) {\n                        opacity1 /= 100;\n                        const savedOpacity1 = this.opacity;\n                        this.addCommands({\n                            cmd: ()=>{\n                                this.opacity = opacity1;\n                                this.#redraw();\n                            },\n                            undo: ()=>{\n                                this.opacity = savedOpacity1;\n                                this.#redraw();\n                            },\n                            mustExec: true,\n                            type: _util1.AnnotationEditorParamsType.INK_OPACITY,\n                            overwriteIfSameType: true,\n                            keepUndo: true\n                        });\n                    }\n                    rebuild() {\n                        if (!this.parent) {\n                            return;\n                        }\n                        super.rebuild();\n                        if (this.div === null) {\n                            return;\n                        }\n                        if (!this.canvas) {\n                            this.#createCanvas();\n                            this.#createObserver();\n                        }\n                        if (!this.isAttachedToDOM) {\n                            this.parent.add(this);\n                            this.#setCanvasDims();\n                        }\n                        this.#fitToContent();\n                    }\n                    remove() {\n                        if (this.canvas === null) {\n                            return;\n                        }\n                        if (!this.isEmpty()) {\n                            this.commit();\n                        }\n                        this.canvas.width = this.canvas.height = 0;\n                        this.canvas.remove();\n                        this.canvas = null;\n                        this.#observer.disconnect();\n                        this.#observer = null;\n                        super.remove();\n                    }\n                    setParent(parent1) {\n                        if (!this.parent && parent1) {\n                            this._uiManager.removeShouldRescale(this);\n                        } else if (this.parent && parent1 === null) {\n                            this._uiManager.addShouldRescale(this);\n                        }\n                        super.setParent(parent1);\n                    }\n                    onScaleChanging() {\n                        const [parentWidth1, parentHeight1] = this.parentDimensions;\n                        const width2 = this.width * parentWidth1;\n                        const height1 = this.height * parentHeight1;\n                        this.setDimensions(width2, height1);\n                    }\n                    enableEditMode() {\n                        if (this.#disableEditing || this.canvas === null) {\n                            return;\n                        }\n                        super.enableEditMode();\n                        this._isDraggable = false;\n                        this.canvas.addEventListener(\"pointerdown\", this.#boundCanvasPointerdown);\n                    }\n                    disableEditMode() {\n                        if (!this.isInEditMode() || this.canvas === null) {\n                            return;\n                        }\n                        super.disableEditMode();\n                        this._isDraggable = !this.isEmpty();\n                        this.div.classList.remove(\"editing\");\n                        this.canvas.removeEventListener(\"pointerdown\", this.#boundCanvasPointerdown);\n                    }\n                    onceAdded() {\n                        this._isDraggable = !this.isEmpty();\n                    }\n                    isEmpty() {\n                        return this.paths.length === 0 || this.paths.length === 1 && this.paths[0].length === 0;\n                    }\n                    #getInitialBBox() {\n                        const { parentRotation: parentRotation1, parentDimensions: [width2, height1] } = this;\n                        switch(parentRotation1){\n                            case 90:\n                                return [\n                                    0,\n                                    height1,\n                                    height1,\n                                    width2\n                                ];\n                            case 180:\n                                return [\n                                    width2,\n                                    height1,\n                                    width2,\n                                    height1\n                                ];\n                            case 270:\n                                return [\n                                    width2,\n                                    0,\n                                    height1,\n                                    width2\n                                ];\n                            default:\n                                return [\n                                    0,\n                                    0,\n                                    width2,\n                                    height1\n                                ];\n                        }\n                    }\n                    #setStroke() {\n                        const { ctx: ctx1, color: color1, opacity: opacity1, thickness: thickness1, parentScale: parentScale1, scaleFactor: scaleFactor1 } = this;\n                        ctx1.lineWidth = thickness1 * parentScale1 / scaleFactor1;\n                        ctx1.lineCap = \"round\";\n                        ctx1.lineJoin = \"round\";\n                        ctx1.miterLimit = 10;\n                        ctx1.strokeStyle = `${color1}${(0, _tools1.opacityToHex)(opacity1)}`;\n                    }\n                    #startDrawing(x4, y4) {\n                        this.canvas.addEventListener(\"contextmenu\", _display_utils1.noContextMenu);\n                        this.canvas.addEventListener(\"pointerleave\", this.#boundCanvasPointerleave);\n                        this.canvas.addEventListener(\"pointermove\", this.#boundCanvasPointermove);\n                        this.canvas.addEventListener(\"pointerup\", this.#boundCanvasPointerup);\n                        this.canvas.removeEventListener(\"pointerdown\", this.#boundCanvasPointerdown);\n                        this.isEditing = true;\n                        if (!this.#isCanvasInitialized) {\n                            this.#isCanvasInitialized = true;\n                            this.#setCanvasDims();\n                            this.thickness ||= InkEditor1._defaultThickness;\n                            this.color ||= InkEditor1._defaultColor || _editor1.AnnotationEditor._defaultLineColor;\n                            this.opacity ??= InkEditor1._defaultOpacity;\n                        }\n                        this.currentPath.push([\n                            x4,\n                            y4\n                        ]);\n                        this.#hasSomethingToDraw = false;\n                        this.#setStroke();\n                        this.#requestFrameCallback = ()=>{\n                            this.#drawPoints();\n                            if (this.#requestFrameCallback) {\n                                window.requestAnimationFrame(this.#requestFrameCallback);\n                            }\n                        };\n                        window.requestAnimationFrame(this.#requestFrameCallback);\n                    }\n                    #draw(x4, y4) {\n                        const [lastX1, lastY1] = this.currentPath.at(-1);\n                        if (this.currentPath.length > 1 && x4 === lastX1 && y4 === lastY1) {\n                            return;\n                        }\n                        const currentPath1 = this.currentPath;\n                        let path2D1 = this.#currentPath2D;\n                        currentPath1.push([\n                            x4,\n                            y4\n                        ]);\n                        this.#hasSomethingToDraw = true;\n                        if (currentPath1.length <= 2) {\n                            path2D1.moveTo(...currentPath1[0]);\n                            path2D1.lineTo(x4, y4);\n                            return;\n                        }\n                        if (currentPath1.length === 3) {\n                            this.#currentPath2D = path2D1 = new Path2D();\n                            path2D1.moveTo(...currentPath1[0]);\n                        }\n                        this.#makeBezierCurve(path2D1, ...currentPath1.at(-3), ...currentPath1.at(-2), x4, y4);\n                    }\n                    #endPath() {\n                        if (this.currentPath.length === 0) {\n                            return;\n                        }\n                        const lastPoint1 = this.currentPath.at(-1);\n                        this.#currentPath2D.lineTo(...lastPoint1);\n                    }\n                    #stopDrawing(x4, y4) {\n                        this.#requestFrameCallback = null;\n                        x4 = Math.min(Math.max(x4, 0), this.canvas.width);\n                        y4 = Math.min(Math.max(y4, 0), this.canvas.height);\n                        this.#draw(x4, y4);\n                        this.#endPath();\n                        let bezier1;\n                        if (this.currentPath.length !== 1) {\n                            bezier1 = this.#generateBezierPoints();\n                        } else {\n                            const xy1 = [\n                                x4,\n                                y4\n                            ];\n                            bezier1 = [\n                                [\n                                    xy1,\n                                    xy1.slice(),\n                                    xy1.slice(),\n                                    xy1\n                                ]\n                            ];\n                        }\n                        const path2D1 = this.#currentPath2D;\n                        const currentPath1 = this.currentPath;\n                        this.currentPath = [];\n                        this.#currentPath2D = new Path2D();\n                        const cmd1 = ()=>{\n                            this.allRawPaths.push(currentPath1);\n                            this.paths.push(bezier1);\n                            this.bezierPath2D.push(path2D1);\n                            this.rebuild();\n                        };\n                        const undo1 = ()=>{\n                            this.allRawPaths.pop();\n                            this.paths.pop();\n                            this.bezierPath2D.pop();\n                            if (this.paths.length === 0) {\n                                this.remove();\n                            } else {\n                                if (!this.canvas) {\n                                    this.#createCanvas();\n                                    this.#createObserver();\n                                }\n                                this.#fitToContent();\n                            }\n                        };\n                        this.addCommands({\n                            cmd: cmd1,\n                            undo: undo1,\n                            mustExec: true\n                        });\n                    }\n                    #drawPoints() {\n                        if (!this.#hasSomethingToDraw) {\n                            return;\n                        }\n                        this.#hasSomethingToDraw = false;\n                        const thickness1 = Math.ceil(this.thickness * this.parentScale);\n                        const lastPoints1 = this.currentPath.slice(-3);\n                        const x4 = lastPoints1.map((xy1)=>xy1[0]);\n                        const y4 = lastPoints1.map((xy1)=>xy1[1]);\n                        const xMin1 = Math.min(...x4) - thickness1;\n                        const xMax1 = Math.max(...x4) + thickness1;\n                        const yMin1 = Math.min(...y4) - thickness1;\n                        const yMax1 = Math.max(...y4) + thickness1;\n                        const { ctx: ctx1 } = this;\n                        ctx1.save();\n                        ctx1.clearRect(0, 0, this.canvas.width, this.canvas.height);\n                        for (const path1 of this.bezierPath2D){\n                            ctx1.stroke(path1);\n                        }\n                        ctx1.stroke(this.#currentPath2D);\n                        ctx1.restore();\n                    }\n                    #makeBezierCurve(path2D1, x01, y01, x11, y11, x21, y21) {\n                        const prevX1 = (x01 + x11) / 2;\n                        const prevY1 = (y01 + y11) / 2;\n                        const x31 = (x11 + x21) / 2;\n                        const y31 = (y11 + y21) / 2;\n                        path2D1.bezierCurveTo(prevX1 + 2 * (x11 - prevX1) / 3, prevY1 + 2 * (y11 - prevY1) / 3, x31 + 2 * (x11 - x31) / 3, y31 + 2 * (y11 - y31) / 3, x31, y31);\n                    }\n                    #generateBezierPoints() {\n                        const path1 = this.currentPath;\n                        if (path1.length <= 2) {\n                            return [\n                                [\n                                    path1[0],\n                                    path1[0],\n                                    path1.at(-1),\n                                    path1.at(-1)\n                                ]\n                            ];\n                        }\n                        const bezierPoints1 = [];\n                        let i1;\n                        let [x01, y01] = path1[0];\n                        for(i1 = 1; i1 < path1.length - 2; i1++){\n                            const [x11, y11] = path1[i1];\n                            const [x21, y21] = path1[i1 + 1];\n                            const x31 = (x11 + x21) / 2;\n                            const y31 = (y11 + y21) / 2;\n                            const control11 = [\n                                x01 + 2 * (x11 - x01) / 3,\n                                y01 + 2 * (y11 - y01) / 3\n                            ];\n                            const control21 = [\n                                x31 + 2 * (x11 - x31) / 3,\n                                y31 + 2 * (y11 - y31) / 3\n                            ];\n                            bezierPoints1.push([\n                                [\n                                    x01,\n                                    y01\n                                ],\n                                control11,\n                                control21,\n                                [\n                                    x31,\n                                    y31\n                                ]\n                            ]);\n                            [x01, y01] = [\n                                x31,\n                                y31\n                            ];\n                        }\n                        const [x11, y11] = path1[i1];\n                        const [x21, y21] = path1[i1 + 1];\n                        const control11 = [\n                            x01 + 2 * (x11 - x01) / 3,\n                            y01 + 2 * (y11 - y01) / 3\n                        ];\n                        const control21 = [\n                            x21 + 2 * (x11 - x21) / 3,\n                            y21 + 2 * (y11 - y21) / 3\n                        ];\n                        bezierPoints1.push([\n                            [\n                                x01,\n                                y01\n                            ],\n                            control11,\n                            control21,\n                            [\n                                x21,\n                                y21\n                            ]\n                        ]);\n                        return bezierPoints1;\n                    }\n                    #redraw() {\n                        if (this.isEmpty()) {\n                            this.#updateTransform();\n                            return;\n                        }\n                        this.#setStroke();\n                        const { canvas: canvas1, ctx: ctx1 } = this;\n                        ctx1.setTransform(1, 0, 0, 1, 0, 0);\n                        ctx1.clearRect(0, 0, canvas1.width, canvas1.height);\n                        this.#updateTransform();\n                        for (const path1 of this.bezierPath2D){\n                            ctx1.stroke(path1);\n                        }\n                    }\n                    commit() {\n                        if (this.#disableEditing) {\n                            return;\n                        }\n                        super.commit();\n                        this.isEditing = false;\n                        this.disableEditMode();\n                        this.setInForeground();\n                        this.#disableEditing = true;\n                        this.div.classList.add(\"disabled\");\n                        this.#fitToContent(true);\n                        this.makeResizable();\n                        this.parent.addInkEditorIfNeeded(true);\n                        this.moveInDOM();\n                        this.div.focus({\n                            preventScroll: true\n                        });\n                    }\n                    focusin(event1) {\n                        if (!this._focusEventsAllowed) {\n                            return;\n                        }\n                        super.focusin(event1);\n                        this.enableEditMode();\n                    }\n                    canvasPointerdown(event1) {\n                        if (event1.button !== 0 || !this.isInEditMode() || this.#disableEditing) {\n                            return;\n                        }\n                        this.setInForeground();\n                        event1.preventDefault();\n                        if (event1.type !== \"mouse\") {\n                            this.div.focus();\n                        }\n                        this.#startDrawing(event1.offsetX, event1.offsetY);\n                    }\n                    canvasPointermove(event1) {\n                        event1.preventDefault();\n                        this.#draw(event1.offsetX, event1.offsetY);\n                    }\n                    canvasPointerup(event1) {\n                        event1.preventDefault();\n                        this.#endDrawing(event1);\n                    }\n                    canvasPointerleave(event1) {\n                        this.#endDrawing(event1);\n                    }\n                    #endDrawing(event1) {\n                        this.canvas.removeEventListener(\"pointerleave\", this.#boundCanvasPointerleave);\n                        this.canvas.removeEventListener(\"pointermove\", this.#boundCanvasPointermove);\n                        this.canvas.removeEventListener(\"pointerup\", this.#boundCanvasPointerup);\n                        this.canvas.addEventListener(\"pointerdown\", this.#boundCanvasPointerdown);\n                        setTimeout(()=>{\n                            this.canvas.removeEventListener(\"contextmenu\", _display_utils1.noContextMenu);\n                        }, 10);\n                        this.#stopDrawing(event1.offsetX, event1.offsetY);\n                        this.addToAnnotationStorage();\n                        this.setInBackground();\n                    }\n                    #createCanvas() {\n                        this.canvas = document.createElement(\"canvas\");\n                        this.canvas.width = this.canvas.height = 0;\n                        this.canvas.className = \"inkEditorCanvas\";\n                        _editor1.AnnotationEditor._l10nPromise.get(\"editor_ink_canvas_aria_label\").then((msg1)=>this.canvas?.setAttribute(\"aria-label\", msg1));\n                        this.div.append(this.canvas);\n                        this.ctx = this.canvas.getContext(\"2d\");\n                    }\n                    #createObserver() {\n                        this.#observer = new ResizeObserver((entries1)=>{\n                            const rect3 = entries1[0].contentRect;\n                            if (rect3.width && rect3.height) {\n                                this.setDimensions(rect3.width, rect3.height);\n                            }\n                        });\n                        this.#observer.observe(this.div);\n                    }\n                    get isResizable() {\n                        return !this.isEmpty() && this.#disableEditing;\n                    }\n                    render() {\n                        if (this.div) {\n                            return this.div;\n                        }\n                        let baseX1, baseY1;\n                        if (this.width) {\n                            baseX1 = this.x;\n                            baseY1 = this.y;\n                        }\n                        super.render();\n                        _editor1.AnnotationEditor._l10nPromise.get(\"editor_ink2_aria_label\").then((msg1)=>this.div?.setAttribute(\"aria-label\", msg1));\n                        const [x4, y4, w1, h3] = this.#getInitialBBox();\n                        this.setAt(x4, y4, 0, 0);\n                        this.setDims(w1, h3);\n                        this.#createCanvas();\n                        if (this.width) {\n                            const [parentWidth1, parentHeight1] = this.parentDimensions;\n                            this.setAspectRatio(this.width * parentWidth1, this.height * parentHeight1);\n                            this.setAt(baseX1 * parentWidth1, baseY1 * parentHeight1, this.width * parentWidth1, this.height * parentHeight1);\n                            this.#isCanvasInitialized = true;\n                            this.#setCanvasDims();\n                            this.setDims(this.width * parentWidth1, this.height * parentHeight1);\n                            this.#redraw();\n                            this.div.classList.add(\"disabled\");\n                        } else {\n                            this.div.classList.add(\"editing\");\n                            this.enableEditMode();\n                        }\n                        this.#createObserver();\n                        return this.div;\n                    }\n                    #setCanvasDims() {\n                        if (!this.#isCanvasInitialized) {\n                            return;\n                        }\n                        const [parentWidth1, parentHeight1] = this.parentDimensions;\n                        this.canvas.width = Math.ceil(this.width * parentWidth1);\n                        this.canvas.height = Math.ceil(this.height * parentHeight1);\n                        this.#updateTransform();\n                    }\n                    setDimensions(width2, height1) {\n                        const roundedWidth1 = Math.round(width2);\n                        const roundedHeight1 = Math.round(height1);\n                        if (this.#realWidth === roundedWidth1 && this.#realHeight === roundedHeight1) {\n                            return;\n                        }\n                        this.#realWidth = roundedWidth1;\n                        this.#realHeight = roundedHeight1;\n                        this.canvas.style.visibility = \"hidden\";\n                        const [parentWidth1, parentHeight1] = this.parentDimensions;\n                        this.width = width2 / parentWidth1;\n                        this.height = height1 / parentHeight1;\n                        this.fixAndSetPosition();\n                        if (this.#disableEditing) {\n                            this.#setScaleFactor(width2, height1);\n                        }\n                        this.#setCanvasDims();\n                        this.#redraw();\n                        this.canvas.style.visibility = \"visible\";\n                        this.fixDims();\n                    }\n                    #setScaleFactor(width2, height1) {\n                        const padding1 = this.#getPadding();\n                        const scaleFactorW1 = (width2 - padding1) / this.#baseWidth;\n                        const scaleFactorH1 = (height1 - padding1) / this.#baseHeight;\n                        this.scaleFactor = Math.min(scaleFactorW1, scaleFactorH1);\n                    }\n                    #updateTransform() {\n                        const padding1 = this.#getPadding() / 2;\n                        this.ctx.setTransform(this.scaleFactor, 0, 0, this.scaleFactor, this.translationX * this.scaleFactor + padding1, this.translationY * this.scaleFactor + padding1);\n                    }\n                    static #buildPath2D(bezier1) {\n                        const path2D1 = new Path2D();\n                        for(let i1 = 0, ii1 = bezier1.length; i1 < ii1; i1++){\n                            const [first1, control11, control21, second1] = bezier1[i1];\n                            if (i1 === 0) {\n                                path2D1.moveTo(...first1);\n                            }\n                            path2D1.bezierCurveTo(control11[0], control11[1], control21[0], control21[1], second1[0], second1[1]);\n                        }\n                        return path2D1;\n                    }\n                    static #toPDFCoordinates(points1, rect3, rotation1) {\n                        const [blX1, blY1, trX1, trY1] = rect3;\n                        switch(rotation1){\n                            case 0:\n                                for(let i1 = 0, ii1 = points1.length; i1 < ii1; i1 += 2){\n                                    points1[i1] += blX1;\n                                    points1[i1 + 1] = trY1 - points1[i1 + 1];\n                                }\n                                break;\n                            case 90:\n                                for(let i1 = 0, ii1 = points1.length; i1 < ii1; i1 += 2){\n                                    const x4 = points1[i1];\n                                    points1[i1] = points1[i1 + 1] + blX1;\n                                    points1[i1 + 1] = x4 + blY1;\n                                }\n                                break;\n                            case 180:\n                                for(let i1 = 0, ii1 = points1.length; i1 < ii1; i1 += 2){\n                                    points1[i1] = trX1 - points1[i1];\n                                    points1[i1 + 1] += blY1;\n                                }\n                                break;\n                            case 270:\n                                for(let i1 = 0, ii1 = points1.length; i1 < ii1; i1 += 2){\n                                    const x4 = points1[i1];\n                                    points1[i1] = trX1 - points1[i1 + 1];\n                                    points1[i1 + 1] = trY1 - x4;\n                                }\n                                break;\n                            default:\n                                throw new Error(\"Invalid rotation\");\n                        }\n                        return points1;\n                    }\n                    static #fromPDFCoordinates(points1, rect3, rotation1) {\n                        const [blX1, blY1, trX1, trY1] = rect3;\n                        switch(rotation1){\n                            case 0:\n                                for(let i1 = 0, ii1 = points1.length; i1 < ii1; i1 += 2){\n                                    points1[i1] -= blX1;\n                                    points1[i1 + 1] = trY1 - points1[i1 + 1];\n                                }\n                                break;\n                            case 90:\n                                for(let i1 = 0, ii1 = points1.length; i1 < ii1; i1 += 2){\n                                    const x4 = points1[i1];\n                                    points1[i1] = points1[i1 + 1] - blY1;\n                                    points1[i1 + 1] = x4 - blX1;\n                                }\n                                break;\n                            case 180:\n                                for(let i1 = 0, ii1 = points1.length; i1 < ii1; i1 += 2){\n                                    points1[i1] = trX1 - points1[i1];\n                                    points1[i1 + 1] -= blY1;\n                                }\n                                break;\n                            case 270:\n                                for(let i1 = 0, ii1 = points1.length; i1 < ii1; i1 += 2){\n                                    const x4 = points1[i1];\n                                    points1[i1] = trY1 - points1[i1 + 1];\n                                    points1[i1 + 1] = trX1 - x4;\n                                }\n                                break;\n                            default:\n                                throw new Error(\"Invalid rotation\");\n                        }\n                        return points1;\n                    }\n                    #serializePaths(s4, tx2, ty2, rect3) {\n                        const paths1 = [];\n                        const padding1 = this.thickness / 2;\n                        const shiftX1 = s4 * tx2 + padding1;\n                        const shiftY1 = s4 * ty2 + padding1;\n                        for (const bezier1 of this.paths){\n                            const buffer1 = [];\n                            const points1 = [];\n                            for(let j1 = 0, jj1 = bezier1.length; j1 < jj1; j1++){\n                                const [first1, control11, control21, second1] = bezier1[j1];\n                                const p101 = s4 * first1[0] + shiftX1;\n                                const p111 = s4 * first1[1] + shiftY1;\n                                const p201 = s4 * control11[0] + shiftX1;\n                                const p211 = s4 * control11[1] + shiftY1;\n                                const p301 = s4 * control21[0] + shiftX1;\n                                const p311 = s4 * control21[1] + shiftY1;\n                                const p401 = s4 * second1[0] + shiftX1;\n                                const p411 = s4 * second1[1] + shiftY1;\n                                if (j1 === 0) {\n                                    buffer1.push(p101, p111);\n                                    points1.push(p101, p111);\n                                }\n                                buffer1.push(p201, p211, p301, p311, p401, p411);\n                                points1.push(p201, p211);\n                                if (j1 === jj1 - 1) {\n                                    points1.push(p401, p411);\n                                }\n                            }\n                            paths1.push({\n                                bezier: InkEditor1.#toPDFCoordinates(buffer1, rect3, this.rotation),\n                                points: InkEditor1.#toPDFCoordinates(points1, rect3, this.rotation)\n                            });\n                        }\n                        return paths1;\n                    }\n                    #getBbox() {\n                        let xMin1 = Infinity;\n                        let xMax1 = -Infinity;\n                        let yMin1 = Infinity;\n                        let yMax1 = -Infinity;\n                        for (const path1 of this.paths){\n                            for (const [first1, control11, control21, second1] of path1){\n                                const bbox1 = _util1.Util.bezierBoundingBox(...first1, ...control11, ...control21, ...second1);\n                                xMin1 = Math.min(xMin1, bbox1[0]);\n                                yMin1 = Math.min(yMin1, bbox1[1]);\n                                xMax1 = Math.max(xMax1, bbox1[2]);\n                                yMax1 = Math.max(yMax1, bbox1[3]);\n                            }\n                        }\n                        return [\n                            xMin1,\n                            yMin1,\n                            xMax1,\n                            yMax1\n                        ];\n                    }\n                    #getPadding() {\n                        return this.#disableEditing ? Math.ceil(this.thickness * this.parentScale) : 0;\n                    }\n                    #fitToContent(firstTime1 = false) {\n                        if (this.isEmpty()) {\n                            return;\n                        }\n                        if (!this.#disableEditing) {\n                            this.#redraw();\n                            return;\n                        }\n                        const bbox1 = this.#getBbox();\n                        const padding1 = this.#getPadding();\n                        this.#baseWidth = Math.max(_editor1.AnnotationEditor.MIN_SIZE, bbox1[2] - bbox1[0]);\n                        this.#baseHeight = Math.max(_editor1.AnnotationEditor.MIN_SIZE, bbox1[3] - bbox1[1]);\n                        const width2 = Math.ceil(padding1 + this.#baseWidth * this.scaleFactor);\n                        const height1 = Math.ceil(padding1 + this.#baseHeight * this.scaleFactor);\n                        const [parentWidth1, parentHeight1] = this.parentDimensions;\n                        this.width = width2 / parentWidth1;\n                        this.height = height1 / parentHeight1;\n                        this.setAspectRatio(width2, height1);\n                        const prevTranslationX1 = this.translationX;\n                        const prevTranslationY1 = this.translationY;\n                        this.translationX = -bbox1[0];\n                        this.translationY = -bbox1[1];\n                        this.#setCanvasDims();\n                        this.#redraw();\n                        this.#realWidth = width2;\n                        this.#realHeight = height1;\n                        this.setDims(width2, height1);\n                        const unscaledPadding1 = firstTime1 ? padding1 / this.scaleFactor / 2 : 0;\n                        this.translate(prevTranslationX1 - this.translationX - unscaledPadding1, prevTranslationY1 - this.translationY - unscaledPadding1);\n                    }\n                    static deserialize(data1, parent1, uiManager1) {\n                        if (data1 instanceof _annotation_layer1.InkAnnotationElement) {\n                            return null;\n                        }\n                        const editor1 = super.deserialize(data1, parent1, uiManager1);\n                        editor1.thickness = data1.thickness;\n                        editor1.color = _util1.Util.makeHexColor(...data1.color);\n                        editor1.opacity = data1.opacity;\n                        const [pageWidth1, pageHeight1] = editor1.pageDimensions;\n                        const width2 = editor1.width * pageWidth1;\n                        const height1 = editor1.height * pageHeight1;\n                        const scaleFactor1 = editor1.parentScale;\n                        const padding1 = data1.thickness / 2;\n                        editor1.#disableEditing = true;\n                        editor1.#realWidth = Math.round(width2);\n                        editor1.#realHeight = Math.round(height1);\n                        const { paths: paths1, rect: rect3, rotation: rotation1 } = data1;\n                        for (let { bezier: bezier1 } of paths1){\n                            bezier1 = InkEditor1.#fromPDFCoordinates(bezier1, rect3, rotation1);\n                            const path1 = [];\n                            editor1.paths.push(path1);\n                            let p01 = scaleFactor1 * (bezier1[0] - padding1);\n                            let p12 = scaleFactor1 * (bezier1[1] - padding1);\n                            for(let i1 = 2, ii1 = bezier1.length; i1 < ii1; i1 += 6){\n                                const p101 = scaleFactor1 * (bezier1[i1] - padding1);\n                                const p111 = scaleFactor1 * (bezier1[i1 + 1] - padding1);\n                                const p201 = scaleFactor1 * (bezier1[i1 + 2] - padding1);\n                                const p211 = scaleFactor1 * (bezier1[i1 + 3] - padding1);\n                                const p301 = scaleFactor1 * (bezier1[i1 + 4] - padding1);\n                                const p311 = scaleFactor1 * (bezier1[i1 + 5] - padding1);\n                                path1.push([\n                                    [\n                                        p01,\n                                        p12\n                                    ],\n                                    [\n                                        p101,\n                                        p111\n                                    ],\n                                    [\n                                        p201,\n                                        p211\n                                    ],\n                                    [\n                                        p301,\n                                        p311\n                                    ]\n                                ]);\n                                p01 = p301;\n                                p12 = p311;\n                            }\n                            const path2D1 = this.#buildPath2D(path1);\n                            editor1.bezierPath2D.push(path2D1);\n                        }\n                        const bbox1 = editor1.#getBbox();\n                        editor1.#baseWidth = Math.max(_editor1.AnnotationEditor.MIN_SIZE, bbox1[2] - bbox1[0]);\n                        editor1.#baseHeight = Math.max(_editor1.AnnotationEditor.MIN_SIZE, bbox1[3] - bbox1[1]);\n                        editor1.#setScaleFactor(width2, height1);\n                        return editor1;\n                    }\n                    serialize() {\n                        if (this.isEmpty()) {\n                            return null;\n                        }\n                        const rect3 = this.getRect(0, 0);\n                        const color1 = _editor1.AnnotationEditor._colorManager.convert(this.ctx.strokeStyle);\n                        return {\n                            annotationType: _util1.AnnotationEditorType.INK,\n                            color: color1,\n                            thickness: this.thickness,\n                            opacity: this.opacity,\n                            paths: this.#serializePaths(this.scaleFactor / this.parentScale, this.translationX, this.translationY, rect3),\n                            pageIndex: this.pageIndex,\n                            rect: rect3,\n                            rotation: this.rotation,\n                            structTreeParentId: this._structTreeParentId\n                        };\n                    }\n                }\n                exports1.InkEditor = InkEditor1;\n            /***/ },\n            /* 34 */ /***/ (__unused_webpack_module1, exports1, __w_pdfjs_require__1)=>{\n                Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n                exports1.StampEditor = void 0;\n                var _util1 = __w_pdfjs_require__1(1);\n                var _editor1 = __w_pdfjs_require__1(4);\n                var _display_utils1 = __w_pdfjs_require__1(6);\n                var _annotation_layer1 = __w_pdfjs_require__1(29);\n                class StampEditor1 extends _editor1.AnnotationEditor {\n                    #bitmap;\n                    #bitmapId;\n                    #bitmapPromise;\n                    #bitmapUrl;\n                    #bitmapFile;\n                    #canvas;\n                    #observer;\n                    #resizeTimeoutId;\n                    #isSvg;\n                    #hasBeenAddedInUndoStack;\n                    static{\n                        this._type = \"stamp\";\n                    }\n                    constructor(params1){\n                        super({\n                            ...params1,\n                            name: \"stampEditor\"\n                        });\n                        this.#bitmap = null;\n                        this.#bitmapId = null;\n                        this.#bitmapPromise = null;\n                        this.#bitmapUrl = null;\n                        this.#bitmapFile = null;\n                        this.#canvas = null;\n                        this.#observer = null;\n                        this.#resizeTimeoutId = null;\n                        this.#isSvg = false;\n                        this.#hasBeenAddedInUndoStack = false;\n                        this.#bitmapUrl = params1.bitmapUrl;\n                        this.#bitmapFile = params1.bitmapFile;\n                    }\n                    static initialize(l10n1) {\n                        _editor1.AnnotationEditor.initialize(l10n1);\n                    }\n                    static get supportedTypes() {\n                        const types1 = [\n                            \"apng\",\n                            \"avif\",\n                            \"bmp\",\n                            \"gif\",\n                            \"jpeg\",\n                            \"png\",\n                            \"svg+xml\",\n                            \"webp\",\n                            \"x-icon\"\n                        ];\n                        return (0, _util1.shadow)(this, \"supportedTypes\", types1.map((type1)=>`image/${type1}`));\n                    }\n                    static get supportedTypesStr() {\n                        return (0, _util1.shadow)(this, \"supportedTypesStr\", this.supportedTypes.join(\",\"));\n                    }\n                    static isHandlingMimeForPasting(mime1) {\n                        return this.supportedTypes.includes(mime1);\n                    }\n                    static paste(item1, parent1) {\n                        parent1.pasteEditor(_util1.AnnotationEditorType.STAMP, {\n                            bitmapFile: item1.getAsFile()\n                        });\n                    }\n                    #getBitmapFetched(data1, fromId1 = false) {\n                        if (!data1) {\n                            this.remove();\n                            return;\n                        }\n                        this.#bitmap = data1.bitmap;\n                        if (!fromId1) {\n                            this.#bitmapId = data1.id;\n                            this.#isSvg = data1.isSvg;\n                        }\n                        this.#createCanvas();\n                    }\n                    #getBitmapDone() {\n                        this.#bitmapPromise = null;\n                        this._uiManager.enableWaiting(false);\n                        if (this.#canvas) {\n                            this.div.focus();\n                        }\n                    }\n                    #getBitmap() {\n                        if (this.#bitmapId) {\n                            this._uiManager.enableWaiting(true);\n                            this._uiManager.imageManager.getFromId(this.#bitmapId).then((data1)=>this.#getBitmapFetched(data1, true)).finally(()=>this.#getBitmapDone());\n                            return;\n                        }\n                        if (this.#bitmapUrl) {\n                            const url1 = this.#bitmapUrl;\n                            this.#bitmapUrl = null;\n                            this._uiManager.enableWaiting(true);\n                            this.#bitmapPromise = this._uiManager.imageManager.getFromUrl(url1).then((data1)=>this.#getBitmapFetched(data1)).finally(()=>this.#getBitmapDone());\n                            return;\n                        }\n                        if (this.#bitmapFile) {\n                            const file1 = this.#bitmapFile;\n                            this.#bitmapFile = null;\n                            this._uiManager.enableWaiting(true);\n                            this.#bitmapPromise = this._uiManager.imageManager.getFromFile(file1).then((data1)=>this.#getBitmapFetched(data1)).finally(()=>this.#getBitmapDone());\n                            return;\n                        }\n                        const input1 = document.createElement(\"input\");\n                        input1.type = \"file\";\n                        input1.accept = StampEditor1.supportedTypesStr;\n                        this.#bitmapPromise = new Promise((resolve1)=>{\n                            input1.addEventListener(\"change\", async ()=>{\n                                if (!input1.files || input1.files.length === 0) {\n                                    this.remove();\n                                } else {\n                                    this._uiManager.enableWaiting(true);\n                                    const data1 = await this._uiManager.imageManager.getFromFile(input1.files[0]);\n                                    this.#getBitmapFetched(data1);\n                                }\n                                resolve1();\n                            });\n                            input1.addEventListener(\"cancel\", ()=>{\n                                this.remove();\n                                resolve1();\n                            });\n                        }).finally(()=>this.#getBitmapDone());\n                        input1.click();\n                    }\n                    remove() {\n                        if (this.#bitmapId) {\n                            this.#bitmap = null;\n                            this._uiManager.imageManager.deleteId(this.#bitmapId);\n                            this.#canvas?.remove();\n                            this.#canvas = null;\n                            this.#observer?.disconnect();\n                            this.#observer = null;\n                        }\n                        super.remove();\n                    }\n                    rebuild() {\n                        if (!this.parent) {\n                            if (this.#bitmapId) {\n                                this.#getBitmap();\n                            }\n                            return;\n                        }\n                        super.rebuild();\n                        if (this.div === null) {\n                            return;\n                        }\n                        if (this.#bitmapId) {\n                            this.#getBitmap();\n                        }\n                        if (!this.isAttachedToDOM) {\n                            this.parent.add(this);\n                        }\n                    }\n                    onceAdded() {\n                        this._isDraggable = true;\n                        this.div.focus();\n                    }\n                    isEmpty() {\n                        return !(this.#bitmapPromise || this.#bitmap || this.#bitmapUrl || this.#bitmapFile);\n                    }\n                    get isResizable() {\n                        return true;\n                    }\n                    render() {\n                        if (this.div) {\n                            return this.div;\n                        }\n                        let baseX1, baseY1;\n                        if (this.width) {\n                            baseX1 = this.x;\n                            baseY1 = this.y;\n                        }\n                        super.render();\n                        this.div.hidden = true;\n                        if (this.#bitmap) {\n                            this.#createCanvas();\n                        } else {\n                            this.#getBitmap();\n                        }\n                        if (this.width) {\n                            const [parentWidth1, parentHeight1] = this.parentDimensions;\n                            this.setAt(baseX1 * parentWidth1, baseY1 * parentHeight1, this.width * parentWidth1, this.height * parentHeight1);\n                        }\n                        return this.div;\n                    }\n                    #createCanvas() {\n                        const { div: div1 } = this;\n                        let { width: width2, height: height1 } = this.#bitmap;\n                        const [pageWidth1, pageHeight1] = this.pageDimensions;\n                        const MAX_RATIO1 = 0.75;\n                        if (this.width) {\n                            width2 = this.width * pageWidth1;\n                            height1 = this.height * pageHeight1;\n                        } else if (width2 > MAX_RATIO1 * pageWidth1 || height1 > MAX_RATIO1 * pageHeight1) {\n                            const factor1 = Math.min(MAX_RATIO1 * pageWidth1 / width2, MAX_RATIO1 * pageHeight1 / height1);\n                            width2 *= factor1;\n                            height1 *= factor1;\n                        }\n                        const [parentWidth1, parentHeight1] = this.parentDimensions;\n                        this.setDims(width2 * parentWidth1 / pageWidth1, height1 * parentHeight1 / pageHeight1);\n                        this._uiManager.enableWaiting(false);\n                        const canvas1 = this.#canvas = document.createElement(\"canvas\");\n                        div1.append(canvas1);\n                        div1.hidden = false;\n                        this.#drawBitmap(width2, height1);\n                        this.#createObserver();\n                        if (!this.#hasBeenAddedInUndoStack) {\n                            this.parent.addUndoableEditor(this);\n                            this.#hasBeenAddedInUndoStack = true;\n                        }\n                        this._uiManager._eventBus.dispatch(\"reporttelemetry\", {\n                            source: this,\n                            details: {\n                                type: \"editing\",\n                                subtype: this.editorType,\n                                data: {\n                                    action: \"inserted_image\"\n                                }\n                            }\n                        });\n                        this.addAltTextButton();\n                    }\n                    #setDimensions(width2, height1) {\n                        const [parentWidth1, parentHeight1] = this.parentDimensions;\n                        this.width = width2 / parentWidth1;\n                        this.height = height1 / parentHeight1;\n                        this.setDims(width2, height1);\n                        if (this._initialOptions?.isCentered) {\n                            this.center();\n                        } else {\n                            this.fixAndSetPosition();\n                        }\n                        this._initialOptions = null;\n                        if (this.#resizeTimeoutId !== null) {\n                            clearTimeout(this.#resizeTimeoutId);\n                        }\n                        const TIME_TO_WAIT1 = 200;\n                        this.#resizeTimeoutId = setTimeout(()=>{\n                            this.#resizeTimeoutId = null;\n                            this.#drawBitmap(width2, height1);\n                        }, TIME_TO_WAIT1);\n                    }\n                    #scaleBitmap(width2, height1) {\n                        const { width: bitmapWidth1, height: bitmapHeight1 } = this.#bitmap;\n                        let newWidth1 = bitmapWidth1;\n                        let newHeight1 = bitmapHeight1;\n                        let bitmap1 = this.#bitmap;\n                        while(newWidth1 > 2 * width2 || newHeight1 > 2 * height1){\n                            const prevWidth1 = newWidth1;\n                            const prevHeight1 = newHeight1;\n                            if (newWidth1 > 2 * width2) {\n                                newWidth1 = newWidth1 >= 16384 ? Math.floor(newWidth1 / 2) - 1 : Math.ceil(newWidth1 / 2);\n                            }\n                            if (newHeight1 > 2 * height1) {\n                                newHeight1 = newHeight1 >= 16384 ? Math.floor(newHeight1 / 2) - 1 : Math.ceil(newHeight1 / 2);\n                            }\n                            const offscreen1 = new OffscreenCanvas(newWidth1, newHeight1);\n                            const ctx1 = offscreen1.getContext(\"2d\");\n                            ctx1.drawImage(bitmap1, 0, 0, prevWidth1, prevHeight1, 0, 0, newWidth1, newHeight1);\n                            bitmap1 = offscreen1.transferToImageBitmap();\n                        }\n                        return bitmap1;\n                    }\n                    #drawBitmap(width2, height1) {\n                        width2 = Math.ceil(width2);\n                        height1 = Math.ceil(height1);\n                        const canvas1 = this.#canvas;\n                        if (!canvas1 || canvas1.width === width2 && canvas1.height === height1) {\n                            return;\n                        }\n                        canvas1.width = width2;\n                        canvas1.height = height1;\n                        const bitmap1 = this.#isSvg ? this.#bitmap : this.#scaleBitmap(width2, height1);\n                        const ctx1 = canvas1.getContext(\"2d\");\n                        ctx1.filter = this._uiManager.hcmFilter;\n                        ctx1.drawImage(bitmap1, 0, 0, bitmap1.width, bitmap1.height, 0, 0, width2, height1);\n                    }\n                    #serializeBitmap(toUrl1) {\n                        if (toUrl1) {\n                            if (this.#isSvg) {\n                                const url1 = this._uiManager.imageManager.getSvgUrl(this.#bitmapId);\n                                if (url1) {\n                                    return url1;\n                                }\n                            }\n                            const canvas1 = document.createElement(\"canvas\");\n                            ({ width: canvas1.width, height: canvas1.height } = this.#bitmap);\n                            const ctx1 = canvas1.getContext(\"2d\");\n                            ctx1.drawImage(this.#bitmap, 0, 0);\n                            return canvas1.toDataURL();\n                        }\n                        if (this.#isSvg) {\n                            const [pageWidth1, pageHeight1] = this.pageDimensions;\n                            const width2 = Math.round(this.width * pageWidth1 * _display_utils1.PixelsPerInch.PDF_TO_CSS_UNITS);\n                            const height1 = Math.round(this.height * pageHeight1 * _display_utils1.PixelsPerInch.PDF_TO_CSS_UNITS);\n                            const offscreen1 = new OffscreenCanvas(width2, height1);\n                            const ctx1 = offscreen1.getContext(\"2d\");\n                            ctx1.drawImage(this.#bitmap, 0, 0, this.#bitmap.width, this.#bitmap.height, 0, 0, width2, height1);\n                            return offscreen1.transferToImageBitmap();\n                        }\n                        return structuredClone(this.#bitmap);\n                    }\n                    #createObserver() {\n                        this.#observer = new ResizeObserver((entries1)=>{\n                            const rect3 = entries1[0].contentRect;\n                            if (rect3.width && rect3.height) {\n                                this.#setDimensions(rect3.width, rect3.height);\n                            }\n                        });\n                        this.#observer.observe(this.div);\n                    }\n                    static deserialize(data1, parent1, uiManager1) {\n                        if (data1 instanceof _annotation_layer1.StampAnnotationElement) {\n                            return null;\n                        }\n                        const editor1 = super.deserialize(data1, parent1, uiManager1);\n                        const { rect: rect3, bitmapUrl: bitmapUrl1, bitmapId: bitmapId1, isSvg: isSvg1, accessibilityData: accessibilityData1 } = data1;\n                        if (bitmapId1 && uiManager1.imageManager.isValidId(bitmapId1)) {\n                            editor1.#bitmapId = bitmapId1;\n                        } else {\n                            editor1.#bitmapUrl = bitmapUrl1;\n                        }\n                        editor1.#isSvg = isSvg1;\n                        const [parentWidth1, parentHeight1] = editor1.pageDimensions;\n                        editor1.width = (rect3[2] - rect3[0]) / parentWidth1;\n                        editor1.height = (rect3[3] - rect3[1]) / parentHeight1;\n                        if (accessibilityData1) {\n                            editor1.altTextData = accessibilityData1;\n                        }\n                        return editor1;\n                    }\n                    serialize(isForCopying1 = false, context1 = null) {\n                        if (this.isEmpty()) {\n                            return null;\n                        }\n                        const serialized1 = {\n                            annotationType: _util1.AnnotationEditorType.STAMP,\n                            bitmapId: this.#bitmapId,\n                            pageIndex: this.pageIndex,\n                            rect: this.getRect(0, 0),\n                            rotation: this.rotation,\n                            isSvg: this.#isSvg,\n                            structTreeParentId: this._structTreeParentId\n                        };\n                        if (isForCopying1) {\n                            serialized1.bitmapUrl = this.#serializeBitmap(true);\n                            serialized1.accessibilityData = this.altTextData;\n                            return serialized1;\n                        }\n                        const { decorative: decorative1, altText: altText1 } = this.altTextData;\n                        if (!decorative1 && altText1) {\n                            serialized1.accessibilityData = {\n                                type: \"Figure\",\n                                alt: altText1\n                            };\n                        }\n                        if (context1 === null) {\n                            return serialized1;\n                        }\n                        context1.stamps ||= new Map();\n                        const area1 = this.#isSvg ? (serialized1.rect[2] - serialized1.rect[0]) * (serialized1.rect[3] - serialized1.rect[1]) : null;\n                        if (!context1.stamps.has(this.#bitmapId)) {\n                            context1.stamps.set(this.#bitmapId, {\n                                area: area1,\n                                serialized: serialized1\n                            });\n                            serialized1.bitmap = this.#serializeBitmap(false);\n                        } else if (this.#isSvg) {\n                            const prevData1 = context1.stamps.get(this.#bitmapId);\n                            if (area1 > prevData1.area) {\n                                prevData1.area = area1;\n                                prevData1.serialized.bitmap.close();\n                                prevData1.serialized.bitmap = this.#serializeBitmap(false);\n                            }\n                        }\n                        return serialized1;\n                    }\n                }\n                exports1.StampEditor = StampEditor1;\n            /***/ }\n        ];\n        /************************************************************************/ /******/ // The module cache\n        /******/ var __webpack_module_cache__ = {};\n        /******/ /******/ // The require function\n        /******/ function __w_pdfjs_require__(moduleId1) {\n            /******/ // Check if module is in cache\n            /******/ var cachedModule1 = __webpack_module_cache__[moduleId1];\n            /******/ if (cachedModule1 !== undefined) {\n                /******/ return cachedModule1.exports;\n            /******/ }\n            /******/ // Create a new module (and put it into the cache)\n            /******/ var module1 = __webpack_module_cache__[moduleId1] = {\n                /******/ // no module.id needed\n                /******/ // no module.loaded needed\n                /******/ exports: {}\n            };\n            /******/ /******/ // Execute the module function\n            /******/ __webpack_modules__[moduleId1](module1, module1.exports, __w_pdfjs_require__);\n            /******/ /******/ // Return the exports of the module\n            /******/ return module1.exports;\n        /******/ }\n        /******/ /************************************************************************/ var __nested_webpack_exports__ = {};\n        // This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.\n        (()=>{\n            var exports1 = __nested_webpack_exports__;\n            Object.defineProperty(exports1, \"__esModule\", {\n                value: true\n            });\n            Object.defineProperty(exports1, \"AbortException\", {\n                enumerable: true,\n                get: function() {\n                    return _util1.AbortException;\n                }\n            });\n            Object.defineProperty(exports1, \"AnnotationEditorLayer\", {\n                enumerable: true,\n                get: function() {\n                    return _annotation_editor_layer1.AnnotationEditorLayer;\n                }\n            });\n            Object.defineProperty(exports1, \"AnnotationEditorParamsType\", {\n                enumerable: true,\n                get: function() {\n                    return _util1.AnnotationEditorParamsType;\n                }\n            });\n            Object.defineProperty(exports1, \"AnnotationEditorType\", {\n                enumerable: true,\n                get: function() {\n                    return _util1.AnnotationEditorType;\n                }\n            });\n            Object.defineProperty(exports1, \"AnnotationEditorUIManager\", {\n                enumerable: true,\n                get: function() {\n                    return _tools1.AnnotationEditorUIManager;\n                }\n            });\n            Object.defineProperty(exports1, \"AnnotationLayer\", {\n                enumerable: true,\n                get: function() {\n                    return _annotation_layer1.AnnotationLayer;\n                }\n            });\n            Object.defineProperty(exports1, \"AnnotationMode\", {\n                enumerable: true,\n                get: function() {\n                    return _util1.AnnotationMode;\n                }\n            });\n            Object.defineProperty(exports1, \"CMapCompressionType\", {\n                enumerable: true,\n                get: function() {\n                    return _util1.CMapCompressionType;\n                }\n            });\n            Object.defineProperty(exports1, \"DOMSVGFactory\", {\n                enumerable: true,\n                get: function() {\n                    return _display_utils1.DOMSVGFactory;\n                }\n            });\n            Object.defineProperty(exports1, \"FeatureTest\", {\n                enumerable: true,\n                get: function() {\n                    return _util1.FeatureTest;\n                }\n            });\n            Object.defineProperty(exports1, \"GlobalWorkerOptions\", {\n                enumerable: true,\n                get: function() {\n                    return _worker_options1.GlobalWorkerOptions;\n                }\n            });\n            Object.defineProperty(exports1, \"ImageKind\", {\n                enumerable: true,\n                get: function() {\n                    return _util1.ImageKind;\n                }\n            });\n            Object.defineProperty(exports1, \"InvalidPDFException\", {\n                enumerable: true,\n                get: function() {\n                    return _util1.InvalidPDFException;\n                }\n            });\n            Object.defineProperty(exports1, \"MissingPDFException\", {\n                enumerable: true,\n                get: function() {\n                    return _util1.MissingPDFException;\n                }\n            });\n            Object.defineProperty(exports1, \"OPS\", {\n                enumerable: true,\n                get: function() {\n                    return _util1.OPS;\n                }\n            });\n            Object.defineProperty(exports1, \"PDFDataRangeTransport\", {\n                enumerable: true,\n                get: function() {\n                    return _api1.PDFDataRangeTransport;\n                }\n            });\n            Object.defineProperty(exports1, \"PDFDateString\", {\n                enumerable: true,\n                get: function() {\n                    return _display_utils1.PDFDateString;\n                }\n            });\n            Object.defineProperty(exports1, \"PDFWorker\", {\n                enumerable: true,\n                get: function() {\n                    return _api1.PDFWorker;\n                }\n            });\n            Object.defineProperty(exports1, \"PasswordResponses\", {\n                enumerable: true,\n                get: function() {\n                    return _util1.PasswordResponses;\n                }\n            });\n            Object.defineProperty(exports1, \"PermissionFlag\", {\n                enumerable: true,\n                get: function() {\n                    return _util1.PermissionFlag;\n                }\n            });\n            Object.defineProperty(exports1, \"PixelsPerInch\", {\n                enumerable: true,\n                get: function() {\n                    return _display_utils1.PixelsPerInch;\n                }\n            });\n            Object.defineProperty(exports1, \"PromiseCapability\", {\n                enumerable: true,\n                get: function() {\n                    return _util1.PromiseCapability;\n                }\n            });\n            Object.defineProperty(exports1, \"RenderingCancelledException\", {\n                enumerable: true,\n                get: function() {\n                    return _display_utils1.RenderingCancelledException;\n                }\n            });\n            Object.defineProperty(exports1, \"SVGGraphics\", {\n                enumerable: true,\n                get: function() {\n                    return _api1.SVGGraphics;\n                }\n            });\n            Object.defineProperty(exports1, \"UnexpectedResponseException\", {\n                enumerable: true,\n                get: function() {\n                    return _util1.UnexpectedResponseException;\n                }\n            });\n            Object.defineProperty(exports1, \"Util\", {\n                enumerable: true,\n                get: function() {\n                    return _util1.Util;\n                }\n            });\n            Object.defineProperty(exports1, \"VerbosityLevel\", {\n                enumerable: true,\n                get: function() {\n                    return _util1.VerbosityLevel;\n                }\n            });\n            Object.defineProperty(exports1, \"XfaLayer\", {\n                enumerable: true,\n                get: function() {\n                    return _xfa_layer1.XfaLayer;\n                }\n            });\n            Object.defineProperty(exports1, \"build\", {\n                enumerable: true,\n                get: function() {\n                    return _api1.build;\n                }\n            });\n            Object.defineProperty(exports1, \"createValidAbsoluteUrl\", {\n                enumerable: true,\n                get: function() {\n                    return _util1.createValidAbsoluteUrl;\n                }\n            });\n            Object.defineProperty(exports1, \"getDocument\", {\n                enumerable: true,\n                get: function() {\n                    return _api1.getDocument;\n                }\n            });\n            Object.defineProperty(exports1, \"getFilenameFromUrl\", {\n                enumerable: true,\n                get: function() {\n                    return _display_utils1.getFilenameFromUrl;\n                }\n            });\n            Object.defineProperty(exports1, \"getPdfFilenameFromUrl\", {\n                enumerable: true,\n                get: function() {\n                    return _display_utils1.getPdfFilenameFromUrl;\n                }\n            });\n            Object.defineProperty(exports1, \"getXfaPageViewport\", {\n                enumerable: true,\n                get: function() {\n                    return _display_utils1.getXfaPageViewport;\n                }\n            });\n            Object.defineProperty(exports1, \"isDataScheme\", {\n                enumerable: true,\n                get: function() {\n                    return _display_utils1.isDataScheme;\n                }\n            });\n            Object.defineProperty(exports1, \"isPdfFile\", {\n                enumerable: true,\n                get: function() {\n                    return _display_utils1.isPdfFile;\n                }\n            });\n            Object.defineProperty(exports1, \"loadScript\", {\n                enumerable: true,\n                get: function() {\n                    return _display_utils1.loadScript;\n                }\n            });\n            Object.defineProperty(exports1, \"noContextMenu\", {\n                enumerable: true,\n                get: function() {\n                    return _display_utils1.noContextMenu;\n                }\n            });\n            Object.defineProperty(exports1, \"normalizeUnicode\", {\n                enumerable: true,\n                get: function() {\n                    return _util1.normalizeUnicode;\n                }\n            });\n            Object.defineProperty(exports1, \"renderTextLayer\", {\n                enumerable: true,\n                get: function() {\n                    return _text_layer1.renderTextLayer;\n                }\n            });\n            Object.defineProperty(exports1, \"setLayerDimensions\", {\n                enumerable: true,\n                get: function() {\n                    return _display_utils1.setLayerDimensions;\n                }\n            });\n            Object.defineProperty(exports1, \"shadow\", {\n                enumerable: true,\n                get: function() {\n                    return _util1.shadow;\n                }\n            });\n            Object.defineProperty(exports1, \"updateTextLayer\", {\n                enumerable: true,\n                get: function() {\n                    return _text_layer1.updateTextLayer;\n                }\n            });\n            Object.defineProperty(exports1, \"version\", {\n                enumerable: true,\n                get: function() {\n                    return _api1.version;\n                }\n            });\n            var _util1 = __w_pdfjs_require__(1);\n            var _api1 = __w_pdfjs_require__(2);\n            var _display_utils1 = __w_pdfjs_require__(6);\n            var _text_layer1 = __w_pdfjs_require__(26);\n            var _annotation_editor_layer1 = __w_pdfjs_require__(27);\n            var _tools1 = __w_pdfjs_require__(5);\n            var _annotation_layer1 = __w_pdfjs_require__(29);\n            var _worker_options1 = __w_pdfjs_require__(14);\n            var _xfa_layer1 = __w_pdfjs_require__(32);\n            const pdfjsVersion1 = \"3.11.174\";\n            const pdfjsBuild1 = \"ce8716743\";\n        })();\n        /******/ return __nested_webpack_exports__;\n    /******/ })();\n}); //# sourceMappingURL=pdf.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pdfjs-dist/build/pdf.js\n");

/***/ })

};
;