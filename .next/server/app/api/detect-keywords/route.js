"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/detect-keywords/route";
exports.ids = ["app/api/detect-keywords/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("node:stream/web");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fdetect-keywords%2Froute&page=%2Fapi%2Fdetect-keywords%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdetect-keywords%2Froute.ts&appDir=%2Fhome%2Frishi%2FDesktop%2Fhackathon%2FHelloWorld2025%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Frishi%2FDesktop%2Fhackathon%2FHelloWorld2025&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fdetect-keywords%2Froute&page=%2Fapi%2Fdetect-keywords%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdetect-keywords%2Froute.ts&appDir=%2Fhome%2Frishi%2FDesktop%2Fhackathon%2FHelloWorld2025%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Frishi%2FDesktop%2Fhackathon%2FHelloWorld2025&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _home_rishi_Desktop_hackathon_HelloWorld2025_app_api_detect_keywords_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/detect-keywords/route.ts */ \"(rsc)/./app/api/detect-keywords/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/detect-keywords/route\",\n        pathname: \"/api/detect-keywords\",\n        filename: \"route\",\n        bundlePath: \"app/api/detect-keywords/route\"\n    },\n    resolvedPagePath: \"/home/rishi/Desktop/hackathon/HelloWorld2025/app/api/detect-keywords/route.ts\",\n    nextConfigOutput,\n    userland: _home_rishi_Desktop_hackathon_HelloWorld2025_app_api_detect_keywords_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/detect-keywords/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZkZXRlY3Qta2V5d29yZHMlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmRldGVjdC1rZXl3b3JkcyUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmRldGVjdC1rZXl3b3JkcyUyRnJvdXRlLnRzJmFwcERpcj0lMkZob21lJTJGcmlzaGklMkZEZXNrdG9wJTJGaGFja2F0aG9uJTJGSGVsbG9Xb3JsZDIwMjUlMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRmhvbWUlMkZyaXNoaSUyRkRlc2t0b3AlMkZoYWNrYXRob24lMkZIZWxsb1dvcmxkMjAyNSZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUM2QjtBQUMxRztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHVHQUF1RztBQUMvRztBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQzZKOztBQUU3SiIsInNvdXJjZXMiOlsid2VicGFjazovL3BkZi1rZXl3b3JkLWFuYWx5emVyLz83ODIwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi9ob21lL3Jpc2hpL0Rlc2t0b3AvaGFja2F0aG9uL0hlbGxvV29ybGQyMDI1L2FwcC9hcGkvZGV0ZWN0LWtleXdvcmRzL3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9kZXRlY3Qta2V5d29yZHMvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9kZXRlY3Qta2V5d29yZHNcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2RldGVjdC1rZXl3b3Jkcy9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9ob21lL3Jpc2hpL0Rlc2t0b3AvaGFja2F0aG9uL0hlbGxvV29ybGQyMDI1L2FwcC9hcGkvZGV0ZWN0LWtleXdvcmRzL3JvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2RldGVjdC1rZXl3b3Jkcy9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBoZWFkZXJIb29rcywgc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fdetect-keywords%2Froute&page=%2Fapi%2Fdetect-keywords%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdetect-keywords%2Froute.ts&appDir=%2Fhome%2Frishi%2FDesktop%2Fhackathon%2FHelloWorld2025%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Frishi%2FDesktop%2Fhackathon%2FHelloWorld2025&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/detect-keywords/route.ts":
/*!******************************************!*\
  !*** ./app/api/detect-keywords/route.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n\n\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY\n});\nasync function POST(request) {\n    try {\n        const { text } = await request.json();\n        if (!text) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"Text is required\"\n            }, {\n                status: 400\n            });\n        }\n        // Use semantic fingerprint-based keyword detection\n        const keywords = await semanticFingerprintKeywordDetection(text);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            keywords\n        });\n    } catch (error) {\n        console.error(\"Error detecting keywords:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            error: \"Failed to detect keywords\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function semanticFingerprintKeywordDetection(text) {\n    const keywords = [];\n    const foundTerms = new Set();\n    // Clean the text to remove non-content sections\n    const cleanText = cleanTextForKeywordDetection(text);\n    // Semantic fingerprint analysis\n    const semanticFingerprint = analyzeSemanticFingerprint(cleanText);\n    // Extract keywords using multiple semantic strategies\n    const strategies = [\n        ()=>extractTechnicalTerms(cleanText, semanticFingerprint),\n        ()=>extractFrequentIntegralTerms(cleanText, semanticFingerprint),\n        ()=>extractContextualKeywords(cleanText, semanticFingerprint),\n        ()=>extractDomainSpecificTerms(cleanText, semanticFingerprint),\n        ()=>extractSemanticClusters(cleanText, semanticFingerprint),\n        ()=>extractMultiWordPhrases(cleanText, semanticFingerprint)\n    ];\n    strategies.forEach((strategy)=>{\n        const extractedKeywords = strategy();\n        extractedKeywords.forEach((keyword)=>{\n            if (!foundTerms.has(keyword.word.toLowerCase())) {\n                foundTerms.add(keyword.word.toLowerCase());\n                keywords.push(keyword);\n            }\n        });\n    });\n    // Remove duplicates and sort by semantic importance score\n    const uniqueKeywords = keywords.filter((keyword, index, self)=>index === self.findIndex((k)=>k.word.toLowerCase() === keyword.word.toLowerCase()));\n    // Sort by semantic importance score (higher is better)\n    uniqueKeywords.sort((a, b)=>b.score - a.score);\n    // Return top 20 keywords with definitions and context\n    const keywordsWithDefinitions = await Promise.all(uniqueKeywords.slice(0, 20).map(async (k)=>{\n        const definitionResult = await generateDefinition(k.word, cleanText, semanticFingerprint);\n        return {\n            word: k.word,\n            definition: definitionResult.definition,\n            context: k.context,\n            isGPT: definitionResult.isGPT\n        };\n    }));\n    return keywordsWithDefinitions;\n}\nfunction analyzeSemanticFingerprint(text) {\n    const fingerprint = {\n        // Document structure analysis\n        sections: extractDocumentSections(text),\n        // Word frequency analysis\n        wordFrequencies: calculateWordFrequencies(text),\n        // Technical term density\n        technicalDensity: calculateTechnicalDensity(text),\n        // Semantic clusters\n        semanticClusters: identifySemanticClusters(text),\n        // Contextual importance\n        contextualImportance: calculateContextualImportance(text),\n        // Domain indicators\n        domainIndicators: identifyDomainIndicators(text)\n    };\n    return fingerprint;\n}\nfunction extractDocumentSections(text) {\n    const sections = {\n        abstract: extractSection(text, /abstract\\s*:?/i),\n        introduction: extractSection(text, /introduction\\s*:?/i),\n        methodology: extractSection(text, /method(?:ology|s)?\\s*:?/i),\n        results: extractSection(text, /results?\\s*:?/i),\n        discussion: extractSection(text, /discussion\\s*:?/i),\n        conclusion: extractSection(text, /conclusion\\s*:?/i)\n    };\n    return sections;\n}\nfunction extractSection(text, pattern) {\n    const match = text.match(new RegExp(pattern.source + \"([\\\\s\\\\S]*?)(?=\\\\n\\\\n[A-Z]|\\\\n[A-Z][a-z]+\\\\s*:?|$)\", \"i\"));\n    return match ? match[1].trim() : \"\";\n}\nfunction calculateWordFrequencies(text) {\n    const words = text.toLowerCase().match(/\\b[a-zA-Z]{3,}\\b/g) || [];\n    const frequencies = {};\n    words.forEach((word)=>{\n        frequencies[word] = (frequencies[word] || 0) + 1;\n    });\n    return frequencies;\n}\nfunction calculateTechnicalDensity(text) {\n    const technicalPatterns = [\n        /\\b\\w*(?:ology|ism|tion|sion|ment|ness|ity|ive|ical|able|ible|graphy|metry|nomy|pathy|phobia|philia|ization|ification)\\b/gi,\n        /\\b[A-Z]{2,6}\\b/g,\n        /\\b\\w*\\d+\\w*\\b/g\n    ];\n    let technicalCount = 0;\n    technicalPatterns.forEach((pattern)=>{\n        const matches = text.match(pattern);\n        if (matches) technicalCount += matches.length;\n    });\n    const totalWords = (text.match(/\\b\\w+\\b/g) || []).length;\n    return totalWords > 0 ? technicalCount / totalWords : 0;\n}\nfunction identifySemanticClusters(text) {\n    // Group related terms based on co-occurrence and semantic patterns\n    const clusters = [];\n    // Common semantic clusters in academic papers\n    const clusterPatterns = [\n        // Research methodology cluster\n        [\n            \"research\",\n            \"study\",\n            \"experiment\",\n            \"method\",\n            \"analysis\",\n            \"data\",\n            \"results\",\n            \"findings\"\n        ],\n        // Technical implementation cluster\n        [\n            \"algorithm\",\n            \"model\",\n            \"system\",\n            \"framework\",\n            \"approach\",\n            \"technique\",\n            \"methodology\"\n        ],\n        // Statistical analysis cluster\n        [\n            \"statistical\",\n            \"correlation\",\n            \"regression\",\n            \"significance\",\n            \"hypothesis\",\n            \"p-value\",\n            \"confidence\"\n        ],\n        // Machine learning cluster\n        [\n            \"machine\",\n            \"learning\",\n            \"neural\",\n            \"network\",\n            \"artificial\",\n            \"intelligence\",\n            \"algorithm\",\n            \"model\"\n        ],\n        // Performance evaluation cluster\n        [\n            \"performance\",\n            \"accuracy\",\n            \"efficiency\",\n            \"evaluation\",\n            \"assessment\",\n            \"measurement\",\n            \"benchmark\"\n        ]\n    ];\n    clusterPatterns.forEach((cluster)=>{\n        const foundTerms = cluster.filter((term)=>new RegExp(`\\\\b${term}\\\\b`, \"i\").test(text));\n        if (foundTerms.length >= 2) {\n            clusters.push(foundTerms);\n        }\n    });\n    return clusters;\n}\nfunction calculateContextualImportance(text) {\n    const importance = {};\n    // Terms that appear in multiple sections are more important\n    const sections = extractDocumentSections(text);\n    const allSectionText = Object.values(sections).join(\" \");\n    // Calculate importance based on section presence and frequency\n    const words = allSectionText.toLowerCase().match(/\\b[a-zA-Z]{4,}\\b/g) || [];\n    const wordCounts = {};\n    words.forEach((word)=>{\n        wordCounts[word] = (wordCounts[word] || 0) + 1;\n    });\n    Object.entries(wordCounts).forEach(([word, count])=>{\n        // Importance score based on frequency and section diversity\n        let score = count;\n        Object.values(sections).forEach((section)=>{\n            if (section.toLowerCase().includes(word)) {\n                score += 1;\n            }\n        });\n        importance[word] = score;\n    });\n    return importance;\n}\nfunction identifyDomainIndicators(text) {\n    const domainPatterns = [\n        // Computer Science\n        /\\b(?:algorithm|programming|software|hardware|database|network|security|artificial|intelligence|machine|learning)\\b/gi,\n        // Medicine/Biology\n        /\\b(?:patient|clinical|medical|biological|genetic|protein|cell|disease|treatment|therapy)\\b/gi,\n        // Psychology\n        /\\b(?:psychological|behavior|cognitive|mental|therapy|counseling|assessment|personality)\\b/gi,\n        // Economics\n        /\\b(?:economic|financial|market|investment|revenue|profit|cost|price|demand|supply)\\b/gi,\n        // Physics\n        /\\b(?:quantum|particle|energy|force|motion|wave|field|electromagnetic|nuclear|atomic)\\b/gi\n    ];\n    const domains = [];\n    domainPatterns.forEach((pattern, index)=>{\n        const matches = text.match(pattern);\n        if (matches && matches.length > 3) {\n            const domainNames = [\n                \"Computer Science\",\n                \"Medicine/Biology\",\n                \"Psychology\",\n                \"Economics\",\n                \"Physics\"\n            ];\n            domains.push(domainNames[index]);\n        }\n    });\n    return domains;\n}\nfunction extractTechnicalTerms(text, fingerprint) {\n    const keywords = [];\n    const technicalPatterns = [\n        // Acronyms\n        {\n            pattern: /\\b[A-Z]{2,6}\\b/g,\n            weight: 0.9\n        },\n        // Technical suffixes\n        {\n            pattern: /\\b\\w*(?:ology|ism|tion|sion|ment|ness|ity|ive|ical|able|ible|graphy|metry|nomy|pathy|phobia|philia|ization|ification)\\b/gi,\n            weight: 0.8\n        },\n        // Scientific notation\n        {\n            pattern: /\\b\\w*\\d+\\w*\\b/g,\n            weight: 0.7\n        },\n        // Compound terms\n        {\n            pattern: /\\b\\w+(?:-|_)\\w+\\b/g,\n            weight: 0.6\n        }\n    ];\n    technicalPatterns.forEach(({ pattern, weight })=>{\n        const matches = text.match(pattern);\n        if (matches) {\n            matches.forEach((match)=>{\n                if (match.length > 2 && !isCommonWord(match)) {\n                    keywords.push({\n                        word: match,\n                        context: extractContext(text, match),\n                        score: weight * (fingerprint.wordFrequencies[match.toLowerCase()] || 1)\n                    });\n                }\n            });\n        }\n    });\n    return keywords;\n}\nfunction extractFrequentIntegralTerms(text, fingerprint) {\n    const keywords = [];\n    Object.entries(fingerprint.wordFrequencies).forEach(([word, count])=>{\n        const frequency = count;\n        if (frequency >= 3 && word.length > 3 && !isCommonWord(word)) {\n            const contextualScore = fingerprint.contextualImportance[word] || frequency;\n            keywords.push({\n                word: word.charAt(0).toUpperCase() + word.slice(1),\n                context: extractContext(text, word),\n                score: contextualScore * 0.5\n            });\n        }\n    });\n    return keywords;\n}\nfunction extractContextualKeywords(text, fingerprint) {\n    const keywords = [];\n    // Extract terms that appear in multiple sections\n    const sectionTerms = {};\n    Object.entries(fingerprint.sections).forEach(([sectionName, sectionText])=>{\n        if (sectionText && typeof sectionText === \"string\") {\n            const words = sectionText.toLowerCase().match(/\\b[a-zA-Z]{4,}\\b/g) || [];\n            words.forEach((word)=>{\n                if (!isCommonWord(word)) {\n                    sectionTerms[word] = (sectionTerms[word] || 0) + 1;\n                }\n            });\n        }\n    });\n    Object.entries(sectionTerms).forEach(([word, sectionCount])=>{\n        if (sectionCount >= 2) {\n            keywords.push({\n                word: word.charAt(0).toUpperCase() + word.slice(1),\n                context: extractContext(text, word),\n                score: sectionCount * 0.7\n            });\n        }\n    });\n    return keywords;\n}\nfunction extractDomainSpecificTerms(text, fingerprint) {\n    const keywords = [];\n    // Domain-specific term patterns\n    const domainTerms = [\n        // Research terms\n        \"hypothesis\",\n        \"methodology\",\n        \"empirical\",\n        \"quantitative\",\n        \"qualitative\",\n        \"longitudinal\",\n        \"cross-sectional\",\n        // Statistical terms\n        \"correlation\",\n        \"regression\",\n        \"significance\",\n        \"p-value\",\n        \"confidence\",\n        \"interval\",\n        \"effect\",\n        \"size\",\n        // Technical terms\n        \"algorithm\",\n        \"optimization\",\n        \"implementation\",\n        \"evaluation\",\n        \"benchmark\",\n        \"performance\",\n        \"accuracy\",\n        // Scientific terms\n        \"experiment\",\n        \"observation\",\n        \"measurement\",\n        \"analysis\",\n        \"synthesis\",\n        \"validation\",\n        \"verification\"\n    ];\n    domainTerms.forEach((term)=>{\n        const regex = new RegExp(`\\\\b${term}\\\\b`, \"gi\");\n        const matches = text.match(regex);\n        if (matches && matches.length > 0) {\n            keywords.push({\n                word: term.charAt(0).toUpperCase() + term.slice(1),\n                context: extractContext(text, term),\n                score: matches.length * 0.6\n            });\n        }\n    });\n    return keywords;\n}\nfunction extractSemanticClusters(text, fingerprint) {\n    const keywords = [];\n    fingerprint.semanticClusters.forEach((cluster)=>{\n        cluster.forEach((term)=>{\n            const regex = new RegExp(`\\\\b${term}\\\\b`, \"gi\");\n            const matches = text.match(regex);\n            if (matches && matches.length > 0) {\n                keywords.push({\n                    word: term.charAt(0).toUpperCase() + term.slice(1),\n                    context: extractContext(text, term),\n                    score: matches.length * 0.4\n                });\n            }\n        });\n    });\n    return keywords;\n}\nfunction extractMultiWordPhrases(text, fingerprint) {\n    const keywords = [];\n    // Common multi-word technical phrases\n    const phrasePatterns = [\n        // Scientific phrases\n        {\n            pattern: /\\b(?:deep sea|cell death|protein synthesis|DNA replication|gene expression|cell division|immune response|neural network|machine learning|artificial intelligence|data analysis|statistical significance|control group|experimental design)\\b/gi,\n            weight: 0.9\n        },\n        // Medical/Biological phrases\n        {\n            pattern: /\\b(?:blood pressure|heart rate|brain function|muscle contraction|enzyme activity|hormone levels|immune system|nervous system|cardiovascular system|respiratory system)\\b/gi,\n            weight: 0.9\n        },\n        // Technical phrases\n        {\n            pattern: /\\b(?:user interface|database management|network security|software development|hardware configuration|data processing|algorithm design|system architecture|cloud computing|mobile application)\\b/gi,\n            weight: 0.8\n        },\n        // Academic phrases\n        {\n            pattern: /\\b(?:research methodology|literature review|data collection|statistical analysis|hypothesis testing|peer review|academic writing|theoretical framework|empirical evidence|qualitative research|quantitative research)\\b/gi,\n            weight: 0.8\n        },\n        // General compound terms\n        {\n            pattern: /\\b(?:high school|middle school|elementary school|university level|graduate level|undergraduate level|post graduate|doctoral degree|master's degree|bachelor's degree)\\b/gi,\n            weight: 0.7\n        },\n        // Time-related phrases\n        {\n            pattern: /\\b(?:long term|short term|medium term|real time|over time|in time|on time|at the time|for the time|during the time)\\b/gi,\n            weight: 0.6\n        },\n        // Location phrases\n        {\n            pattern: /\\b(?:north america|south america|european union|middle east|far east|central asia|southeast asia|sub saharan|latin america|north africa)\\b/gi,\n            weight: 0.6\n        }\n    ];\n    phrasePatterns.forEach(({ pattern, weight })=>{\n        const matches = text.match(pattern);\n        if (matches) {\n            matches.forEach((match)=>{\n                const phrase = match.trim();\n                if (phrase.length > 3 && !isCommonPhrase(phrase)) {\n                    keywords.push({\n                        word: phrase,\n                        context: extractContext(text, phrase),\n                        score: weight * (fingerprint.wordFrequencies[phrase.toLowerCase()] || 1)\n                    });\n                }\n            });\n        }\n    });\n    // Extract custom phrases from the document (2-4 word combinations that appear frequently)\n    const words = text.toLowerCase().match(/\\b[a-zA-Z]{3,}\\b/g) || [];\n    const phraseCounts = {};\n    // Look for 2-word phrases\n    for(let i = 0; i < words.length - 1; i++){\n        const phrase = `${words[i]} ${words[i + 1]}`;\n        if (!isCommonPhrase(phrase)) {\n            phraseCounts[phrase] = (phraseCounts[phrase] || 0) + 1;\n        }\n    }\n    // Look for 3-word phrases\n    for(let i = 0; i < words.length - 2; i++){\n        const phrase = `${words[i]} ${words[i + 1]} ${words[i + 2]}`;\n        if (!isCommonPhrase(phrase)) {\n            phraseCounts[phrase] = (phraseCounts[phrase] || 0) + 1;\n        }\n    }\n    // Add frequent custom phrases\n    Object.entries(phraseCounts).forEach(([phrase, count])=>{\n        if (count >= 2 && phrase.length > 5) {\n            keywords.push({\n                word: phrase.split(\" \").map((word)=>word.charAt(0).toUpperCase() + word.slice(1)).join(\" \"),\n                context: extractContext(text, phrase),\n                score: count * 0.5\n            });\n        }\n    });\n    return keywords;\n}\nfunction isCommonPhrase(phrase) {\n    const commonPhrases = [\n        \"the same\",\n        \"in the\",\n        \"on the\",\n        \"at the\",\n        \"for the\",\n        \"with the\",\n        \"to the\",\n        \"of the\",\n        \"and the\",\n        \"or the\",\n        \"this is\",\n        \"that is\",\n        \"there is\",\n        \"there are\",\n        \"it is\",\n        \"it was\",\n        \"it has\",\n        \"it will\",\n        \"it can\",\n        \"it may\",\n        \"as well\",\n        \"as well as\",\n        \"such as\",\n        \"for example\",\n        \"for instance\",\n        \"in addition\",\n        \"in fact\",\n        \"in order\",\n        \"at least\",\n        \"at most\",\n        \"at all\",\n        \"at once\",\n        \"at first\",\n        \"at last\",\n        \"at best\",\n        \"at worst\",\n        \"on the other hand\",\n        \"on the contrary\",\n        \"on average\",\n        \"on purpose\",\n        \"on time\",\n        \"on schedule\",\n        \"in general\",\n        \"in particular\",\n        \"in detail\",\n        \"in summary\",\n        \"in conclusion\",\n        \"in other words\",\n        \"for the most part\",\n        \"for the time being\",\n        \"for the sake of\",\n        \"for the purpose of\",\n        \"as a result\",\n        \"as a matter of fact\",\n        \"as a whole\",\n        \"as a rule\",\n        \"as a consequence\",\n        \"due to\",\n        \"because of\",\n        \"in spite of\",\n        \"instead of\",\n        \"rather than\",\n        \"more than\",\n        \"less than\",\n        \"up to\",\n        \"down to\",\n        \"over to\",\n        \"under to\",\n        \"through to\",\n        \"across to\",\n        \"around to\",\n        \"deep sea\",\n        \"cell death\",\n        \"protein synthesis\",\n        \"DNA replication\",\n        \"gene expression\"\n    ];\n    return commonPhrases.includes(phrase.toLowerCase());\n}\nasync function generateDefinition(word, text, fingerprint) {\n    // Check if OpenAI API key is configured\n    if (!process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY === \"your-openai-api-key\") {\n        console.log(\"OpenAI API key not configured, using fallback semantic analysis for:\", word);\n        return Promise.resolve({\n            definition: generateSemanticDefinition(word, text, fingerprint),\n            isGPT: false\n        });\n    }\n    try {\n        // Use GPT to generate intelligent keyword definition\n        const context = extractContext(text, word, 200);\n        const domains = fingerprint.domainIndicators.join(\", \") || \"general\";\n        const prompt = `\nAnalyze the following keyword and provide a clear, concise definition based on its usage in the document context. Focus on:\n\n1. What the term means in this specific context\n2. Its role or function in the document\n3. Any technical or domain-specific meaning\n4. Keep the definition informative but accessible\n\nKeyword: \"${word}\"\nDocument Context: \"${context}\"\nDomain: ${domains}\n\nProvide a clear, helpful definition in 1-2 sentences:`;\n        const response = await openai.chat.completions.create({\n            model: \"gpt-4\",\n            messages: [\n                {\n                    role: \"system\",\n                    content: \"You are a helpful assistant that provides clear, concise definitions of technical terms based on their usage in documents. Focus on making complex concepts accessible and understandable.\"\n                },\n                {\n                    role: \"user\",\n                    content: prompt\n                }\n            ],\n            max_tokens: 150,\n            temperature: 0.7\n        });\n        const definition = response.choices[0]?.message?.content?.trim();\n        return Promise.resolve({\n            definition: definition || generateSemanticDefinition(word, text, fingerprint),\n            isGPT: !!definition\n        });\n    } catch (error) {\n        console.error(\"GPT keyword definition generation failed for:\", word, error);\n        return Promise.resolve({\n            definition: generateSemanticDefinition(word, text, fingerprint),\n            isGPT: false\n        });\n    }\n}\nfunction generateSemanticDefinition(word, text, fingerprint) {\n    // Generate contextual definition based on usage patterns\n    const context = extractContext(text, word, 200);\n    // Look for definition patterns\n    const definitionPatterns = [\n        new RegExp(`${word}\\\\s*(?:is|are|refers to|means|denotes|represents)\\\\s*([^.]{10,100})`, \"i\"),\n        new RegExp(`(?:is|are|refers to|means|denotes|represents)\\\\s*${word}\\\\s*([^.]{10,100})`, \"i\"),\n        new RegExp(`${word}\\\\s*\\\\(([^)]{10,100})\\\\)`, \"i\")\n    ];\n    for (const pattern of definitionPatterns){\n        const match = context.match(pattern);\n        if (match) {\n            return match[1].trim();\n        }\n    }\n    // Fallback: generate definition based on domain and context\n    const domains = fingerprint.domainIndicators;\n    if (domains.length > 0) {\n        return `A ${domains[0].toLowerCase()} term referring to ${word.toLowerCase()}`;\n    }\n    return `A technical term used in this context`;\n}\nfunction isCommonWord(word) {\n    const commonWords = new Set([\n        \"the\",\n        \"and\",\n        \"for\",\n        \"are\",\n        \"but\",\n        \"not\",\n        \"you\",\n        \"all\",\n        \"can\",\n        \"had\",\n        \"her\",\n        \"was\",\n        \"one\",\n        \"our\",\n        \"out\",\n        \"day\",\n        \"get\",\n        \"has\",\n        \"him\",\n        \"his\",\n        \"how\",\n        \"its\",\n        \"may\",\n        \"new\",\n        \"now\",\n        \"old\",\n        \"see\",\n        \"two\",\n        \"who\",\n        \"boy\",\n        \"did\",\n        \"man\",\n        \"men\",\n        \"put\",\n        \"say\",\n        \"she\",\n        \"too\",\n        \"use\",\n        \"way\",\n        \"will\",\n        \"with\",\n        \"this\",\n        \"that\",\n        \"they\",\n        \"have\",\n        \"been\",\n        \"were\",\n        \"said\",\n        \"each\",\n        \"which\",\n        \"their\",\n        \"time\",\n        \"about\",\n        \"there\",\n        \"could\",\n        \"other\",\n        \"after\",\n        \"first\",\n        \"well\",\n        \"also\",\n        \"where\",\n        \"much\",\n        \"some\",\n        \"these\",\n        \"than\",\n        \"would\",\n        \"like\",\n        \"into\",\n        \"more\",\n        \"come\",\n        \"made\",\n        \"many\",\n        \"most\",\n        \"over\",\n        \"such\",\n        \"take\",\n        \"than\",\n        \"them\",\n        \"very\",\n        \"when\",\n        \"work\",\n        \"year\",\n        \"your\",\n        \"good\",\n        \"know\",\n        \"just\",\n        \"long\",\n        \"make\",\n        \"right\",\n        \"same\",\n        \"seem\",\n        \"tell\",\n        \"turn\",\n        \"want\",\n        \"went\",\n        \"were\",\n        \"what\",\n        \"when\",\n        \"will\",\n        \"with\",\n        \"work\",\n        \"year\",\n        \"your\",\n        \"here\",\n        \"there\",\n        \"where\",\n        \"why\",\n        \"how\",\n        \"what\",\n        \"when\",\n        \"where\",\n        \"why\",\n        \"how\",\n        \"what\",\n        \"when\",\n        \"where\",\n        \"why\",\n        \"how\",\n        \"what\",\n        \"when\"\n    ]);\n    return commonWords.has(word.toLowerCase());\n}\nfunction extractContext(text, term, contextLength = 100) {\n    const index = text.toLowerCase().indexOf(term.toLowerCase());\n    if (index === -1) return \"\";\n    const start = Math.max(0, index - contextLength);\n    const end = Math.min(text.length, index + term.length + contextLength);\n    return text.substring(start, end).trim();\n}\nfunction cleanTextForKeywordDetection(text) {\n    let cleanedText = text;\n    // Remove references/bibliography sections\n    cleanedText = cleanedText.replace(/(references?|bibliography|works cited|sources?)\\s*:?.*$/gim, \"\");\n    // Remove Creative Commons and copyright information\n    cleanedText = cleanedText.replace(/creative commons.*?$/gim, \"\");\n    cleanedText = cleanedText.replace(/copyright.*?$/gim, \"\");\n    cleanedText = cleanedText.replace(/©.*?$/gim, \"\");\n    cleanedText = cleanedText.replace(/all rights reserved.*?$/gim, \"\");\n    // Remove author affiliations and acknowledgments\n    cleanedText = cleanedText.replace(/acknowledgments?.*?$/gim, \"\");\n    cleanedText = cleanedText.replace(/funding.*?$/gim, \"\");\n    cleanedText = cleanedText.replace(/author affiliations?.*?$/gim, \"\");\n    // Remove abstract and metadata sections\n    cleanedText = cleanedText.replace(/abstract\\s*:?.*?(?=\\n\\n|\\n[A-Z]|$)/gim, \"\");\n    cleanedText = cleanedText.replace(/keywords?\\s*:?.*?(?=\\n\\n|\\n[A-Z]|$)/gim, \"\");\n    // Remove page numbers and headers/footers\n    cleanedText = cleanedText.replace(/^\\s*\\d+\\s*$/gm, \"\") // Standalone page numbers\n    ;\n    cleanedText = cleanedText.replace(/^page \\d+.*$/gim, \"\") // \"Page X\" headers\n    ;\n    // Remove legal disclaimers and boilerplate\n    cleanedText = cleanedText.replace(/disclaimer.*?$/gim, \"\");\n    cleanedText = cleanedText.replace(/terms of use.*?$/gim, \"\");\n    cleanedText = cleanedText.replace(/privacy policy.*?$/gim, \"\");\n    // Remove excessive whitespace and normalize\n    cleanedText = cleanedText.replace(/\\n\\s*\\n\\s*\\n/g, \"\\n\\n\") // Multiple newlines to double\n    ;\n    cleanedText = cleanedText.replace(/^\\s+|\\s+$/gm, \"\") // Trim each line\n    ;\n    cleanedText = cleanedText.trim();\n    return cleanedText;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/detect-keywords/route.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/formdata-node","vendor-chunks/ms","vendor-chunks/openai","vendor-chunks/tr46","vendor-chunks/web-streams-polyfill","vendor-chunks/node-fetch","vendor-chunks/whatwg-url","vendor-chunks/event-target-shim","vendor-chunks/agentkeepalive","vendor-chunks/form-data-encoder","vendor-chunks/webidl-conversions","vendor-chunks/abort-controller","vendor-chunks/humanize-ms"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fdetect-keywords%2Froute&page=%2Fapi%2Fdetect-keywords%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fdetect-keywords%2Froute.ts&appDir=%2Fhome%2Frishi%2FDesktop%2Fhackathon%2FHelloWorld2025%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Frishi%2FDesktop%2Fhackathon%2FHelloWorld2025&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();